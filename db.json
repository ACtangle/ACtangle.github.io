{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/articalPic/10.jpg","path":"articalPic/10.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/11.jpg","path":"articalPic/11.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/18.jpg","path":"articalPic/18.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/19.png","path":"articalPic/19.png","modified":0,"renderable":0},{"_id":"source/articalPic/4.jpg","path":"articalPic/4.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/5.png","path":"articalPic/5.png","modified":0,"renderable":0},{"_id":"source/articalPic/6.jpg","path":"articalPic/6.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/7.jpg","path":"articalPic/7.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/9.jpg","path":"articalPic/9.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/8.jpg","path":"articalPic/8.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/1.jpg","path":"articalPic/1.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/12.jpg","path":"articalPic/12.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/15.jpg","path":"articalPic/15.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/2.jpg","path":"articalPic/2.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/IMG_2811.jpg","path":"articalPic/IMG_2811.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/我的2019.jpg","path":"gallery/thumbnails/我的2019.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/melon.jpg","path":"images/melon.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/Alipay.jpeg","path":"images/Alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon1.jpg","path":"images/favicon1.jpg","modified":0,"renderable":1},{"_id":"source/articalPic/13.jpg","path":"articalPic/13.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/14.jpg","path":"articalPic/14.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/3.jpg","path":"articalPic/3.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/反射之基础使用.jpg","path":"gallery/thumbnails/反射之基础使用.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/images/WechatPay.jpeg","path":"images/WechatPay.jpeg","modified":0,"renderable":1},{"_id":"source/gallery/thumbnails/计算机网络之基础知识.jpg","path":"gallery/thumbnails/计算机网络之基础知识.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/spring事务.jpg","path":"gallery/thumbnails/spring事务.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/images/favicon.jpg","path":"images/favicon.jpg","modified":0,"renderable":1},{"_id":"source/gallery/thumbnails/线程之synchronized详解.jpg","path":"gallery/thumbnails/线程之synchronized详解.jpg","modified":0,"renderable":0},{"_id":"source/articalPic/16.jpeg","path":"articalPic/16.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/java面试题目(持续更新).jpeg","path":"gallery/thumbnails/java面试题目(持续更新).jpeg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/redis之锁相关知识.png","path":"gallery/thumbnails/redis之锁相关知识.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-icarus-master/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus-master/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3ac118ca1b01f1dd4c91e5bb8145a11915d884be","modified":1583692489172},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1577953273000},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1577953273000},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1577953273000},{"_id":"themes/icarus/_config.yml","hash":"e2bc8ea31a51479b9cd8809175e56f8fc72e796c","modified":1577965923000},{"_id":"themes/icarus/package.json","hash":"4f362aa241ad5d5d9422cc8f1e825edfcd8cbb1a","modified":1577953273000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1577958318000},{"_id":"source/_posts/redis.md","hash":"bbbd1ccfeb0d82497004cdc32a3aa77550b94b94","modified":1577967263000},{"_id":"source/_posts/spring事务.md","hash":"09d8c170b13f627b02d39f235b4e713b4bf88ba7","modified":1583690805514},{"_id":"source/_posts/反射.md","hash":"b20258c8819c526e2f2cbf8565ed814e69543398","modified":1577965489000},{"_id":"source/_posts/我的2019.md","hash":"8134d9ead406eab70a16dfd29ff794546e99cb41","modified":1578482589000},{"_id":"source/_posts/线程.md","hash":"a967a1b3c01bfa6b1a154c7263a3649653129d94","modified":1578571062000},{"_id":"source/_posts/计算机网络.md","hash":"b8296d8e4d6924b380b1b037a45040e2eb919d00","modified":1577967222000},{"_id":"source/_posts/面试.md","hash":"e37ef5caa192dea3e5a3b03be118026867ed315f","modified":1578571441000},{"_id":"source/about/index.md","hash":"6aad051f4f41216180bfffb7ef07864622baadd4","modified":1577964960000},{"_id":"source/articalPic/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1577972101000},{"_id":"source/articalPic/10.jpg","hash":"951ccde88a1a35566d022d5c9a59142a2e9d9e78","modified":1577970168000},{"_id":"source/articalPic/11.jpg","hash":"a3f91be49c06d9e43f0692c5798b3c49589ae6d6","modified":1577970200000},{"_id":"source/articalPic/18.jpg","hash":"205c6aa6ba6d4295ee4514b56cc43fa7dfd08ea9","modified":1578481905000},{"_id":"source/articalPic/19.png","hash":"8115b059fa7a75907459e995b0ac086676274e6e","modified":1578565263000},{"_id":"source/articalPic/4.jpg","hash":"e8176c6580139eb473c99d567eae1ad83110f079","modified":1577966564000},{"_id":"source/articalPic/5.png","hash":"912d8a3f2a603b8cae3053de33b011a5d13e7439","modified":1577967015000},{"_id":"source/articalPic/6.jpg","hash":"51b35b1a6fb51accb3d62790e1b7ec2f5b94f737","modified":1577967144000},{"_id":"source/articalPic/7.jpg","hash":"03ada8d895ed9e215aa1e3c0114fe803d178bd70","modified":1577970100000},{"_id":"source/articalPic/9.jpg","hash":"b6236e5950a7d2c82b994d10a8f3ceef91c7deba","modified":1577970147000},{"_id":"source/articalPic/8.jpg","hash":"a7109921d30af5220daba45085f98f0a5b170770","modified":1577970130000},{"_id":"source/gallery/.DS_Store","hash":"6308cd6a0ac82c7e1585ba59bd3857aec366c881","modified":1578478927000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1577953273000},{"_id":"themes/icarus/languages/en.yml","hash":"66d873bbe04894610c2d28b0d03e10143997b51b","modified":1577953273000},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1577953273000},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1577953273000},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1577953273000},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1577953273000},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1577953273000},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1577953273000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1577953273000},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1577953273000},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1577953273000},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1577953273000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1577953273000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"6ff978a0c4c11e996925e1a912a1d805f4680a6c","modified":1577953273000},{"_id":"themes/icarus/layout/archive.ejs","hash":"2527527eaf3e757ab476325f691d2e2e0ff9c2d5","modified":1577953273000},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1577953273000},{"_id":"themes/icarus/layout/category.ejs","hash":"58aa84f75193b978b2072f29dbb84ed8279574b9","modified":1577953273000},{"_id":"themes/icarus/layout/index.ejs","hash":"8ab440868f721bb7256ab9f2be96996850b0cf44","modified":1577953273000},{"_id":"themes/icarus/layout/layout.ejs","hash":"c9ab786c4c4a95e403fc8ea7e536084f21a9ecc4","modified":1577953273000},{"_id":"themes/icarus/layout/page.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1577953273000},{"_id":"themes/icarus/layout/post.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1577953273000},{"_id":"themes/icarus/layout/tag.ejs","hash":"45eb077f2ac86f5c8090cb1a2361eed56a368e95","modified":1577953273000},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1577953273000},{"_id":"themes/icarus/scripts/index.js","hash":"40839db58041e31eb06d428a91869b0789277e7e","modified":1577953273000},{"_id":"themes/icarus/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1577954364000},{"_id":"source/articalPic/1.jpg","hash":"241fb02ce78ed60f39121fb0deb9c0ae3a3ad6d6","modified":1577961681000},{"_id":"source/articalPic/12.jpg","hash":"b6981fce30ddd7c1cfcd9d5de6428dbdc17bff01","modified":1578481880000},{"_id":"source/articalPic/15.jpg","hash":"46dfaf10772a35a9c45b8dd44924d8e2062c3eb3","modified":1578481886000},{"_id":"source/articalPic/2.jpg","hash":"69603157b8f57a1065d12ec945580926fcd1d6e6","modified":1577961751000},{"_id":"source/articalPic/IMG_2811.jpg","hash":"81a25e27e2feff17ca85a924c362bd46feb651b8","modified":1577970476000},{"_id":"source/gallery/thumbnails/我的2019.jpg","hash":"13821da423feac043267484badfd997d1e7f0599","modified":1577964379000},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1577953273000},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1577953273000},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1577953273000},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1577953273000},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1577953273000},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1577953273000},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1577953273000},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1577953273000},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1577953273000},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1577953273000},{"_id":"themes/icarus/includes/helpers/override.js","hash":"223771860caddffcbce7d84dfb07798f6aa0bdda","modified":1577953273000},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1577953273000},{"_id":"themes/icarus/includes/helpers/site.js","hash":"2f55818448fe83c73418dcf9751745c7918c10e3","modified":1577953273000},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1577953273000},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"ab08051f785eab2a0685aa537270d2988bc13639","modified":1577953273000},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1577953273000},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1577953273000},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1577953273000},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1577953273000},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1577953273000},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1577953273000},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1577953273000},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"ed1b818b929d71930608291514a72ef5a639efee","modified":1577953273000},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1577953273000},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1577953273000},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1577953273000},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1577953273000},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1577953273000},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1577953273000},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"c5cedfe1074c0566baf8aca248f0392a501d9a74","modified":1577953273000},{"_id":"themes/icarus/includes/utils/lru.js","hash":"35c0ede3553549758ff5e4ded2bc650778793377","modified":1577953273000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"73038ac4fdfdfa71d92edaa98cc194b3446586a3","modified":1577953273000},{"_id":"themes/icarus/layout/comment/changyan.locals.js","hash":"49bce2ee742c7224bda97092d6e0a1a09184ef34","modified":1577953273000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"7a8c656c8651d48e21ed24c469ea75898b2b12df","modified":1577953273000},{"_id":"themes/icarus/layout/comment/disqus.locals.js","hash":"a8d2cecaa82ec9e2e2e61cb73417d63d115335d6","modified":1577953273000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"1c3751f36f737527e352c65bb1ca7172ff792979","modified":1577953273000},{"_id":"themes/icarus/layout/comment/facebook.locals.js","hash":"77e3ef1d933660d980b26d15968aa1a5c8a93a56","modified":1577953273000},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"eb1314badf793924b5786e92f8b3ebb0f21f3b58","modified":1577953273000},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"d5e1a396e23df4e75e139d12846290bdb08ba01e","modified":1577953273000},{"_id":"themes/icarus/layout/comment/gitment.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1577953273000},{"_id":"themes/icarus/layout/comment/gitalk.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1577953273000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1577953273000},{"_id":"themes/icarus/layout/comment/isso.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1577953273000},{"_id":"themes/icarus/layout/comment/livere.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"31471cd05018583249b4c09a78cf1d02e7987244","modified":1577953273000},{"_id":"themes/icarus/layout/comment/valine.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"d2362964b2d9427067e1d7dfe100220b380b2f70","modified":1577953273000},{"_id":"themes/icarus/layout/common/article.locals.js","hash":"1f108fa96e61a681d7b1ee390b4f0ff60d042720","modified":1577953273000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"f1c2685d4583cb25920c59c54025f8e96afb12f6","modified":1577955970000},{"_id":"themes/icarus/layout/common/footer.locals.js","hash":"504ed92dc76723f19777463d690acfbe1d89e2ba","modified":1577953273000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"0998072c9ece90e26339f2503633c4ca08da62e9","modified":1577953273000},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"0fe0c940fcb112828d465830713a0cdd42864951","modified":1577953273000},{"_id":"themes/icarus/layout/common/navbar.locals.js","hash":"7e523ba80667038f2e58cf4f9cb073e9afbc70e6","modified":1577953273000},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1577953273000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"99da87756d2bd234b058e90d2c6dabc1bc10f20e","modified":1577953273000},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"02ffa7531d14b88e76bff5ff6d2b4482e7c5bbfd","modified":1577953273000},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1577953273000},{"_id":"themes/icarus/layout/donate/alipay.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"fc19da9674649c035d133535078ff7e37d0f54c1","modified":1577953273000},{"_id":"themes/icarus/layout/donate/patreon.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"dbb90fa9214d659ea6bbd5a92ea00888adf3761e","modified":1577953273000},{"_id":"themes/icarus/layout/donate/paypal.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1577953273000},{"_id":"themes/icarus/layout/donate/wechat.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"c17ea2cfe5cb239342166e2ba72cbfc663c8160f","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/animejs.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"5936b5fd2f2444605a21c6c422623f07f02d5c9a","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/back-to-top.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"7dbbea5722277e00a624c1796ec83d5f9c12d059","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"4285b0ae608c7c54e4ecbebb6d22d4cd1be28f70","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/busuanzi.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"7d19b7a5713d08a614578f079f1327a651c472ae","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/gallery.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"13b298b0026bfc7bcb6a47b6c795fe15cc4584fc","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/google-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"6df0d8f77ed39e4d32c78177844115e31bf3a776","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/hotjar.locals.js","hash":"9258fc2af057d2545a43fae54790743b63450378","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"dddb6f37487286fe2080118bcbb4a8d82dc84d5e","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/mathjax.locals.js","hash":"7faa26fa6da6a93dc3f7fdcf5a784d1f8825b031","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"1437d1ac085a8110e61317254f6c0a034121bc39","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/outdated-browser.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"34423f74787cc9d67b2598dd69b07c84d5bf2280","modified":1577953273000},{"_id":"themes/icarus/layout/plugin/progressbar.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1577953273000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1577953273000},{"_id":"themes/icarus/layout/search/baidu.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1577953273000},{"_id":"themes/icarus/layout/search/google-cse.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1577953273000},{"_id":"themes/icarus/layout/search/insight.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1577953273000},{"_id":"themes/icarus/layout/share/addthis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1577953273000},{"_id":"themes/icarus/layout/share/addtoany.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1577953273000},{"_id":"themes/icarus/layout/share/bdshare.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1577953273000},{"_id":"themes/icarus/layout/share/sharejs.locals.js","hash":"11976fd4cfed1044be29b476b34c33175c9b4308","modified":1577953273000},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1577953273000},{"_id":"themes/icarus/layout/share/sharethis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1577953273000},{"_id":"themes/icarus/layout/widget/archive.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"17e58e537645c4434a1140377ae3e7f43cca4927","modified":1577953273000},{"_id":"themes/icarus/layout/widget/category.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"bb6510193632413e83227bdffad7c3b37629dcde","modified":1577953273000},{"_id":"themes/icarus/layout/widget/links.locals.js","hash":"872cf1a18e152361f5739c6d5fecc0bf46d59513","modified":1577953273000},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"b5dfd0db3851bf046f28431c9f2adcecc1e7b1df","modified":1577953273000},{"_id":"themes/icarus/layout/widget/profile.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1577953273000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"14a2f4587831e017b93818c06dbe18a7e8a27c1e","modified":1577953273000},{"_id":"themes/icarus/layout/widget/recent_posts.locals.js","hash":"5065aca74ec2c98ec88994636fee8408f769c5f2","modified":1577953273000},{"_id":"themes/icarus/layout/widget/subscribe_email.ejs","hash":"391622e9c1d17bf79180faa617ed8c1ee1871a87","modified":1577953273000},{"_id":"themes/icarus/layout/widget/subscribe_email.locals.js","hash":"aae87fbdb7a1245a0fc0637225a935fc39836916","modified":1577953273000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"e41aff420cc4ea1c454de49bd8af0e7a93f3db3f","modified":1577953273000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"26fa17afaf0cb345a213816c44c39575a66759ba","modified":1577953273000},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"e800b4b38eab716882389a09527e9f59a189dea6","modified":1577953273000},{"_id":"themes/icarus/layout/widget/tagcloud.locals.js","hash":"093f59d2f43e7ffa47bee79da15f98705300dfba","modified":1577953273000},{"_id":"themes/icarus/layout/widget/toc.locals.js","hash":"e730a7fff2717f17741540e5ed77b89e289fdeab","modified":1577953273000},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1577953273000},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1577953273000},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1577953273000},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1577953273000},{"_id":"themes/icarus/source/css/style.styl","hash":"78fd2c55dc8a6b7197cabeb54ff503d081beee98","modified":1577953273000},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1577953273000},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1577953273000},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1577953273000},{"_id":"themes/icarus/source/images/melon.jpg","hash":"3f67709df561d7f25e8f230e0dd6f0f6b1e0ea8a","modified":1577964385000},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1577953273000},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1577953273000},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1577953273000},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1577953273000},{"_id":"themes/icarus/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1577953273000},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1577953273000},{"_id":"themes/icarus/source/js/main.js","hash":"9d58a64d1168ef3ab7f498f2e8b4f53fb23db462","modified":1577953273000},{"_id":"themes/icarus/source/images/Alipay.jpeg","hash":"d73cf717ddb378da2c0cf9bc022d8da22a84c5c7","modified":1577963498000},{"_id":"themes/icarus/source/images/favicon1.jpg","hash":"9c62b0711e0ad880034da298dfc07d183d245835","modified":1577964572000},{"_id":"source/articalPic/13.jpg","hash":"c6ee458a8b39d26c0b890d5d8561a97bce40e5fd","modified":1578481875000},{"_id":"source/articalPic/14.jpg","hash":"0b82f15317bf02c4a847c8fe31f048938151b909","modified":1578481882000},{"_id":"source/articalPic/3.jpg","hash":"898494ceccce65d25c0cead34c3e09446de212d5","modified":1577961736000},{"_id":"source/gallery/thumbnails/反射之基础使用.jpg","hash":"7b480a18e13d25d3b0f9d5329abe4a45d5a467a9","modified":1564739275000},{"_id":"themes/icarus/source/images/WechatPay.jpeg","hash":"b7cc617a833ef2d25125c66e458d8c9aa2bac17a","modified":1577963498000},{"_id":"source/gallery/thumbnails/计算机网络之基础知识.jpg","hash":"4a2a06386d2cc7a07ce981303c9b81efde008e24","modified":1564739240000},{"_id":"source/gallery/thumbnails/spring事务.jpg","hash":"05e47fe272db88b7ba4509dc8cb3b469fd401b93","modified":1562861553000},{"_id":"themes/icarus/source/images/favicon.jpg","hash":"05e47fe272db88b7ba4509dc8cb3b469fd401b93","modified":1562861553000},{"_id":"source/gallery/thumbnails/线程之synchronized详解.jpg","hash":"a2c437877c17981357d851262c868a5a3029d972","modified":1564739243000},{"_id":"source/articalPic/16.jpeg","hash":"1b770e607d1c19118f382a6a8f599db3aad1d1a5","modified":1578481902000},{"_id":"source/gallery/thumbnails/java面试题目(持续更新).jpeg","hash":"2fe9f06fa42db6a0223925d2e3194a1e3e438ec7","modified":1564739269000},{"_id":"source/gallery/thumbnails/redis之锁相关知识.png","hash":"c8b6071d3630e66cf5f7ea4b4f3218f624489c44","modified":1564738974000},{"_id":"public/content.json","hash":"440a22b530a923bbb09fe71cbe5464da722ef08c","modified":1578571451978},{"_id":"public/2020/01/08/我的2019/index.html","hash":"d6cf7e5b7b051fb8d83fbf9cd04969f953ac898c","modified":1578571451978},{"_id":"public/2020/01/02/redis/index.html","hash":"151e014a8e554ffa5ddd3a6375a1d9c53e88b515","modified":1578571451978},{"_id":"public/2020/01/02/spring事务/index.html","hash":"566afd8a854cfff34445cacb390e2367dcdac945","modified":1578571451978},{"_id":"public/2020/01/02/线程/index.html","hash":"409a676527ee1841af426179fedd0b1c9af32b12","modified":1578571451978},{"_id":"public/about/index.html","hash":"2dc8c37d8154ebc2f83cbf53ffa3c40dc7dcd6e2","modified":1578571451978},{"_id":"public/2020/01/02/反射/index.html","hash":"ef696506fd12545c04ee2650eb21032ba783f71d","modified":1578571451978},{"_id":"public/2020/01/02/面试/index.html","hash":"daf7375e925d5dab1b717ce8b331e085874cfb85","modified":1578571451978},{"_id":"public/2020/01/02/计算机网络/index.html","hash":"9b644003731bdf05d888fbfb685c84d45164570c","modified":1578571451978},{"_id":"public/archives/index.html","hash":"a35ec1c772e8b72846665ffcdd7485bd30187dec","modified":1578571451978},{"_id":"public/archives/2020/01/index.html","hash":"248ccedc023b5f3be9551e403e9d22d8abe933e3","modified":1578571451978},{"_id":"public/index.html","hash":"cc091b25cce2fe8593c100bf488c85c506544fe7","modified":1578571451978},{"_id":"public/categories/笔记/index.html","hash":"d80da3daf32162a357afb5c2144061383b7dff40","modified":1578571451978},{"_id":"public/categories/面试/index.html","hash":"2f0aae62211d5e00e0a5267491d51727a5224f3f","modified":1578571451978},{"_id":"public/tags/redis/index.html","hash":"900d7fda64b6aa675efdc339d70a9f02651c7426","modified":1578571451978},{"_id":"public/tags/java/index.html","hash":"bc8b045dcd618fbf3164950d83414e097a20bd7f","modified":1578571451978},{"_id":"public/tags/总结/index.html","hash":"d1b48f2981b82fb6825703c6d7d49d3e344f9b0c","modified":1578571451978},{"_id":"public/tags/计算机网络/index.html","hash":"7967302e3261191db0a61cc3234cef33507ca265","modified":1578571451978},{"_id":"public/categories/index.html","hash":"f3fd3468690268d7baa05882c2b9c5440210de2c","modified":1578571451978},{"_id":"public/categories/生活记录/index.html","hash":"b8414db88fb6f7731937953420e89f051fd1dc24","modified":1578571451978},{"_id":"public/tags/index.html","hash":"a04fd3ea99475b25285700ee4f950e5b2a06a1b9","modified":1578571451978},{"_id":"public/tags/spring/index.html","hash":"5a906be41ac1ae839aa37e3e21f20df6c6320d3c","modified":1578571451978},{"_id":"public/archives/2020/index.html","hash":"4780e021afc57e53cd332a4f9279bee0caf22d42","modified":1578571451978},{"_id":"public/articalPic/10.jpg","hash":"951ccde88a1a35566d022d5c9a59142a2e9d9e78","modified":1578571451978},{"_id":"public/articalPic/18.jpg","hash":"205c6aa6ba6d4295ee4514b56cc43fa7dfd08ea9","modified":1578571451978},{"_id":"public/articalPic/4.jpg","hash":"e8176c6580139eb473c99d567eae1ad83110f079","modified":1578571451978},{"_id":"public/articalPic/19.png","hash":"8115b059fa7a75907459e995b0ac086676274e6e","modified":1578571451978},{"_id":"public/articalPic/5.png","hash":"912d8a3f2a603b8cae3053de33b011a5d13e7439","modified":1578571451978},{"_id":"public/articalPic/6.jpg","hash":"51b35b1a6fb51accb3d62790e1b7ec2f5b94f737","modified":1578571451978},{"_id":"public/articalPic/7.jpg","hash":"03ada8d895ed9e215aa1e3c0114fe803d178bd70","modified":1578571451978},{"_id":"public/articalPic/9.jpg","hash":"b6236e5950a7d2c82b994d10a8f3ceef91c7deba","modified":1578571451978},{"_id":"public/articalPic/8.jpg","hash":"a7109921d30af5220daba45085f98f0a5b170770","modified":1578571451978},{"_id":"public/gallery/thumbnails/我的2019.jpg","hash":"13821da423feac043267484badfd997d1e7f0599","modified":1578571451978},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1578571451978},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1578571451978},{"_id":"public/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1578571451978},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1578571451978},{"_id":"public/images/melon.jpg","hash":"3f67709df561d7f25e8f230e0dd6f0f6b1e0ea8a","modified":1578571451978},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1578571451978},{"_id":"public/articalPic/11.jpg","hash":"a3f91be49c06d9e43f0692c5798b3c49589ae6d6","modified":1578571451978},{"_id":"public/articalPic/12.jpg","hash":"b6981fce30ddd7c1cfcd9d5de6428dbdc17bff01","modified":1578571451978},{"_id":"public/articalPic/15.jpg","hash":"46dfaf10772a35a9c45b8dd44924d8e2062c3eb3","modified":1578571451978},{"_id":"public/articalPic/2.jpg","hash":"69603157b8f57a1065d12ec945580926fcd1d6e6","modified":1578571451978},{"_id":"public/articalPic/IMG_2811.jpg","hash":"81a25e27e2feff17ca85a924c362bd46feb651b8","modified":1578571451978},{"_id":"public/images/favicon1.jpg","hash":"9c62b0711e0ad880034da298dfc07d183d245835","modified":1578571451978},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1578571451978},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1578571451978},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1578571451978},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1578571451978},{"_id":"public/css/style.css","hash":"02934ca4cc3537b1fd5e6a08566ce25eca7dd44f","modified":1578571451978},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1578571451978},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1578571451978},{"_id":"public/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1578571451978},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1578571451978},{"_id":"public/js/main.js","hash":"9d58a64d1168ef3ab7f498f2e8b4f53fb23db462","modified":1578571451978},{"_id":"public/articalPic/1.jpg","hash":"241fb02ce78ed60f39121fb0deb9c0ae3a3ad6d6","modified":1578571451978},{"_id":"public/images/Alipay.jpeg","hash":"d73cf717ddb378da2c0cf9bc022d8da22a84c5c7","modified":1578571451978},{"_id":"public/articalPic/13.jpg","hash":"c6ee458a8b39d26c0b890d5d8561a97bce40e5fd","modified":1578571451978},{"_id":"public/articalPic/14.jpg","hash":"0b82f15317bf02c4a847c8fe31f048938151b909","modified":1578571451978},{"_id":"public/gallery/thumbnails/反射之基础使用.jpg","hash":"7b480a18e13d25d3b0f9d5329abe4a45d5a467a9","modified":1578571451978},{"_id":"public/articalPic/3.jpg","hash":"898494ceccce65d25c0cead34c3e09446de212d5","modified":1578571451978},{"_id":"public/images/WechatPay.jpeg","hash":"b7cc617a833ef2d25125c66e458d8c9aa2bac17a","modified":1578571451978},{"_id":"public/gallery/thumbnails/线程之synchronized详解.jpg","hash":"a2c437877c17981357d851262c868a5a3029d972","modified":1578571451978},{"_id":"public/gallery/thumbnails/spring事务.jpg","hash":"05e47fe272db88b7ba4509dc8cb3b469fd401b93","modified":1578571451978},{"_id":"public/images/favicon.jpg","hash":"05e47fe272db88b7ba4509dc8cb3b469fd401b93","modified":1578571451978},{"_id":"public/gallery/thumbnails/计算机网络之基础知识.jpg","hash":"4a2a06386d2cc7a07ce981303c9b81efde008e24","modified":1578571451978},{"_id":"public/articalPic/16.jpeg","hash":"1b770e607d1c19118f382a6a8f599db3aad1d1a5","modified":1578571451978},{"_id":"public/gallery/thumbnails/java面试题目(持续更新).jpeg","hash":"2fe9f06fa42db6a0223925d2e3194a1e3e438ec7","modified":1578571451978},{"_id":"public/gallery/thumbnails/redis之锁相关知识.png","hash":"c8b6071d3630e66cf5f7ea4b4f3218f624489c44","modified":1578571451978},{"_id":"themes/hexo-theme-icarus-master/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/_config.yml","hash":"e2bc8ea31a51479b9cd8809175e56f8fc72e796c","modified":1577965923000},{"_id":"themes/hexo-theme-icarus-master/package.json","hash":"4f362aa241ad5d5d9422cc8f1e825edfcd8cbb1a","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/en.yml","hash":"66d873bbe04894610c2d28b0d03e10143997b51b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/de.yml","hash":"79d769768780b9a72eb256ab61f217b8bdebf85b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/archive.ejs","hash":"2527527eaf3e757ab476325f691d2e2e0ff9c2d5","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/zh-TW.yml","hash":"6ff978a0c4c11e996925e1a912a1d805f4680a6c","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/category.ejs","hash":"58aa84f75193b978b2072f29dbb84ed8279574b9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/index.ejs","hash":"8ab440868f721bb7256ab9f2be96996850b0cf44","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/layout.ejs","hash":"c9ab786c4c4a95e403fc8ea7e536084f21a9ecc4","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/page.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/post.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/tag.ejs","hash":"45eb077f2ac86f5c8090cb1a2361eed56a368e95","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/scripts/index.js","hash":"40839db58041e31eb06d428a91869b0789277e7e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/helpers/override.js","hash":"223771860caddffcbce7d84dfb07798f6aa0bdda","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/helpers/site.js","hash":"2f55818448fe83c73418dcf9751745c7918c10e3","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/comment.spec.js","hash":"e4735686bbf24ac89a4a9b578498ef3e5f5edbea","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/meta.spec.js","hash":"ed1b818b929d71930608291514a72ef5a639efee","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/specs/widgets.spec.js","hash":"c5cedfe1074c0566baf8aca248f0392a501d9a74","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/tasks/check_deps.js","hash":"ab08051f785eab2a0685aa537270d2988bc13639","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/includes/utils/lru.js","hash":"35c0ede3553549758ff5e4ded2bc650778793377","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/changyan.ejs","hash":"73038ac4fdfdfa71d92edaa98cc194b3446586a3","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/changyan.locals.js","hash":"49bce2ee742c7224bda97092d6e0a1a09184ef34","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/disqus.locals.js","hash":"a8d2cecaa82ec9e2e2e61cb73417d63d115335d6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/disqus.ejs","hash":"7a8c656c8651d48e21ed24c469ea75898b2b12df","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/facebook.ejs","hash":"1c3751f36f737527e352c65bb1ca7172ff792979","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/facebook.locals.js","hash":"77e3ef1d933660d980b26d15968aa1a5c8a93a56","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/gitalk.ejs","hash":"eb1314badf793924b5786e92f8b3ebb0f21f3b58","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/gitalk.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/gitment.ejs","hash":"d5e1a396e23df4e75e139d12846290bdb08ba01e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/gitment.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/isso.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/utterances.ejs","hash":"bf04ba1129aa75030397074d1470103ac7604784","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/livere.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/utterances.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/valine.ejs","hash":"31471cd05018583249b4c09a78cf1d02e7987244","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/comment/valine.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/article.ejs","hash":"d2362964b2d9427067e1d7dfe100220b380b2f70","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/article.locals.js","hash":"1f108fa96e61a681d7b1ee390b4f0ff60d042720","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/footer.ejs","hash":"d70962fd1c8123c5314d73cf0aec08ffb96aeca5","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/footer.locals.js","hash":"504ed92dc76723f19777463d690acfbe1d89e2ba","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/head.ejs","hash":"0998072c9ece90e26339f2503633c4ca08da62e9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/navbar.ejs","hash":"0fe0c940fcb112828d465830713a0cdd42864951","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/navbar.locals.js","hash":"7e523ba80667038f2e58cf4f9cb073e9afbc70e6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/scripts.ejs","hash":"99da87756d2bd234b058e90d2c6dabc1bc10f20e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/common/widget.ejs","hash":"02ffa7531d14b88e76bff5ff6d2b4482e7c5bbfd","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/alipay.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/patreon.ejs","hash":"fc19da9674649c035d133535078ff7e37d0f54c1","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/patreon.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/paypal.ejs","hash":"dbb90fa9214d659ea6bbd5a92ea00888adf3761e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/paypal.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/donate/wechat.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/animejs.ejs","hash":"c17ea2cfe5cb239342166e2ba72cbfc663c8160f","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/animejs.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/back-to-top.ejs","hash":"5936b5fd2f2444605a21c6c422623f07f02d5c9a","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/back-to-top.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/baidu-analytics.ejs","hash":"7dbbea5722277e00a624c1796ec83d5f9c12d059","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/baidu-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/busuanzi.ejs","hash":"4285b0ae608c7c54e4ecbebb6d22d4cd1be28f70","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/busuanzi.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/gallery.ejs","hash":"7d19b7a5713d08a614578f079f1327a651c472ae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/gallery.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/google-analytics.ejs","hash":"13b298b0026bfc7bcb6a47b6c795fe15cc4584fc","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/google-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/hotjar.ejs","hash":"6df0d8f77ed39e4d32c78177844115e31bf3a776","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/hotjar.locals.js","hash":"9258fc2af057d2545a43fae54790743b63450378","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/mathjax.ejs","hash":"dddb6f37487286fe2080118bcbb4a8d82dc84d5e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/mathjax.locals.js","hash":"7faa26fa6da6a93dc3f7fdcf5a784d1f8825b031","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/outdated-browser.ejs","hash":"1437d1ac085a8110e61317254f6c0a034121bc39","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/outdated-browser.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/progressbar.ejs","hash":"34423f74787cc9d67b2598dd69b07c84d5bf2280","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/plugin/progressbar.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/search/baidu.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/search/google-cse.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/search/insight.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/addthis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/addtoany.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/bdshare.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/sharejs.locals.js","hash":"11976fd4cfed1044be29b476b34c33175c9b4308","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/share/sharethis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/archive.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/category.ejs","hash":"17e58e537645c4434a1140377ae3e7f43cca4927","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/category.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/links.ejs","hash":"bb6510193632413e83227bdffad7c3b37629dcde","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/links.locals.js","hash":"872cf1a18e152361f5739c6d5fecc0bf46d59513","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/profile.ejs","hash":"b5dfd0db3851bf046f28431c9f2adcecc1e7b1df","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/profile.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/recent_posts.ejs","hash":"14a2f4587831e017b93818c06dbe18a7e8a27c1e","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/recent_posts.locals.js","hash":"5065aca74ec2c98ec88994636fee8408f769c5f2","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/subscribe_email.ejs","hash":"391622e9c1d17bf79180faa617ed8c1ee1871a87","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/subscribe_email.locals.js","hash":"aae87fbdb7a1245a0fc0637225a935fc39836916","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/tag.ejs","hash":"e41aff420cc4ea1c454de49bd8af0e7a93f3db3f","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/tagcloud.ejs","hash":"26fa17afaf0cb345a213816c44c39575a66759ba","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/tagcloud.locals.js","hash":"093f59d2f43e7ffa47bee79da15f98705300dfba","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/toc.ejs","hash":"e800b4b38eab716882389a09527e9f59a189dea6","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/layout/widget/toc.locals.js","hash":"e730a7fff2717f17741540e5ed77b89e289fdeab","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/css/style.styl","hash":"53f6cfda231912ba195f493fbfbc201b71a69a25","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/js/main.js","hash":"9b7063b2faf8cc43e8539d777285e20574011769","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1581951736000},{"_id":"themes/hexo-theme-icarus-master/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1581951736000}],"Category":[{"name":"笔记","_id":"ck56oooai0003ejupf5d1cks2"},{"name":"生活记录","_id":"ck56ooob2000iejuphy3p8m7o"},{"name":"面试","_id":"ck56ooob3000oejup6u7524yh"}],"Data":[],"Page":[{"title":"about","date":"2020-01-02T11:34:05.000Z","_content":"\n## 关于小瓜仔\n#### 从始至终,重新出发\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-01-02 19:34:05\n---\n\n## 关于小瓜仔\n#### 从始至终,重新出发\n","updated":"2020-01-02T11:36:00.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck56oooaa0001ejupe2jn4gcm","content":"<h2 id=\"关于小瓜仔\"><a href=\"#关于小瓜仔\" class=\"headerlink\" title=\"关于小瓜仔\"></a>关于小瓜仔</h2><h4 id=\"从始至终-重新出发\"><a href=\"#从始至终-重新出发\" class=\"headerlink\" title=\"从始至终,重新出发\"></a>从始至终,重新出发</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于小瓜仔\"><a href=\"#关于小瓜仔\" class=\"headerlink\" title=\"关于小瓜仔\"></a>关于小瓜仔</h2><h4 id=\"从始至终-重新出发\"><a href=\"#从始至终-重新出发\" class=\"headerlink\" title=\"从始至终,重新出发\"></a>从始至终,重新出发</h4>"}],"Post":[{"title":"spring事务基础认识和配置讲解","toc":true,"date":"2020-01-02T09:41:02.000Z","thumbnail":"/gallery/thumbnails/spring事务.jpg","_content":"#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n\n* 事务的特性：原子性、隔离性、持久性、一致性\n***\n* Spring为不同的框架提供了不同PlatformTransactionManager接口（事务管理器）的实现类\n***\n* TransactionDefinitions定义事务隔离级别（隔离级别为了解决脏读、幻读、不可重复读这几类问题），spring默认提供隔离级别为default，即后端系统使用的数据库默认的隔离级别\n***\n* 事务的传播行为：为了解决业务层方法（都有事务）之间相互调用的问题\n\n重点可看1、4、7行为类型，各属三大类：\n以下为图中的讲解：\n![avatar](/articalPic/1.jpg)\n1、第一类（在同一个事务内）：\n    第一种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务，b存在事务就使用b事务\n    第二种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务b就不使用事务\n    第三种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务就抛出异常\n2、第二类（不在同一个事务内）：\n    第四种：如果a事务存在，就挂起当前事务，创建一个新的事务，此时a和b不在一个事务内\n3、第三类（事务a后再事务b）：\n    第七种：如果当前a事务存在，就使用嵌套事务\n***\n* TransactionStatus接口（事务状态）：获得或者判断事务的状态方法\n\n***\n* 编程式事务管理：通过配置transactionTemplate然后在业务层引入该bean去实现每个业务方法的回滚；\n* 声明式事务有三种方式：\n    * 1、基于AOP面向切面：通过配置代理类扩充业务类来实现动态代理，第二种与第一种的区别是第一种需要在业务层的方法内去手动变成，而第二种是在业务类引入业务类的代理类来统一业务的方法回滚（不常用，因为实际开发中对代理类的配置会很多）\n    ![avatar](/articalPic/3.jpg)\n    \n    * 2、基于AspectJ的xml的配置：无须再业务类内引入代理类，自动生成（常用）\n        * 1）配置事务增强\n        * 2）配置切面\n    ![avatar](/articalPic/2.jpg)\n\n    * 3、基于注解方式的配置：（常用，最简单使用）\n    ![avatar](/articalPic/4.jpg)\n    ![avatar](/articalPic/5.png)\n\n\n第二种配置后不用再业务层上增加代码，而第三种需要增加注解，看业务场景都可以使用\n***\n\n​    ","source":"_posts/spring事务.md","raw":"---\ntitle: spring事务基础认识和配置讲解\ntoc: true\ndate: 2020-01-02 17:41:02\ntags: spring\ncategories: 笔记\nthumbnail: /gallery/thumbnails/spring事务.jpg\n---\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n\n* 事务的特性：原子性、隔离性、持久性、一致性\n***\n* Spring为不同的框架提供了不同PlatformTransactionManager接口（事务管理器）的实现类\n***\n* TransactionDefinitions定义事务隔离级别（隔离级别为了解决脏读、幻读、不可重复读这几类问题），spring默认提供隔离级别为default，即后端系统使用的数据库默认的隔离级别\n***\n* 事务的传播行为：为了解决业务层方法（都有事务）之间相互调用的问题\n\n重点可看1、4、7行为类型，各属三大类：\n以下为图中的讲解：\n![avatar](/articalPic/1.jpg)\n1、第一类（在同一个事务内）：\n    第一种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务，b存在事务就使用b事务\n    第二种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务b就不使用事务\n    第三种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务就抛出异常\n2、第二类（不在同一个事务内）：\n    第四种：如果a事务存在，就挂起当前事务，创建一个新的事务，此时a和b不在一个事务内\n3、第三类（事务a后再事务b）：\n    第七种：如果当前a事务存在，就使用嵌套事务\n***\n* TransactionStatus接口（事务状态）：获得或者判断事务的状态方法\n\n***\n* 编程式事务管理：通过配置transactionTemplate然后在业务层引入该bean去实现每个业务方法的回滚；\n* 声明式事务有三种方式：\n    * 1、基于AOP面向切面：通过配置代理类扩充业务类来实现动态代理，第二种与第一种的区别是第一种需要在业务层的方法内去手动变成，而第二种是在业务类引入业务类的代理类来统一业务的方法回滚（不常用，因为实际开发中对代理类的配置会很多）\n    ![avatar](/articalPic/3.jpg)\n    \n    * 2、基于AspectJ的xml的配置：无须再业务类内引入代理类，自动生成（常用）\n        * 1）配置事务增强\n        * 2）配置切面\n    ![avatar](/articalPic/2.jpg)\n\n    * 3、基于注解方式的配置：（常用，最简单使用）\n    ![avatar](/articalPic/4.jpg)\n    ![avatar](/articalPic/5.png)\n\n\n第二种配置后不用再业务层上增加代码，而第三种需要增加注解，看业务场景都可以使用\n***\n\n​    ","slug":"spring事务","published":1,"updated":"2020-03-08T18:06:45.514Z","_id":"ck56ooo9w0000ejupesr71wmp","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4><a id=\"more\"></a>\n\n<ul>\n<li>事务的特性：原子性、隔离性、持久性、一致性</li>\n</ul>\n<hr>\n<ul>\n<li>Spring为不同的框架提供了不同PlatformTransactionManager接口（事务管理器）的实现类</li>\n</ul>\n<hr>\n<ul>\n<li>TransactionDefinitions定义事务隔离级别（隔离级别为了解决脏读、幻读、不可重复读这几类问题），spring默认提供隔离级别为default，即后端系统使用的数据库默认的隔离级别</li>\n</ul>\n<hr>\n<ul>\n<li>事务的传播行为：为了解决业务层方法（都有事务）之间相互调用的问题</li>\n</ul>\n<p>重点可看1、4、7行为类型，各属三大类：<br>以下为图中的讲解：<br><img src=\"/articalPic/1.jpg\" alt=\"avatar\"><br>1、第一类（在同一个事务内）：<br>    第一种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务，b存在事务就使用b事务<br>    第二种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务b就不使用事务<br>    第三种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务就抛出异常<br>2、第二类（不在同一个事务内）：<br>    第四种：如果a事务存在，就挂起当前事务，创建一个新的事务，此时a和b不在一个事务内<br>3、第三类（事务a后再事务b）：<br>    第七种：如果当前a事务存在，就使用嵌套事务</p>\n<hr>\n<ul>\n<li>TransactionStatus接口（事务状态）：获得或者判断事务的状态方法</li>\n</ul>\n<hr>\n<ul>\n<li><p>编程式事务管理：通过配置transactionTemplate然后在业务层引入该bean去实现每个业务方法的回滚；</p>\n</li>\n<li><p>声明式事务有三种方式：</p>\n<ul>\n<li><p>1、基于AOP面向切面：通过配置代理类扩充业务类来实现动态代理，第二种与第一种的区别是第一种需要在业务层的方法内去手动变成，而第二种是在业务类引入业务类的代理类来统一业务的方法回滚（不常用，因为实际开发中对代理类的配置会很多）<br><img src=\"/articalPic/3.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>2、基于AspectJ的xml的配置：无须再业务类内引入代理类，自动生成（常用）</p>\n<ul>\n<li>1）配置事务增强</li>\n<li>2）配置切面<br><img src=\"/articalPic/2.jpg\" alt=\"avatar\"></li>\n</ul>\n</li>\n<li><p>3、基于注解方式的配置：（常用，最简单使用）<br><img src=\"/articalPic/4.jpg\" alt=\"avatar\"><br><img src=\"/articalPic/5.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>第二种配置后不用再业务层上增加代码，而第三种需要增加注解，看业务场景都可以使用</p>\n<hr>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4>","more":"<ul>\n<li>事务的特性：原子性、隔离性、持久性、一致性</li>\n</ul>\n<hr>\n<ul>\n<li>Spring为不同的框架提供了不同PlatformTransactionManager接口（事务管理器）的实现类</li>\n</ul>\n<hr>\n<ul>\n<li>TransactionDefinitions定义事务隔离级别（隔离级别为了解决脏读、幻读、不可重复读这几类问题），spring默认提供隔离级别为default，即后端系统使用的数据库默认的隔离级别</li>\n</ul>\n<hr>\n<ul>\n<li>事务的传播行为：为了解决业务层方法（都有事务）之间相互调用的问题</li>\n</ul>\n<p>重点可看1、4、7行为类型，各属三大类：<br>以下为图中的讲解：<br><img src=\"/articalPic/1.jpg\" alt=\"avatar\"><br>1、第一类（在同一个事务内）：<br>    第一种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务，b存在事务就使用b事务<br>    第二种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务b就不使用事务<br>    第三种：先到达a事务的方法如果存在就使用a的事务，如果a不存在事务就抛出异常<br>2、第二类（不在同一个事务内）：<br>    第四种：如果a事务存在，就挂起当前事务，创建一个新的事务，此时a和b不在一个事务内<br>3、第三类（事务a后再事务b）：<br>    第七种：如果当前a事务存在，就使用嵌套事务</p>\n<hr>\n<ul>\n<li>TransactionStatus接口（事务状态）：获得或者判断事务的状态方法</li>\n</ul>\n<hr>\n<ul>\n<li><p>编程式事务管理：通过配置transactionTemplate然后在业务层引入该bean去实现每个业务方法的回滚；</p>\n</li>\n<li><p>声明式事务有三种方式：</p>\n<ul>\n<li><p>1、基于AOP面向切面：通过配置代理类扩充业务类来实现动态代理，第二种与第一种的区别是第一种需要在业务层的方法内去手动变成，而第二种是在业务类引入业务类的代理类来统一业务的方法回滚（不常用，因为实际开发中对代理类的配置会很多）<br><img src=\"/articalPic/3.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>2、基于AspectJ的xml的配置：无须再业务类内引入代理类，自动生成（常用）</p>\n<ul>\n<li>1）配置事务增强</li>\n<li>2）配置切面<br><img src=\"/articalPic/2.jpg\" alt=\"avatar\"></li>\n</ul>\n</li>\n<li><p>3、基于注解方式的配置：（常用，最简单使用）<br><img src=\"/articalPic/4.jpg\" alt=\"avatar\"><br><img src=\"/articalPic/5.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>第二种配置后不用再业务层上增加代码，而第三种需要增加注解，看业务场景都可以使用</p>\n<hr>\n<p>​    </p>"},{"title":"redis之锁相关知识和场景","toc":true,"date":"2020-01-02T09:40:56.000Z","thumbnail":"/gallery/thumbnails/redis之锁相关知识.png","_content":"#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n#### 1.加锁方法\n###### 目的：解决死锁问题\n###### 场景：商品秒杀，key为商品id，value为当前时间和超时时间\n###### 内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\n###### 关键点：1.锁只能被单个线程占用；\n###### 2.当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate.opsForValue().getAndSet(key,value)这段代码\n###### 3.getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\n```\n/**\n  * key为商品id,value为当前时间+超时时间\n */\npublic boolean lock(String key, String value) {\n    //如果不存在则可以加锁判断为true返回为true\n    if(redisTemplate.opsForValue().setIfAbsent(key,value)){\n        return true; \n    }\n    //获取上一次占用锁的value值，方便理解这里使用时间\n    String currentValue = redisTemplate.opsForValue().get(key);\n    //如果锁过期了\n    if(!StringUtils.isEmpty(currentValue) &&\n       Long.parseLong(currentValue) < System.currentTimeMillis()) {\n       //获取上一个锁的时间\n       String oldValue = redisTemplate.opsForValue().getAndSet(key,value);\n       if(!StringUtils.isEmpty(oldValue) &&\n         oldValue.equals(currentValue)) {\n            return true;\n         }\n    }\n    return false;\n}\n```\n\n#### 1.释放锁\n###### 目的：释放占用的锁\n###### 场景：释放锁\n###### 内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\n###### 关键点：释放锁\n\n```\n/**\n  * 拿到当前的value值与redis对应key的值作比较，相等则删除，否则抛异常\n */\npublic void unlock(String key,String value) {\n    try{\n        String currentValue = redisTemplate.opsForValue().get(key);\n        if(StringUtils.isEmpty(currentValue) && currentValue.equals(value) {\n            redisTemplate.opsForValue().getOperations().delete(key);\n        }\n    }catch(Exception){\n        log.error(\"[redis分布式锁机制]解锁异常:{}\",e);\n    }\n    \n}\n```","source":"_posts/redis.md","raw":"---\ntitle: redis之锁相关知识和场景\ntoc: true\ndate: 2020-01-02 17:40:56\nthumbnail: /gallery/thumbnails/redis之锁相关知识.png\ntags: redis\ncategories: 笔记\n---\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n#### 1.加锁方法\n###### 目的：解决死锁问题\n###### 场景：商品秒杀，key为商品id，value为当前时间和超时时间\n###### 内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\n###### 关键点：1.锁只能被单个线程占用；\n###### 2.当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate.opsForValue().getAndSet(key,value)这段代码\n###### 3.getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\n```\n/**\n  * key为商品id,value为当前时间+超时时间\n */\npublic boolean lock(String key, String value) {\n    //如果不存在则可以加锁判断为true返回为true\n    if(redisTemplate.opsForValue().setIfAbsent(key,value)){\n        return true; \n    }\n    //获取上一次占用锁的value值，方便理解这里使用时间\n    String currentValue = redisTemplate.opsForValue().get(key);\n    //如果锁过期了\n    if(!StringUtils.isEmpty(currentValue) &&\n       Long.parseLong(currentValue) < System.currentTimeMillis()) {\n       //获取上一个锁的时间\n       String oldValue = redisTemplate.opsForValue().getAndSet(key,value);\n       if(!StringUtils.isEmpty(oldValue) &&\n         oldValue.equals(currentValue)) {\n            return true;\n         }\n    }\n    return false;\n}\n```\n\n#### 1.释放锁\n###### 目的：释放占用的锁\n###### 场景：释放锁\n###### 内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\n###### 关键点：释放锁\n\n```\n/**\n  * 拿到当前的value值与redis对应key的值作比较，相等则删除，否则抛异常\n */\npublic void unlock(String key,String value) {\n    try{\n        String currentValue = redisTemplate.opsForValue().get(key);\n        if(StringUtils.isEmpty(currentValue) && currentValue.equals(value) {\n            redisTemplate.opsForValue().getOperations().delete(key);\n        }\n    }catch(Exception){\n        log.error(\"[redis分布式锁机制]解锁异常:{}\",e);\n    }\n    \n}\n```","slug":"redis","published":1,"updated":"2020-01-02T12:14:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck56oooag0002ejupdtme4zgp","content":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4><a id=\"more\"></a>\n<h4 id=\"1-加锁方法\"><a href=\"#1-加锁方法\" class=\"headerlink\" title=\"1.加锁方法\"></a>1.加锁方法</h4><h6 id=\"目的：解决死锁问题\"><a href=\"#目的：解决死锁问题\" class=\"headerlink\" title=\"目的：解决死锁问题\"></a>目的：解决死锁问题</h6><h6 id=\"场景：商品秒杀，key为商品id，value为当前时间和超时时间\"><a href=\"#场景：商品秒杀，key为商品id，value为当前时间和超时时间\" class=\"headerlink\" title=\"场景：商品秒杀，key为商品id，value为当前时间和超时时间\"></a>场景：商品秒杀，key为商品id，value为当前时间和超时时间</h6><h6 id=\"内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\"><a href=\"#内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\" class=\"headerlink\" title=\"内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\"></a>内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。</h6><h6 id=\"关键点：1-锁只能被单个线程占用；\"><a href=\"#关键点：1-锁只能被单个线程占用；\" class=\"headerlink\" title=\"关键点：1.锁只能被单个线程占用；\"></a>关键点：1.锁只能被单个线程占用；</h6><h6 id=\"2-当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate-opsForValue-getAndSet-key-value-这段代码\"><a href=\"#2-当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate-opsForValue-getAndSet-key-value-这段代码\" class=\"headerlink\" title=\"2.当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate.opsForValue().getAndSet(key,value)这段代码\"></a>2.当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate.opsForValue().getAndSet(key,value)这段代码</h6><h6 id=\"3-getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\"><a href=\"#3-getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\" class=\"headerlink\" title=\"3.getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\"></a>3.getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">  * key为商品id,value为当前时间+超时时间</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public boolean lock(String key, String value) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;如果不存在则可以加锁判断为true返回为true</span><br><span class=\"line\">    if(redisTemplate.opsForValue().setIfAbsent(key,value))&#123;</span><br><span class=\"line\">        return true; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;获取上一次占用锁的value值，方便理解这里使用时间</span><br><span class=\"line\">    String currentValue &#x3D; redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#x2F;&#x2F;如果锁过期了</span><br><span class=\"line\">    if(!StringUtils.isEmpty(currentValue) &amp;&amp;</span><br><span class=\"line\">       Long.parseLong(currentValue) &lt; System.currentTimeMillis()) &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;获取上一个锁的时间</span><br><span class=\"line\">       String oldValue &#x3D; redisTemplate.opsForValue().getAndSet(key,value);</span><br><span class=\"line\">       if(!StringUtils.isEmpty(oldValue) &amp;&amp;</span><br><span class=\"line\">         oldValue.equals(currentValue)) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-释放锁\"><a href=\"#1-释放锁\" class=\"headerlink\" title=\"1.释放锁\"></a>1.释放锁</h4><h6 id=\"目的：释放占用的锁\"><a href=\"#目的：释放占用的锁\" class=\"headerlink\" title=\"目的：释放占用的锁\"></a>目的：释放占用的锁</h6><h6 id=\"场景：释放锁\"><a href=\"#场景：释放锁\" class=\"headerlink\" title=\"场景：释放锁\"></a>场景：释放锁</h6><h6 id=\"内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\"><a href=\"#内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\" class=\"headerlink\" title=\"内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\"></a>内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁</h6><h6 id=\"关键点：释放锁\"><a href=\"#关键点：释放锁\" class=\"headerlink\" title=\"关键点：释放锁\"></a>关键点：释放锁</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">  * 拿到当前的value值与redis对应key的值作比较，相等则删除，否则抛异常</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public void unlock(String key,String value) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        String currentValue &#x3D; redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">        if(StringUtils.isEmpty(currentValue) &amp;&amp; currentValue.equals(value) &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().getOperations().delete(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;catch(Exception)&#123;</span><br><span class=\"line\">        log.error(&quot;[redis分布式锁机制]解锁异常:&#123;&#125;&quot;,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4>","more":"<h4 id=\"1-加锁方法\"><a href=\"#1-加锁方法\" class=\"headerlink\" title=\"1.加锁方法\"></a>1.加锁方法</h4><h6 id=\"目的：解决死锁问题\"><a href=\"#目的：解决死锁问题\" class=\"headerlink\" title=\"目的：解决死锁问题\"></a>目的：解决死锁问题</h6><h6 id=\"场景：商品秒杀，key为商品id，value为当前时间和超时时间\"><a href=\"#场景：商品秒杀，key为商品id，value为当前时间和超时时间\" class=\"headerlink\" title=\"场景：商品秒杀，key为商品id，value为当前时间和超时时间\"></a>场景：商品秒杀，key为商品id，value为当前时间和超时时间</h6><h6 id=\"内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\"><a href=\"#内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\" class=\"headerlink\" title=\"内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。\"></a>内容：某一个时间点上，多个用户秒杀某个商品，其中开启了多个线程去处理，可能造成多个线程内有某个线程获取锁后由于其他方面如网络堵塞造成锁无法释放，使得时间超时，这个时候应该解锁，不能造成死锁。</h6><h6 id=\"关键点：1-锁只能被单个线程占用；\"><a href=\"#关键点：1-锁只能被单个线程占用；\" class=\"headerlink\" title=\"关键点：1.锁只能被单个线程占用；\"></a>关键点：1.锁只能被单个线程占用；</h6><h6 id=\"2-当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate-opsForValue-getAndSet-key-value-这段代码\"><a href=\"#2-当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate-opsForValue-getAndSet-key-value-这段代码\" class=\"headerlink\" title=\"2.当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate.opsForValue().getAndSet(key,value)这段代码\"></a>2.当两个线程同时进入加锁方法时且进入到锁过期代码段，则只能有一个线程会去跑redisTemplate.opsForValue().getAndSet(key,value)这段代码</h6><h6 id=\"3-getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\"><a href=\"#3-getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\" class=\"headerlink\" title=\"3.getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。\"></a>3.getAndSet方法获取的是上个占用锁的时间，且将当前进入该代码段的线程的value置位改key新的value值，所以当第二个线程进来时，原先的value已经被修改了，则判断不相等。</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">  * key为商品id,value为当前时间+超时时间</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public boolean lock(String key, String value) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;如果不存在则可以加锁判断为true返回为true</span><br><span class=\"line\">    if(redisTemplate.opsForValue().setIfAbsent(key,value))&#123;</span><br><span class=\"line\">        return true; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;获取上一次占用锁的value值，方便理解这里使用时间</span><br><span class=\"line\">    String currentValue &#x3D; redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#x2F;&#x2F;如果锁过期了</span><br><span class=\"line\">    if(!StringUtils.isEmpty(currentValue) &amp;&amp;</span><br><span class=\"line\">       Long.parseLong(currentValue) &lt; System.currentTimeMillis()) &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;获取上一个锁的时间</span><br><span class=\"line\">       String oldValue &#x3D; redisTemplate.opsForValue().getAndSet(key,value);</span><br><span class=\"line\">       if(!StringUtils.isEmpty(oldValue) &amp;&amp;</span><br><span class=\"line\">         oldValue.equals(currentValue)) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-释放锁\"><a href=\"#1-释放锁\" class=\"headerlink\" title=\"1.释放锁\"></a>1.释放锁</h4><h6 id=\"目的：释放占用的锁\"><a href=\"#目的：释放占用的锁\" class=\"headerlink\" title=\"目的：释放占用的锁\"></a>目的：释放占用的锁</h6><h6 id=\"场景：释放锁\"><a href=\"#场景：释放锁\" class=\"headerlink\" title=\"场景：释放锁\"></a>场景：释放锁</h6><h6 id=\"内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\"><a href=\"#内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\" class=\"headerlink\" title=\"内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁\"></a>内容：拿到当前的时间值与redis的value值对应，相等则删除redis对应key释放锁</h6><h6 id=\"关键点：释放锁\"><a href=\"#关键点：释放锁\" class=\"headerlink\" title=\"关键点：释放锁\"></a>关键点：释放锁</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">  * 拿到当前的value值与redis对应key的值作比较，相等则删除，否则抛异常</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public void unlock(String key,String value) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        String currentValue &#x3D; redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">        if(StringUtils.isEmpty(currentValue) &amp;&amp; currentValue.equals(value) &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().getOperations().delete(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;catch(Exception)&#123;</span><br><span class=\"line\">        log.error(&quot;[redis分布式锁机制]解锁异常:&#123;&#125;&quot;,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"反射之基础使用","toc":true,"date":"2020-01-02T09:40:33.000Z","thumbnail":"/gallery/thumbnails/反射之基础使用.jpg","_content":"#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n* 所有抽象出来的类都是java.lang.Class类中的一个对象（细品），这个对象称为该类的类类型，一个类只有一个Class类的实例对象，即只有一个类类型\n以下为Class的使用：\n```\n        Foo foo1 = new Foo();\n\n        //第一种方式\n        Class c1 = Foo.class;\n\n        //第二种方式\n        Class c2 = foo1.getClass();\n        \n        //第三种方式\n        Class c3 = null;\n        try {\n            c3 = Class.forName(\"refelect.demo.Foo\");\n        }catch (ClassNotFoundException e){\n            e.printStackTrace();\n        }\n        \n        //一个抽象的类只可能是Class类的一个实例对象（细品）\n        System.out.println(c1 == c2); //true\n```\n```\n        //通过类类型来创建类的实例对象\n        try {\n            Foo foo = (Foo) c1.newInstance(); //需要有无参构造方法\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n```\n***\n\n* 动态加载类\n编译时刻是静态加载类（new的时候），把一切可能用到或者用不到的类全部静态加载，而动态加载不一样，是发生在运行时刻的\n假设一个程序有100方法，但是只要有一个类无法静态加载时，整个程序崩溃造成其他99个都无法使用，这显然不符合业务需求，当我们需要用到某个方法时，我们希望，即需即创建和使用，这样更灵活，这就是运行时期动态加载的好处（Class.forName方法代表了动态加载类）\n***\n\n* 基本数据类型\nvoid 关键字 都存在类类型 ---> void.class\nint\\double 都存在类类型 ---> int\\double.class\n注意：double数据类型和Double类的类类型不同\n\n* ArrayList和ArrayList<String>的类类型一样吗\n是一样的\n重点：Java集合中的泛型是为了防止错误输入的，只在编译阶段有效（重点），可以使用返回在运行时期向ArrayList<String>中添加不是String类型的数据，如果添加了非泛型类型的数据就不能使用foreach来遍历，会报错\n综上：反射是绕开编译时期来进行的","source":"_posts/反射.md","raw":"---\ntitle: 反射之基础使用\ntoc: true\ndate: 2020-01-02 17:40:33\nthumbnail: /gallery/thumbnails/反射之基础使用.jpg\ntags: java\ncategories: 笔记\n---\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n* 所有抽象出来的类都是java.lang.Class类中的一个对象（细品），这个对象称为该类的类类型，一个类只有一个Class类的实例对象，即只有一个类类型\n以下为Class的使用：\n```\n        Foo foo1 = new Foo();\n\n        //第一种方式\n        Class c1 = Foo.class;\n\n        //第二种方式\n        Class c2 = foo1.getClass();\n        \n        //第三种方式\n        Class c3 = null;\n        try {\n            c3 = Class.forName(\"refelect.demo.Foo\");\n        }catch (ClassNotFoundException e){\n            e.printStackTrace();\n        }\n        \n        //一个抽象的类只可能是Class类的一个实例对象（细品）\n        System.out.println(c1 == c2); //true\n```\n```\n        //通过类类型来创建类的实例对象\n        try {\n            Foo foo = (Foo) c1.newInstance(); //需要有无参构造方法\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n```\n***\n\n* 动态加载类\n编译时刻是静态加载类（new的时候），把一切可能用到或者用不到的类全部静态加载，而动态加载不一样，是发生在运行时刻的\n假设一个程序有100方法，但是只要有一个类无法静态加载时，整个程序崩溃造成其他99个都无法使用，这显然不符合业务需求，当我们需要用到某个方法时，我们希望，即需即创建和使用，这样更灵活，这就是运行时期动态加载的好处（Class.forName方法代表了动态加载类）\n***\n\n* 基本数据类型\nvoid 关键字 都存在类类型 ---> void.class\nint\\double 都存在类类型 ---> int\\double.class\n注意：double数据类型和Double类的类类型不同\n\n* ArrayList和ArrayList<String>的类类型一样吗\n是一样的\n重点：Java集合中的泛型是为了防止错误输入的，只在编译阶段有效（重点），可以使用返回在运行时期向ArrayList<String>中添加不是String类型的数据，如果添加了非泛型类型的数据就不能使用foreach来遍历，会报错\n综上：反射是绕开编译时期来进行的","slug":"反射","published":1,"updated":"2020-01-02T11:44:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck56oooam0005ejup9lov3xrc","content":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4><a id=\"more\"></a>\n<ul>\n<li>所有抽象出来的类都是java.lang.Class类中的一个对象（细品），这个对象称为该类的类类型，一个类只有一个Class类的实例对象，即只有一个类类型<br>以下为Class的使用：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo foo1 &#x3D; new Foo();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第一种方式</span><br><span class=\"line\">Class c1 &#x3D; Foo.class;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第二种方式</span><br><span class=\"line\">Class c2 &#x3D; foo1.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第三种方式</span><br><span class=\"line\">Class c3 &#x3D; null;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    c3 &#x3D; Class.forName(&quot;refelect.demo.Foo&quot;);</span><br><span class=\"line\">&#125;catch (ClassNotFoundException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;一个抽象的类只可能是Class类的一个实例对象（细品）</span><br><span class=\"line\">System.out.println(c1 &#x3D;&#x3D; c2); &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;通过类类型来创建类的实例对象</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    Foo foo &#x3D; (Foo) c1.newInstance(); &#x2F;&#x2F;需要有无参构造方法</span><br><span class=\"line\">&#125; catch (InstantiationException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>动态加载类<br>编译时刻是静态加载类（new的时候），把一切可能用到或者用不到的类全部静态加载，而动态加载不一样，是发生在运行时刻的<br>假设一个程序有100方法，但是只要有一个类无法静态加载时，整个程序崩溃造成其他99个都无法使用，这显然不符合业务需求，当我们需要用到某个方法时，我们希望，即需即创建和使用，这样更灵活，这就是运行时期动态加载的好处（Class.forName方法代表了动态加载类）</li>\n</ul>\n<hr>\n<ul>\n<li><p>基本数据类型<br>void 关键字 都存在类类型 —&gt; void.class<br>int\\double 都存在类类型 —&gt; int\\double.class<br>注意：double数据类型和Double类的类类型不同</p>\n</li>\n<li><p>ArrayList和ArrayList<String>的类类型一样吗<br>是一样的<br>重点：Java集合中的泛型是为了防止错误输入的，只在编译阶段有效（重点），可以使用返回在运行时期向ArrayList<String>中添加不是String类型的数据，如果添加了非泛型类型的数据就不能使用foreach来遍历，会报错<br>综上：反射是绕开编译时期来进行的</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4>","more":"<ul>\n<li>所有抽象出来的类都是java.lang.Class类中的一个对象（细品），这个对象称为该类的类类型，一个类只有一个Class类的实例对象，即只有一个类类型<br>以下为Class的使用：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo foo1 &#x3D; new Foo();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第一种方式</span><br><span class=\"line\">Class c1 &#x3D; Foo.class;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第二种方式</span><br><span class=\"line\">Class c2 &#x3D; foo1.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;第三种方式</span><br><span class=\"line\">Class c3 &#x3D; null;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    c3 &#x3D; Class.forName(&quot;refelect.demo.Foo&quot;);</span><br><span class=\"line\">&#125;catch (ClassNotFoundException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;一个抽象的类只可能是Class类的一个实例对象（细品）</span><br><span class=\"line\">System.out.println(c1 &#x3D;&#x3D; c2); &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;通过类类型来创建类的实例对象</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    Foo foo &#x3D; (Foo) c1.newInstance(); &#x2F;&#x2F;需要有无参构造方法</span><br><span class=\"line\">&#125; catch (InstantiationException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>动态加载类<br>编译时刻是静态加载类（new的时候），把一切可能用到或者用不到的类全部静态加载，而动态加载不一样，是发生在运行时刻的<br>假设一个程序有100方法，但是只要有一个类无法静态加载时，整个程序崩溃造成其他99个都无法使用，这显然不符合业务需求，当我们需要用到某个方法时，我们希望，即需即创建和使用，这样更灵活，这就是运行时期动态加载的好处（Class.forName方法代表了动态加载类）</li>\n</ul>\n<hr>\n<ul>\n<li><p>基本数据类型<br>void 关键字 都存在类类型 —&gt; void.class<br>int\\double 都存在类类型 —&gt; int\\double.class<br>注意：double数据类型和Double类的类类型不同</p>\n</li>\n<li><p>ArrayList和ArrayList<String>的类类型一样吗<br>是一样的<br>重点：Java集合中的泛型是为了防止错误输入的，只在编译阶段有效（重点），可以使用返回在运行时期向ArrayList<String>中添加不是String类型的数据，如果添加了非泛型类型的数据就不能使用foreach来遍历，会报错<br>综上：反射是绕开编译时期来进行的</p>\n</li>\n</ul>"},{"title":"我的2019","toc":true,"date":"2020-01-08T10:07:26.000Z","thumbnail":"/gallery/thumbnails/我的2019.jpg","_content":"\n#### 甘为思想容器却缺乏执行力的定时炸弹\n<!-- more -->\n\n---\n## **# 失业** \n##### 失业已经连续**七个月多**了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，**这都是自食其果，我全都知道**。\n##### 今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，**终究，被现实压垮了**。\n##### 不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，**我设下了很多期待**，但代价是负债累累。\n##### 如果你问我为什么失业，我告诉你，仅仅是因为**我害怕**，我害怕任何工作上的错误和社会的职场套路。\n![avatar](/articalPic/12.jpg)\n\n## **# 拖拉**\n##### 无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\n###### 我不为任何事情找借口，你可以称之为**颓废**。\n###### 我开始**想象死亡，尊敬死亡**，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\n![avatar](/articalPic/13.jpg)\n\n## **# 希望**\n##### 如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\n##### 总是号令着改变，却从没有执行，这很**现实**。\n##### 但我相信只要活着，总能有办法的吧。\n![avatar](/articalPic/14.jpg)\n\n## **# 思想**\n##### 无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，**有吸无收**，世界观，价值观，人生观基本被坍塌，被冲刷。\n![avatar](/articalPic/15.jpg)\n\n## **# 经济**\n##### 负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook pro，还是落空了，希望明年当一个正常人吧。\n![avatar](/articalPic/16.jpeg)\n\n\n## **# 2020计划**\n* 债务偿还\n* 新入macbook pro\n* **阅读，养身体**\n* **当一个正常职业者**\n* **出去走一走，看看这个世界**\n\n\n> ***负重前行吧。***\n","source":"_posts/我的2019.md","raw":"---\ntitle: 我的2019\ntoc: true\ndate: 2020-01-08 18:07:26\nthumbnail: /gallery/thumbnails/我的2019.jpg\ntags: 总结\ncategories: 生活记录\n---\n\n#### 甘为思想容器却缺乏执行力的定时炸弹\n<!-- more -->\n\n---\n## **# 失业** \n##### 失业已经连续**七个月多**了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，**这都是自食其果，我全都知道**。\n##### 今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，**终究，被现实压垮了**。\n##### 不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，**我设下了很多期待**，但代价是负债累累。\n##### 如果你问我为什么失业，我告诉你，仅仅是因为**我害怕**，我害怕任何工作上的错误和社会的职场套路。\n![avatar](/articalPic/12.jpg)\n\n## **# 拖拉**\n##### 无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\n###### 我不为任何事情找借口，你可以称之为**颓废**。\n###### 我开始**想象死亡，尊敬死亡**，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\n![avatar](/articalPic/13.jpg)\n\n## **# 希望**\n##### 如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\n##### 总是号令着改变，却从没有执行，这很**现实**。\n##### 但我相信只要活着，总能有办法的吧。\n![avatar](/articalPic/14.jpg)\n\n## **# 思想**\n##### 无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，**有吸无收**，世界观，价值观，人生观基本被坍塌，被冲刷。\n![avatar](/articalPic/15.jpg)\n\n## **# 经济**\n##### 负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook pro，还是落空了，希望明年当一个正常人吧。\n![avatar](/articalPic/16.jpeg)\n\n\n## **# 2020计划**\n* 债务偿还\n* 新入macbook pro\n* **阅读，养身体**\n* **当一个正常职业者**\n* **出去走一走，看看这个世界**\n\n\n> ***负重前行吧。***\n","slug":"我的2019","published":1,"updated":"2020-01-08T11:23:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck56oooan0006ejup7ctf3pfv","content":"<h4 id=\"甘为思想容器却缺乏执行力的定时炸弹\"><a href=\"#甘为思想容器却缺乏执行力的定时炸弹\" class=\"headerlink\" title=\"甘为思想容器却缺乏执行力的定时炸弹\"></a>甘为思想容器却缺乏执行力的定时炸弹</h4><a id=\"more\"></a>\n\n<hr>\n<h2 id=\"失业\"><a href=\"#失业\" class=\"headerlink\" title=\"# 失业\"></a><strong># 失业</strong></h2><h5 id=\"失业已经连续七个月多了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，这都是自食其果，我全都知道。\"><a href=\"#失业已经连续七个月多了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，这都是自食其果，我全都知道。\" class=\"headerlink\" title=\"失业已经连续七个月多了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，这都是自食其果，我全都知道。\"></a>失业已经连续<strong>七个月多</strong>了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，<strong>这都是自食其果，我全都知道</strong>。</h5><h5 id=\"今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，终究，被现实压垮了。\"><a href=\"#今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，终究，被现实压垮了。\" class=\"headerlink\" title=\"今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，终究，被现实压垮了。\"></a>今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，<strong>终究，被现实压垮了</strong>。</h5><h5 id=\"不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，我设下了很多期待，但代价是负债累累。\"><a href=\"#不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，我设下了很多期待，但代价是负债累累。\" class=\"headerlink\" title=\"不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，我设下了很多期待，但代价是负债累累。\"></a>不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，<strong>我设下了很多期待</strong>，但代价是负债累累。</h5><h5 id=\"如果你问我为什么失业，我告诉你，仅仅是因为我害怕，我害怕任何工作上的错误和社会的职场套路。\"><a href=\"#如果你问我为什么失业，我告诉你，仅仅是因为我害怕，我害怕任何工作上的错误和社会的职场套路。\" class=\"headerlink\" title=\"如果你问我为什么失业，我告诉你，仅仅是因为我害怕，我害怕任何工作上的错误和社会的职场套路。\"></a>如果你问我为什么失业，我告诉你，仅仅是因为<strong>我害怕</strong>，我害怕任何工作上的错误和社会的职场套路。</h5><p><img src=\"/articalPic/12.jpg\" alt=\"avatar\"></p>\n<h2 id=\"拖拉\"><a href=\"#拖拉\" class=\"headerlink\" title=\"# 拖拉\"></a><strong># 拖拉</strong></h2><h5 id=\"无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\"><a href=\"#无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\" class=\"headerlink\" title=\"无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\"></a>无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，</h5><h6 id=\"我不为任何事情找借口，你可以称之为颓废。\"><a href=\"#我不为任何事情找借口，你可以称之为颓废。\" class=\"headerlink\" title=\"我不为任何事情找借口，你可以称之为颓废。\"></a>我不为任何事情找借口，你可以称之为<strong>颓废</strong>。</h6><h6 id=\"我开始想象死亡，尊敬死亡，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\"><a href=\"#我开始想象死亡，尊敬死亡，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\" class=\"headerlink\" title=\"我开始想象死亡，尊敬死亡，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\"></a>我开始<strong>想象死亡，尊敬死亡</strong>，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。</h6><p><img src=\"/articalPic/13.jpg\" alt=\"avatar\"></p>\n<h2 id=\"希望\"><a href=\"#希望\" class=\"headerlink\" title=\"# 希望\"></a><strong># 希望</strong></h2><h5 id=\"如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\"><a href=\"#如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\" class=\"headerlink\" title=\"如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\"></a>如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。</h5><h5 id=\"总是号令着改变，却从没有执行，这很现实。\"><a href=\"#总是号令着改变，却从没有执行，这很现实。\" class=\"headerlink\" title=\"总是号令着改变，却从没有执行，这很现实。\"></a>总是号令着改变，却从没有执行，这很<strong>现实</strong>。</h5><h5 id=\"但我相信只要活着，总能有办法的吧。\"><a href=\"#但我相信只要活着，总能有办法的吧。\" class=\"headerlink\" title=\"但我相信只要活着，总能有办法的吧。\"></a>但我相信只要活着，总能有办法的吧。</h5><p><img src=\"/articalPic/14.jpg\" alt=\"avatar\"></p>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"# 思想\"></a><strong># 思想</strong></h2><h5 id=\"无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，有吸无收，世界观，价值观，人生观基本被坍塌，被冲刷。\"><a href=\"#无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，有吸无收，世界观，价值观，人生观基本被坍塌，被冲刷。\" class=\"headerlink\" title=\"无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，有吸无收，世界观，价值观，人生观基本被坍塌，被冲刷。\"></a>无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，<strong>有吸无收</strong>，世界观，价值观，人生观基本被坍塌，被冲刷。</h5><p><img src=\"/articalPic/15.jpg\" alt=\"avatar\"></p>\n<h2 id=\"经济\"><a href=\"#经济\" class=\"headerlink\" title=\"# 经济\"></a><strong># 经济</strong></h2><h5 id=\"负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods-pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook-pro，还是落空了，希望明年当一个正常人吧。\"><a href=\"#负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods-pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook-pro，还是落空了，希望明年当一个正常人吧。\" class=\"headerlink\" title=\"负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook pro，还是落空了，希望明年当一个正常人吧。\"></a>负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook pro，还是落空了，希望明年当一个正常人吧。</h5><p><img src=\"/articalPic/16.jpeg\" alt=\"avatar\"></p>\n<h2 id=\"2020计划\"><a href=\"#2020计划\" class=\"headerlink\" title=\"# 2020计划\"></a><strong># 2020计划</strong></h2><ul>\n<li>债务偿还</li>\n<li>新入macbook pro</li>\n<li><strong>阅读，养身体</strong></li>\n<li><strong>当一个正常职业者</strong></li>\n<li><strong>出去走一走，看看这个世界</strong></li>\n</ul>\n<blockquote>\n<p><strong><em>负重前行吧。</em></strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h4 id=\"甘为思想容器却缺乏执行力的定时炸弹\"><a href=\"#甘为思想容器却缺乏执行力的定时炸弹\" class=\"headerlink\" title=\"甘为思想容器却缺乏执行力的定时炸弹\"></a>甘为思想容器却缺乏执行力的定时炸弹</h4>","more":"<hr>\n<h2 id=\"失业\"><a href=\"#失业\" class=\"headerlink\" title=\"# 失业\"></a><strong># 失业</strong></h2><h5 id=\"失业已经连续七个月多了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，这都是自食其果，我全都知道。\"><a href=\"#失业已经连续七个月多了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，这都是自食其果，我全都知道。\" class=\"headerlink\" title=\"失业已经连续七个月多了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，这都是自食其果，我全都知道。\"></a>失业已经连续<strong>七个月多</strong>了，期间焦虑过，挣扎过，站起来过，但是终究适应了麻木。当然，<strong>这都是自食其果，我全都知道</strong>。</h5><h5 id=\"今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，终究，被现实压垮了。\"><a href=\"#今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，终究，被现实压垮了。\" class=\"headerlink\" title=\"今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，终究，被现实压垮了。\"></a>今年是半收获的一年，在上家学到了不少东西，也清楚自己的能力定位，但是始终不清楚是否适合在该行业生存得下去，于是一直逃避，一直视若无睹，<strong>终究，被现实压垮了</strong>。</h5><h5 id=\"不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，我设下了很多期待，但代价是负债累累。\"><a href=\"#不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，我设下了很多期待，但代价是负债累累。\" class=\"headerlink\" title=\"不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，我设下了很多期待，但代价是负债累累。\"></a>不敢面见身边的人，不敢让朋友家人们知道我的状态，但只有我知道，我一直想的是如何死亡，而身体本能告诉我不能这样做，于是为了抵抗这股邪恶势力，<strong>我设下了很多期待</strong>，但代价是负债累累。</h5><h5 id=\"如果你问我为什么失业，我告诉你，仅仅是因为我害怕，我害怕任何工作上的错误和社会的职场套路。\"><a href=\"#如果你问我为什么失业，我告诉你，仅仅是因为我害怕，我害怕任何工作上的错误和社会的职场套路。\" class=\"headerlink\" title=\"如果你问我为什么失业，我告诉你，仅仅是因为我害怕，我害怕任何工作上的错误和社会的职场套路。\"></a>如果你问我为什么失业，我告诉你，仅仅是因为<strong>我害怕</strong>，我害怕任何工作上的错误和社会的职场套路。</h5><p><img src=\"/articalPic/12.jpg\" alt=\"avatar\"></p>\n<h2 id=\"拖拉\"><a href=\"#拖拉\" class=\"headerlink\" title=\"# 拖拉\"></a><strong># 拖拉</strong></h2><h5 id=\"无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\"><a href=\"#无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\" class=\"headerlink\" title=\"无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，\"></a>无可否认的是，懒惰造成了现在的局面，始终认为在以后某个时间点，以后某个地方，一定能弥补现在所有的代价与不足，而现实是，接踵而来无数次面对低谷的夜晚，不断被拒绝的简历回复，</h5><h6 id=\"我不为任何事情找借口，你可以称之为颓废。\"><a href=\"#我不为任何事情找借口，你可以称之为颓废。\" class=\"headerlink\" title=\"我不为任何事情找借口，你可以称之为颓废。\"></a>我不为任何事情找借口，你可以称之为<strong>颓废</strong>。</h6><h6 id=\"我开始想象死亡，尊敬死亡，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\"><a href=\"#我开始想象死亡，尊敬死亡，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\" class=\"headerlink\" title=\"我开始想象死亡，尊敬死亡，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。\"></a>我开始<strong>想象死亡，尊敬死亡</strong>，只是主动死亡并不可能，我更希望有一次意外且完美的死亡，可以让大家释怀却无能为力地死亡，当然我知道，这不可能，很抱歉，太多繁杂有用无用的信息都在脑子里，仿佛它告诉你可以这样却有另外一个声音说不可以。</h6><p><img src=\"/articalPic/13.jpg\" alt=\"avatar\"></p>\n<h2 id=\"希望\"><a href=\"#希望\" class=\"headerlink\" title=\"# 希望\"></a><strong># 希望</strong></h2><h5 id=\"如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\"><a href=\"#如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\" class=\"headerlink\" title=\"如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。\"></a>如此丧，心中却一直充满希望，希望我可以成为一个热血的人，一个骑士，一个本来大家都可以认为我做到的人，只是现在朋友们评价我，总是以惨字开头，只是现在，我突然害怕我做不到。</h5><h5 id=\"总是号令着改变，却从没有执行，这很现实。\"><a href=\"#总是号令着改变，却从没有执行，这很现实。\" class=\"headerlink\" title=\"总是号令着改变，却从没有执行，这很现实。\"></a>总是号令着改变，却从没有执行，这很<strong>现实</strong>。</h5><h5 id=\"但我相信只要活着，总能有办法的吧。\"><a href=\"#但我相信只要活着，总能有办法的吧。\" class=\"headerlink\" title=\"但我相信只要活着，总能有办法的吧。\"></a>但我相信只要活着，总能有办法的吧。</h5><p><img src=\"/articalPic/14.jpg\" alt=\"avatar\"></p>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"# 思想\"></a><strong># 思想</strong></h2><h5 id=\"无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，有吸无收，世界观，价值观，人生观基本被坍塌，被冲刷。\"><a href=\"#无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，有吸无收，世界观，价值观，人生观基本被坍塌，被冲刷。\" class=\"headerlink\" title=\"无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，有吸无收，世界观，价值观，人生观基本被坍塌，被冲刷。\"></a>无数个控制不住的熬夜，无数个思想，脑袋里像是个容器，<strong>有吸无收</strong>，世界观，价值观，人生观基本被坍塌，被冲刷。</h5><p><img src=\"/articalPic/15.jpg\" alt=\"avatar\"></p>\n<h2 id=\"经济\"><a href=\"#经济\" class=\"headerlink\" title=\"# 经济\"></a><strong># 经济</strong></h2><h5 id=\"负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods-pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook-pro，还是落空了，希望明年当一个正常人吧。\"><a href=\"#负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods-pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook-pro，还是落空了，希望明年当一个正常人吧。\" class=\"headerlink\" title=\"负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook pro，还是落空了，希望明年当一个正常人吧。\"></a>负债累累，却为了对生活有更大的期待，购入一批数码产品，有最新的airpods pro，iwatch等，我知道，在失去了收入却还要购买的行为很可耻，也很贱，但是确实对我一点点帮助，只是去年以为今年可以购入macbook pro，还是落空了，希望明年当一个正常人吧。</h5><p><img src=\"/articalPic/16.jpeg\" alt=\"avatar\"></p>\n<h2 id=\"2020计划\"><a href=\"#2020计划\" class=\"headerlink\" title=\"# 2020计划\"></a><strong># 2020计划</strong></h2><ul>\n<li>债务偿还</li>\n<li>新入macbook pro</li>\n<li><strong>阅读，养身体</strong></li>\n<li><strong>当一个正常职业者</strong></li>\n<li><strong>出去走一走，看看这个世界</strong></li>\n</ul>\n<blockquote>\n<p><strong><em>负重前行吧。</em></strong></p>\n</blockquote>"},{"title":"线程之synchronized详解","toc":true,"date":"2020-01-02T09:40:47.000Z","thumbnail":"/gallery/thumbnails/线程之synchronized详解.jpg","_content":"#### 参考：https://www.imooc.com/learn/1086\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n* 1.互斥与同步的理解\n```\n线程互斥：多个线程竞争同一个锁条件\n同步：指线程与线程之间的一种通信交互方式，一端发送消息、另一端响应消息\n```\n***\n* 2.wait、notify、notifyAll的使用与理解\n```\n场景：多个线程在共享区域（临界区）抢占共享资源,获得锁才能进入临界区拿到对应的共享资源\n共同点：都是实例的方法\nwait：当前线程获取到锁对象，但是当前线程不满足某个条件时，就会释放当前占有的锁对象，最后当前线程放置于锁对象（记住是锁对象）中的wait set区域（等锁池），其他线程仍旧可以抢这个锁对象\nnotify与notifyAll：当其他线程已经抢占到锁对象并且执行完当前线程的某些操作，后使用notify和notifyAll唤醒锁对象中wait set区域内的单个或多个等待线程可以重新抢占锁对象\n```\n***\n* 3.停止线程的方法stop(),interrupt()的使用注意事项。\n```\n1、基本放弃stop方法，容易导致死锁\n2、interrupt方法可以用来请求线程终止，interupt实际是改变线程的某种状态（返回值是boolean值），如果线程被阻塞，就无法检测中断状态（在有join、sleep等方法操作的时候，造成Interrupted Exception异常中断）\n3、如果需要真正切实可行的终结线程，一般采用一个boolean值在作为线程终结的标志来动态控制线程的结束\n扩展：interrupted为静态方法，不同于interrupt方法，它是测试当前线程是否被终中断，副作用——将当前线程的中断状态置位false。\n```\n***\n* 4.join（）、yield（）、sleep（）的区别\n```\njoin：实例方法，其他线程需等待当前线程终止后（类似VIP插队）\nyeild：Thread的静态方法，指当前线程让出处理器资源，其他线程包括当前线程重新竞争临界区（只会让给相同优先级或更高优先级的线程）\nsleep：Thread的静态方法，线程休眠，但是不会释放对象锁（让给低优先级的线程）\n扩展：sleep（）方法比yield（）方法更具有可移植性\n```\n***\n* 5.线程六种状态。\n```\nNew（新创建）、Runnable（可运行）、Blocked（被阻塞）、Waiting（等待）、Timed Waiting（计时等待）、Terminated（被终止）\n~New：出一个新线程的时候的状态\n~Runnable：调用start方法时，线程处于可运行状态，此时可运行的线程可能正在运行也可能没运行。一个线程只有在调用yield方法、或者被阻塞或等待时，线程才失去控制权\n~Blocked：\n    1、当一个线程试图获取一个内部的对象锁时，但是此对象锁被其他线程持有，该线程进入阻塞状态。\n    2、当线程等待另一个线程通知调度器一个条件时，它自己就会进入等待状态，比如使用Object的wait方法或者Thread的join方法，或者是等待java.util.concurrent中的Lock或者Condition时，就会出现这种情况（等待状态）\n    3、有几个方法有一个超时参数。\n```\n***\n* 6.对象锁和类锁\n1.对象锁：对象锁指的是多个线程使用同一个实例(两种形式：代码块形式和方法形式)\n```\nsynchronized (this) {\n           ···\n        }\n```\n```\n此处形式实际上隐形的使用了this这个实例\npublic synchronized void method(){\n           ···\n    }\n```\n2.类锁：类锁指的是多个线程使用类的Class对象（唯一一个对象）（两种形式：静态方法）\n```\npublic static synchronized void method(){\n           ···\n    }\n```\n```\nsynchronized (Abc.class) {\n           ···\n        }\n```\n注：类锁一般用于全局的情况下\n***\n* 7.synchronized有哪些特性，分别是什么？\n```\n可重入性：同一线程的外层函数获得锁以后，内层函数可以直接获取该锁，比如synchronized关键字（本质是由jvm跟踪对象锁加锁的次数，含有一个计时器）\n假设synchronized不可重入，当有两个synchronized方法的前提下，同一线程在第一个方法（已获取锁对象）调用第二同步方法时，这个时候，当前方法持有锁，而第二个方法未持有锁，即会造成死锁情况。\n不可中断性：锁一旦被占用就无法主动打断持有锁的线程，只能等待锁释放（不同于Lock类，Lock类具有中断和退出性质）\n```\n***\n* 8.synchronized有哪些缺陷？\n1.效率低：未持有锁的其他线程必须等待锁释放才能去获取临界资源，造成效率低\n2.不够灵活（读写锁更灵活）：加锁和释放锁的时机单一，每个锁仅有单一的条件（对象），可能是不够的\n3.无法知道是否成功获取锁\n注意：以上可以当成Lock的相对缺陷，lock更灵活些是因为lock接口的某些方法，比如设置尝试获取锁trylock和它的参数设置超时时间以及它手动的lock加锁和unlock解锁操作；读写锁更灵活是因为读操作的时候可以不需要锁，写锁由于需要同步数据，所以必须要加入锁机制；掌握lock和synchronized的区别可以更细节的去根据业务场景进行选择\n***\n\n\n\n\n### 常问面试题\n* 使用synchronized的注意事项？\n1、锁对象不能为空（因为锁对象都是在对象里面的，可以参考javap -verpose反编译.class文件展开说monitorenter指令和monitorexit指令）\n2、作用域不宜过大\n3、避免死锁\n\n* 如何选择synchronized关键字和Lock接口？\n1、如果都满足业务需求，可以使用前者，因为代码量少避免出错\n2、如果需要更灵活利用特性，比如lock的更为手动的灵活控制，就使用lock\n3、如果有现成的已经实现现成安全的类则优先使用\n\n* 多线程访问同步方法的各种情况\n1、两个线程同时访问一个对象的同步方法 —— 同步串行（对象锁）\n2、两个线程同时访问两个对象的同步方法 —— 并行（不同的对象锁）\n3、两个线程访问的是synchronized静态方法 —— 同步串行（类锁）\n4、同时访问同步方法和非同步方法 —— 非同步方法不会受到干扰\n5、访问同一个对象的不同的普通同步方法 —— 同步（因为实际上的对象锁还是this当前实例）\n6、同时访问静态synchronized和非静态synchroinzed方法 —— 并行（因为静态的同步方法访问类实例，而非静态同步方法访问的是类的Class对象，两个实例不一样，所以不存在竞争，即并行）\n7、方法抛出异常，会释放锁 —— synchorinzed遇到异常会自动释放锁，而Lock需要trycatch后手动释放锁\n8、如果多个线程去访问一个被synchronized关键字的方法（这个方法会去调用非synchronized的方法），此时线程是不安全的，因为当调用的方法脱离了synchronized之后，就脱离了该关键字的范围","source":"_posts/线程.md","raw":"---\ntitle: 线程之synchronized详解\ntoc: true\ndate: 2020-01-02 17:40:47\nthumbnail: /gallery/thumbnails/线程之synchronized详解.jpg\ntags: java\ncategories: 笔记\n---\n#### 参考：https://www.imooc.com/learn/1086\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n* 1.互斥与同步的理解\n```\n线程互斥：多个线程竞争同一个锁条件\n同步：指线程与线程之间的一种通信交互方式，一端发送消息、另一端响应消息\n```\n***\n* 2.wait、notify、notifyAll的使用与理解\n```\n场景：多个线程在共享区域（临界区）抢占共享资源,获得锁才能进入临界区拿到对应的共享资源\n共同点：都是实例的方法\nwait：当前线程获取到锁对象，但是当前线程不满足某个条件时，就会释放当前占有的锁对象，最后当前线程放置于锁对象（记住是锁对象）中的wait set区域（等锁池），其他线程仍旧可以抢这个锁对象\nnotify与notifyAll：当其他线程已经抢占到锁对象并且执行完当前线程的某些操作，后使用notify和notifyAll唤醒锁对象中wait set区域内的单个或多个等待线程可以重新抢占锁对象\n```\n***\n* 3.停止线程的方法stop(),interrupt()的使用注意事项。\n```\n1、基本放弃stop方法，容易导致死锁\n2、interrupt方法可以用来请求线程终止，interupt实际是改变线程的某种状态（返回值是boolean值），如果线程被阻塞，就无法检测中断状态（在有join、sleep等方法操作的时候，造成Interrupted Exception异常中断）\n3、如果需要真正切实可行的终结线程，一般采用一个boolean值在作为线程终结的标志来动态控制线程的结束\n扩展：interrupted为静态方法，不同于interrupt方法，它是测试当前线程是否被终中断，副作用——将当前线程的中断状态置位false。\n```\n***\n* 4.join（）、yield（）、sleep（）的区别\n```\njoin：实例方法，其他线程需等待当前线程终止后（类似VIP插队）\nyeild：Thread的静态方法，指当前线程让出处理器资源，其他线程包括当前线程重新竞争临界区（只会让给相同优先级或更高优先级的线程）\nsleep：Thread的静态方法，线程休眠，但是不会释放对象锁（让给低优先级的线程）\n扩展：sleep（）方法比yield（）方法更具有可移植性\n```\n***\n* 5.线程六种状态。\n```\nNew（新创建）、Runnable（可运行）、Blocked（被阻塞）、Waiting（等待）、Timed Waiting（计时等待）、Terminated（被终止）\n~New：出一个新线程的时候的状态\n~Runnable：调用start方法时，线程处于可运行状态，此时可运行的线程可能正在运行也可能没运行。一个线程只有在调用yield方法、或者被阻塞或等待时，线程才失去控制权\n~Blocked：\n    1、当一个线程试图获取一个内部的对象锁时，但是此对象锁被其他线程持有，该线程进入阻塞状态。\n    2、当线程等待另一个线程通知调度器一个条件时，它自己就会进入等待状态，比如使用Object的wait方法或者Thread的join方法，或者是等待java.util.concurrent中的Lock或者Condition时，就会出现这种情况（等待状态）\n    3、有几个方法有一个超时参数。\n```\n***\n* 6.对象锁和类锁\n1.对象锁：对象锁指的是多个线程使用同一个实例(两种形式：代码块形式和方法形式)\n```\nsynchronized (this) {\n           ···\n        }\n```\n```\n此处形式实际上隐形的使用了this这个实例\npublic synchronized void method(){\n           ···\n    }\n```\n2.类锁：类锁指的是多个线程使用类的Class对象（唯一一个对象）（两种形式：静态方法）\n```\npublic static synchronized void method(){\n           ···\n    }\n```\n```\nsynchronized (Abc.class) {\n           ···\n        }\n```\n注：类锁一般用于全局的情况下\n***\n* 7.synchronized有哪些特性，分别是什么？\n```\n可重入性：同一线程的外层函数获得锁以后，内层函数可以直接获取该锁，比如synchronized关键字（本质是由jvm跟踪对象锁加锁的次数，含有一个计时器）\n假设synchronized不可重入，当有两个synchronized方法的前提下，同一线程在第一个方法（已获取锁对象）调用第二同步方法时，这个时候，当前方法持有锁，而第二个方法未持有锁，即会造成死锁情况。\n不可中断性：锁一旦被占用就无法主动打断持有锁的线程，只能等待锁释放（不同于Lock类，Lock类具有中断和退出性质）\n```\n***\n* 8.synchronized有哪些缺陷？\n1.效率低：未持有锁的其他线程必须等待锁释放才能去获取临界资源，造成效率低\n2.不够灵活（读写锁更灵活）：加锁和释放锁的时机单一，每个锁仅有单一的条件（对象），可能是不够的\n3.无法知道是否成功获取锁\n注意：以上可以当成Lock的相对缺陷，lock更灵活些是因为lock接口的某些方法，比如设置尝试获取锁trylock和它的参数设置超时时间以及它手动的lock加锁和unlock解锁操作；读写锁更灵活是因为读操作的时候可以不需要锁，写锁由于需要同步数据，所以必须要加入锁机制；掌握lock和synchronized的区别可以更细节的去根据业务场景进行选择\n***\n\n\n\n\n### 常问面试题\n* 使用synchronized的注意事项？\n1、锁对象不能为空（因为锁对象都是在对象里面的，可以参考javap -verpose反编译.class文件展开说monitorenter指令和monitorexit指令）\n2、作用域不宜过大\n3、避免死锁\n\n* 如何选择synchronized关键字和Lock接口？\n1、如果都满足业务需求，可以使用前者，因为代码量少避免出错\n2、如果需要更灵活利用特性，比如lock的更为手动的灵活控制，就使用lock\n3、如果有现成的已经实现现成安全的类则优先使用\n\n* 多线程访问同步方法的各种情况\n1、两个线程同时访问一个对象的同步方法 —— 同步串行（对象锁）\n2、两个线程同时访问两个对象的同步方法 —— 并行（不同的对象锁）\n3、两个线程访问的是synchronized静态方法 —— 同步串行（类锁）\n4、同时访问同步方法和非同步方法 —— 非同步方法不会受到干扰\n5、访问同一个对象的不同的普通同步方法 —— 同步（因为实际上的对象锁还是this当前实例）\n6、同时访问静态synchronized和非静态synchroinzed方法 —— 并行（因为静态的同步方法访问类实例，而非静态同步方法访问的是类的Class对象，两个实例不一样，所以不存在竞争，即并行）\n7、方法抛出异常，会释放锁 —— synchorinzed遇到异常会自动释放锁，而Lock需要trycatch后手动释放锁\n8、如果多个线程去访问一个被synchronized关键字的方法（这个方法会去调用非synchronized的方法），此时线程是不安全的，因为当调用的方法脱离了synchronized之后，就脱离了该关键字的范围","slug":"线程","published":1,"updated":"2020-01-09T11:57:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck56oooap0007ejup9qil0bq0","content":"<h4 id=\"参考：https-www-imooc-com-learn-1086\"><a href=\"#参考：https-www-imooc-com-learn-1086\" class=\"headerlink\" title=\"参考：https://www.imooc.com/learn/1086\"></a>参考：<a href=\"https://www.imooc.com/learn/1086\">https://www.imooc.com/learn/1086</a></h4><h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4><a id=\"more\"></a>\n<ul>\n<li>1.互斥与同步的理解<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程互斥：多个线程竞争同一个锁条件</span><br><span class=\"line\">同步：指线程与线程之间的一种通信交互方式，一端发送消息、另一端响应消息</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>2.wait、notify、notifyAll的使用与理解<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：多个线程在共享区域（临界区）抢占共享资源,获得锁才能进入临界区拿到对应的共享资源</span><br><span class=\"line\">共同点：都是实例的方法</span><br><span class=\"line\">wait：当前线程获取到锁对象，但是当前线程不满足某个条件时，就会释放当前占有的锁对象，最后当前线程放置于锁对象（记住是锁对象）中的wait set区域（等锁池），其他线程仍旧可以抢这个锁对象</span><br><span class=\"line\">notify与notifyAll：当其他线程已经抢占到锁对象并且执行完当前线程的某些操作，后使用notify和notifyAll唤醒锁对象中wait set区域内的单个或多个等待线程可以重新抢占锁对象</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>3.停止线程的方法stop(),interrupt()的使用注意事项。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、基本放弃stop方法，容易导致死锁</span><br><span class=\"line\">2、interrupt方法可以用来请求线程终止，interupt实际是改变线程的某种状态（返回值是boolean值），如果线程被阻塞，就无法检测中断状态（在有join、sleep等方法操作的时候，造成Interrupted Exception异常中断）</span><br><span class=\"line\">3、如果需要真正切实可行的终结线程，一般采用一个boolean值在作为线程终结的标志来动态控制线程的结束</span><br><span class=\"line\">扩展：interrupted为静态方法，不同于interrupt方法，它是测试当前线程是否被终中断，副作用——将当前线程的中断状态置位false。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>4.join（）、yield（）、sleep（）的区别<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">join：实例方法，其他线程需等待当前线程终止后（类似VIP插队）</span><br><span class=\"line\">yeild：Thread的静态方法，指当前线程让出处理器资源，其他线程包括当前线程重新竞争临界区（只会让给相同优先级或更高优先级的线程）</span><br><span class=\"line\">sleep：Thread的静态方法，线程休眠，但是不会释放对象锁（让给低优先级的线程）</span><br><span class=\"line\">扩展：sleep（）方法比yield（）方法更具有可移植性</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>5.线程六种状态。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New（新创建）、Runnable（可运行）、Blocked（被阻塞）、Waiting（等待）、Timed Waiting（计时等待）、Terminated（被终止）</span><br><span class=\"line\">~New：出一个新线程的时候的状态</span><br><span class=\"line\">~Runnable：调用start方法时，线程处于可运行状态，此时可运行的线程可能正在运行也可能没运行。一个线程只有在调用yield方法、或者被阻塞或等待时，线程才失去控制权</span><br><span class=\"line\">~Blocked：</span><br><span class=\"line\">    1、当一个线程试图获取一个内部的对象锁时，但是此对象锁被其他线程持有，该线程进入阻塞状态。</span><br><span class=\"line\">    2、当线程等待另一个线程通知调度器一个条件时，它自己就会进入等待状态，比如使用Object的wait方法或者Thread的join方法，或者是等待java.util.concurrent中的Lock或者Condition时，就会出现这种情况（等待状态）</span><br><span class=\"line\">    3、有几个方法有一个超时参数。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>6.对象锁和类锁</li>\n</ul>\n<p>1.对象锁：对象锁指的是多个线程使用同一个实例(两种形式：代码块形式和方法形式)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (this) &#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处形式实际上隐形的使用了this这个实例</span><br><span class=\"line\">public synchronized void method()&#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>2.类锁：类锁指的是多个线程使用类的Class对象（唯一一个对象）（两种形式：静态方法）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static synchronized void method()&#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (Abc.class) &#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>注：类锁一般用于全局的情况下</p>\n<hr>\n<ul>\n<li>7.synchronized有哪些特性，分别是什么？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可重入性：同一线程的外层函数获得锁以后，内层函数可以直接获取该锁，比如synchronized关键字（本质是由jvm跟踪对象锁加锁的次数，含有一个计时器）</span><br><span class=\"line\">假设synchronized不可重入，当有两个synchronized方法的前提下，同一线程在第一个方法（已获取锁对象）调用第二同步方法时，这个时候，当前方法持有锁，而第二个方法未持有锁，即会造成死锁情况。</span><br><span class=\"line\">不可中断性：锁一旦被占用就无法主动打断持有锁的线程，只能等待锁释放（不同于Lock类，Lock类具有中断和退出性质）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>8.synchronized有哪些缺陷？</li>\n</ul>\n<p>1.效率低：未持有锁的其他线程必须等待锁释放才能去获取临界资源，造成效率低<br>2.不够灵活（读写锁更灵活）：加锁和释放锁的时机单一，每个锁仅有单一的条件（对象），可能是不够的<br>3.无法知道是否成功获取锁<br>注意：以上可以当成Lock的相对缺陷，lock更灵活些是因为lock接口的某些方法，比如设置尝试获取锁trylock和它的参数设置超时时间以及它手动的lock加锁和unlock解锁操作；读写锁更灵活是因为读操作的时候可以不需要锁，写锁由于需要同步数据，所以必须要加入锁机制；掌握lock和synchronized的区别可以更细节的去根据业务场景进行选择</p>\n<hr>\n<h3 id=\"常问面试题\"><a href=\"#常问面试题\" class=\"headerlink\" title=\"常问面试题\"></a>常问面试题</h3><ul>\n<li><p>使用synchronized的注意事项？<br>1、锁对象不能为空（因为锁对象都是在对象里面的，可以参考javap -verpose反编译.class文件展开说monitorenter指令和monitorexit指令）<br>2、作用域不宜过大<br>3、避免死锁</p>\n</li>\n<li><p>如何选择synchronized关键字和Lock接口？<br>1、如果都满足业务需求，可以使用前者，因为代码量少避免出错<br>2、如果需要更灵活利用特性，比如lock的更为手动的灵活控制，就使用lock<br>3、如果有现成的已经实现现成安全的类则优先使用</p>\n</li>\n<li><p>多线程访问同步方法的各种情况<br>1、两个线程同时访问一个对象的同步方法 —— 同步串行（对象锁）<br>2、两个线程同时访问两个对象的同步方法 —— 并行（不同的对象锁）<br>3、两个线程访问的是synchronized静态方法 —— 同步串行（类锁）<br>4、同时访问同步方法和非同步方法 —— 非同步方法不会受到干扰<br>5、访问同一个对象的不同的普通同步方法 —— 同步（因为实际上的对象锁还是this当前实例）<br>6、同时访问静态synchronized和非静态synchroinzed方法 —— 并行（因为静态的同步方法访问类实例，而非静态同步方法访问的是类的Class对象，两个实例不一样，所以不存在竞争，即并行）<br>7、方法抛出异常，会释放锁 —— synchorinzed遇到异常会自动释放锁，而Lock需要trycatch后手动释放锁<br>8、如果多个线程去访问一个被synchronized关键字的方法（这个方法会去调用非synchronized的方法），此时线程是不安全的，因为当调用的方法脱离了synchronized之后，就脱离了该关键字的范围</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"参考：https-www-imooc-com-learn-1086\"><a href=\"#参考：https-www-imooc-com-learn-1086\" class=\"headerlink\" title=\"参考：https://www.imooc.com/learn/1086\"></a>参考：<a href=\"https://www.imooc.com/learn/1086\">https://www.imooc.com/learn/1086</a></h4><h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4>","more":"<ul>\n<li>1.互斥与同步的理解<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程互斥：多个线程竞争同一个锁条件</span><br><span class=\"line\">同步：指线程与线程之间的一种通信交互方式，一端发送消息、另一端响应消息</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>2.wait、notify、notifyAll的使用与理解<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：多个线程在共享区域（临界区）抢占共享资源,获得锁才能进入临界区拿到对应的共享资源</span><br><span class=\"line\">共同点：都是实例的方法</span><br><span class=\"line\">wait：当前线程获取到锁对象，但是当前线程不满足某个条件时，就会释放当前占有的锁对象，最后当前线程放置于锁对象（记住是锁对象）中的wait set区域（等锁池），其他线程仍旧可以抢这个锁对象</span><br><span class=\"line\">notify与notifyAll：当其他线程已经抢占到锁对象并且执行完当前线程的某些操作，后使用notify和notifyAll唤醒锁对象中wait set区域内的单个或多个等待线程可以重新抢占锁对象</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>3.停止线程的方法stop(),interrupt()的使用注意事项。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、基本放弃stop方法，容易导致死锁</span><br><span class=\"line\">2、interrupt方法可以用来请求线程终止，interupt实际是改变线程的某种状态（返回值是boolean值），如果线程被阻塞，就无法检测中断状态（在有join、sleep等方法操作的时候，造成Interrupted Exception异常中断）</span><br><span class=\"line\">3、如果需要真正切实可行的终结线程，一般采用一个boolean值在作为线程终结的标志来动态控制线程的结束</span><br><span class=\"line\">扩展：interrupted为静态方法，不同于interrupt方法，它是测试当前线程是否被终中断，副作用——将当前线程的中断状态置位false。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>4.join（）、yield（）、sleep（）的区别<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">join：实例方法，其他线程需等待当前线程终止后（类似VIP插队）</span><br><span class=\"line\">yeild：Thread的静态方法，指当前线程让出处理器资源，其他线程包括当前线程重新竞争临界区（只会让给相同优先级或更高优先级的线程）</span><br><span class=\"line\">sleep：Thread的静态方法，线程休眠，但是不会释放对象锁（让给低优先级的线程）</span><br><span class=\"line\">扩展：sleep（）方法比yield（）方法更具有可移植性</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>5.线程六种状态。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New（新创建）、Runnable（可运行）、Blocked（被阻塞）、Waiting（等待）、Timed Waiting（计时等待）、Terminated（被终止）</span><br><span class=\"line\">~New：出一个新线程的时候的状态</span><br><span class=\"line\">~Runnable：调用start方法时，线程处于可运行状态，此时可运行的线程可能正在运行也可能没运行。一个线程只有在调用yield方法、或者被阻塞或等待时，线程才失去控制权</span><br><span class=\"line\">~Blocked：</span><br><span class=\"line\">    1、当一个线程试图获取一个内部的对象锁时，但是此对象锁被其他线程持有，该线程进入阻塞状态。</span><br><span class=\"line\">    2、当线程等待另一个线程通知调度器一个条件时，它自己就会进入等待状态，比如使用Object的wait方法或者Thread的join方法，或者是等待java.util.concurrent中的Lock或者Condition时，就会出现这种情况（等待状态）</span><br><span class=\"line\">    3、有几个方法有一个超时参数。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>6.对象锁和类锁</li>\n</ul>\n<p>1.对象锁：对象锁指的是多个线程使用同一个实例(两种形式：代码块形式和方法形式)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (this) &#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处形式实际上隐形的使用了this这个实例</span><br><span class=\"line\">public synchronized void method()&#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>2.类锁：类锁指的是多个线程使用类的Class对象（唯一一个对象）（两种形式：静态方法）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static synchronized void method()&#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (Abc.class) &#123;</span><br><span class=\"line\">           ···</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>注：类锁一般用于全局的情况下</p>\n<hr>\n<ul>\n<li>7.synchronized有哪些特性，分别是什么？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可重入性：同一线程的外层函数获得锁以后，内层函数可以直接获取该锁，比如synchronized关键字（本质是由jvm跟踪对象锁加锁的次数，含有一个计时器）</span><br><span class=\"line\">假设synchronized不可重入，当有两个synchronized方法的前提下，同一线程在第一个方法（已获取锁对象）调用第二同步方法时，这个时候，当前方法持有锁，而第二个方法未持有锁，即会造成死锁情况。</span><br><span class=\"line\">不可中断性：锁一旦被占用就无法主动打断持有锁的线程，只能等待锁释放（不同于Lock类，Lock类具有中断和退出性质）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>8.synchronized有哪些缺陷？</li>\n</ul>\n<p>1.效率低：未持有锁的其他线程必须等待锁释放才能去获取临界资源，造成效率低<br>2.不够灵活（读写锁更灵活）：加锁和释放锁的时机单一，每个锁仅有单一的条件（对象），可能是不够的<br>3.无法知道是否成功获取锁<br>注意：以上可以当成Lock的相对缺陷，lock更灵活些是因为lock接口的某些方法，比如设置尝试获取锁trylock和它的参数设置超时时间以及它手动的lock加锁和unlock解锁操作；读写锁更灵活是因为读操作的时候可以不需要锁，写锁由于需要同步数据，所以必须要加入锁机制；掌握lock和synchronized的区别可以更细节的去根据业务场景进行选择</p>\n<hr>\n<h3 id=\"常问面试题\"><a href=\"#常问面试题\" class=\"headerlink\" title=\"常问面试题\"></a>常问面试题</h3><ul>\n<li><p>使用synchronized的注意事项？<br>1、锁对象不能为空（因为锁对象都是在对象里面的，可以参考javap -verpose反编译.class文件展开说monitorenter指令和monitorexit指令）<br>2、作用域不宜过大<br>3、避免死锁</p>\n</li>\n<li><p>如何选择synchronized关键字和Lock接口？<br>1、如果都满足业务需求，可以使用前者，因为代码量少避免出错<br>2、如果需要更灵活利用特性，比如lock的更为手动的灵活控制，就使用lock<br>3、如果有现成的已经实现现成安全的类则优先使用</p>\n</li>\n<li><p>多线程访问同步方法的各种情况<br>1、两个线程同时访问一个对象的同步方法 —— 同步串行（对象锁）<br>2、两个线程同时访问两个对象的同步方法 —— 并行（不同的对象锁）<br>3、两个线程访问的是synchronized静态方法 —— 同步串行（类锁）<br>4、同时访问同步方法和非同步方法 —— 非同步方法不会受到干扰<br>5、访问同一个对象的不同的普通同步方法 —— 同步（因为实际上的对象锁还是this当前实例）<br>6、同时访问静态synchronized和非静态synchroinzed方法 —— 并行（因为静态的同步方法访问类实例，而非静态同步方法访问的是类的Class对象，两个实例不一样，所以不存在竞争，即并行）<br>7、方法抛出异常，会释放锁 —— synchorinzed遇到异常会自动释放锁，而Lock需要trycatch后手动释放锁<br>8、如果多个线程去访问一个被synchronized关键字的方法（这个方法会去调用非synchronized的方法），此时线程是不安全的，因为当调用的方法脱离了synchronized之后，就脱离了该关键字的范围</p>\n</li>\n</ul>"},{"title":"计算机网络之基础知识","toc":true,"date":"2020-01-02T09:12:40.000Z","thumbnail":"/gallery/thumbnails/计算机网络之基础知识.jpg","_content":"#### 出处：https://juejin.im/post/5d896cccf265da03bd055c87#heading-0\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n***\n* **应用层**：应用层的任务是通过应用程序间的交互来完成特定网络应用，互联网中应用层协议有很多比如域名系统DNS，支持万维网应用的HTTP协议等，应用层交互的数据单元称为**报文**。\n* **运输层**：运输层的任务是负责向两台主机的进程之间的通信提供**通用的据传输服务**，应用程序通过该服务传送应用报文。\n* **网络层**：网络层的任务是选择合适的网间路由和交换节点，确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据封装成**分组和包进行传送**，在TCP/IP体系结构中，由于网络层使用IP协议，因此分组也称为IP数据报，简称数据报。\n* **数据链路层**：两台主机之间的数据传输，总是在一段一段的链路上送的，这就需要专门的链路层的协议。在两个相邻节点之间传送数据时，数据链路层会将网络层交下来的IP数据报组装成**帧**，在两个相邻节点之间传送帧。每一帧都包括**数据和必要的控制信息**。在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。\n* **物理层**：物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。\n***\n* **IP地址分类**：指互联网协议地址，是IP地址协议的统一的地址格式，分为A、B、C、D、E五类，ABC是基本类，DE为特殊地址，作为多播和保留使用。每个IP地址包括两个标识码（ID)，即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机有一个主机ID与其对应。\n```\nA-E类地址：\nA：以0开头，第一个字节范围为：0~127\nB：以10开头，第一个字节范围：128~191\nC：以110开头，第一个字节范围：192~223\nD：以1110开头，第一个字节范围为 224~239\nE：以1111开头，保留地址\n```\n***\n* **TCP的主要特点**：\n```\n1.TCP是面向连接的（比如打电话，需要先拨号连接，通话结束后要挂机释放）\n2.每一条TCP都有两个端点，也就是只能一对一，点对点\n3.TCP提供可靠交付的服务，通过TCP连接传送的数据，无差错，不丢失，不重复，并且按顺序到达\n4.TCP提供全双工通信，即通信双方任何时候都能发送数据，因为两个端都设有发送缓存和接收缓存\n5.面向字节流\n```\n* **UDP的主要特点**：\n```\n1.UDP是无连接的\n2.UDP不保证可靠交付\n3.UDP面向报文\n4.UDP没有拥塞控制，因此发送速率不会降低（实时、直播有用）\n5.UDP支持一对一、一对多、多对一和多对多的交互通信\n6.UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短\n```\n***\n* **三次握手**：\n```\n（A向B尝试TCP连接）第一次握手时A向B发送报文发送SYN为1的首部，由于SYN为1时，必须消耗掉一个序号seq（seq=x），A进程就进入同步已发送状态；第二次握手时B收到连接请求报文后，如果同意建立连接，则向A发送确认。这时SYN置为1，ACK置为1，同理也要消耗掉一个seq（seq=y），确认号ack置为x+1，此时B进程进入同步收到状态；第三次握手，A收到B的确认后，还需要告知B已得到B的确认，所以将ACK置为1，确认号ack=y+1，seq置为x+1，ACK可以携带数据。（ACK如果不携带数据，下一个数据报文段的seq就为x+1），这时，TCP连接就建立完成了，A进入已建立连接状态。\n```\n* **为什么两次握手不可以满足？**\n```\n比如A客户进程向B服务器进程发送了连接请求，但是由于网络问题，发送给B的报文延迟了，而在这之前，连接已被释放，B就会误以为这是一次新的连接，假如此时只有两次握手，那么B收到报文后就返回确认，并且与A建立连接，但是实际上A并没有发送实际的请求，这就会导致A与B一直持续连接，B一直等待A发送数据，造成资源浪费。但是如果使用了三次握手，A在实际上并没有建立连接请求的前提下，不会理睬B的确认同步，也不会向A发送数据，B收不到A的确认就不会建立连接。\n```\n* **为什么不使用四次握手？**\n```\n有人可能会说 A 发出第三次握手的信息后在没有接收到 B 的请求就已经进入了连接状态，那如果 A 的这个确认包丢失或者滞留了怎么办？我们需要明白一点，完全可靠的通信协议是不存在的。在经过三次握手之后，客户端和服务端已经可以确认之前的通信状况，都收到了确认信息。所以即便再增加握手次数也不能保证后面的通信完全可靠，所以是没有必要的。\n```\n***\n* **TCP四次挥手**\n```\nTCP四次挥手发生在数据传输结束后，通信双方释放连接的时候，假设此时A客户机进程和B服务器进程处于连接状态。\n第一次握手：A进程向TCP发出连接释放请求，主动关闭TCP连接，将连接释放的控制首部FIN置为1，并消耗一个序号seq=u，等待B的确认。\n第二次握手：B进程收到连接释放报文后立即发出确认，确认号是ack=u+1，将ACK置为1，同时也消耗一个序号seq=v。此时A到B的连接的方向就释放了，但是B到A的连接并没有释放，也就是此时A仍需要等待B发出的连接释放报文段，处于半关闭状态\n第三次握手：若B已经没有向A发送的数据，其应用程序就通知TCP释放连接，这时B的FIN为1，序号为w，确认号ack=u+1。此时还需等待A的确认\n第四次握手：A在收到B的释放连接报文后，必须响应给B确认，即将ACk置为1，确认号ack=w+1，而序号seq为u+1，进入时间等待状态。注意，此时TCP仍没有释放，必须经过时间等待计时器设置的时间2MSL（MSL：最长报文寿命）后，A才能进入CLOSED状态，然后撤销传输控制块，结束这次TCP连接。当然B一旦接受到A的确认就立即进入CLOSED状态，然后撤销传输控制块。\n注意：第四次握手中，B结束TCP的连接要早于A\n```\n***\n* **为什么第四次挥手要等待2MSL的时间？**\n```\n为了保证第四次握手最后一个ACK报文能够到达B。\n因为B传最后一个ACK报文的时候，ACK报文可能丢失，如果不经过2MSL（超时+1MSL的传输），B收不到这个报文段，会重新传一次FIN+ACK报文给A，而此时A已经释放了，A就得不到B对A的确认报文，A就不会重新发送ACK报文段给B，B就会无法释放。\n```\n***\n* **四次挥手中为什么第二次和第三次无法合并？**\n```\n因为第二次握手中，客户端不会再向服务端请求任何数据，但是服务端可能还在向客户端发送数据（可能是客户端上一次请求的资源还没有发送完毕），所以此时服务端会等待把之前的数据传输完毕后再发送关闭请求\n```\n***\n* **保活计时器的作用**\n场景：客户端与服务端已建立了TCP连接，但是此时客户机已经故障，服务端却不知情，就会白白等待下去，浪费资源，这时候就需要保活计时器\n作用：服务端每收到一次客户端的数据，就会**重新设置保活计时器的时间，一般为两个小时**。若两个小时都没有收到客户端发送的数据，服务端就会发送一个**探测报文**，以后每隔75秒发送一次。若10个探测报文仍无法收到客户端的响应，服务端就认为客户端出了故障，就关闭这个连接。\n***\n* **TCP是如何保证可靠传输的？**\n1. 数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时 TCP 发送数据端超时后会重发数据；2. 对失序数据包重排序：既然 TCP 报文段作为 IP 数据报来传输，而 IP 数据报的到达可能会失序，因此 TCP 报文段的到达也可能会失序。TCP 将对失序数据进行重新排序，然后才交给应用层；\n3. 丢弃重复数据：对于重复数据，能够丢弃重复数据；\n4. 应答机制：当 TCP 收到发自 TCP 连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；\n5. 超时重发：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；\n6. 流量控制：TCP 连接的每一方都有固定大小的缓冲空间。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP 使用的流量控制协议是可变大小的滑动窗口协议。\n***\n* **什么是粘包？**\n```\n如果客户端不断向服务端发送数据包，服务端接受的数据会出现两个包粘在一起的情况。\n1.TCP是面向字节流的，虽然应用层和TCP之间的数据交互是大小不等的数据包，但是TCP吧这些数据块仍看成一连串无结构的字节流，没有边界。\n2.从TCP的帧结构可以看出来，TCP的首部没有表示数据长度的字段。\n由此可以从上面两点可以知道，使用TCP传输数据时，才有粘包和拆包现象的发生的可能性，一个数据包中包含了发送端发送的两个数据包的信息，称为粘包。\n接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么是多出来一块，这种情况就是发生了粘包和拆包。粘包和拆包的问题导致服务端在处理的时候非常困难，因为无法区分一个完整的数据包。\n```\n***\n* **TCP黏包是怎么产生的？**\n1.发送端产生粘包：\n采用TCP协议时一般都是处于长连接的状态下（一次连接发一次数据不存在粘包），当发送的数据包过于的小时，TCP协议默认会使用Nagle算法，将这些较小的数据包进行合并发送；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。\n2.接收端产生粘包：\n接收端接受数据在网络层模型自下向上，所以数据被运输层的TCP协议放置接收缓冲区，接下来应用层调用函数来从缓冲区取数据，但是并不能保证函数能及时的将缓冲区的数据拿出来，而下一个数据又到来的时候并有一部分放入了缓冲区末尾，造成一个粘包。**（放数据的速度>取数据的速度）**\n***\n* **如何解决粘包和拆包？**\n```\n1.特殊字符控制\n2.在包头首部添加数据包的长度\n如果使用netty的话，就会使用专门的编码器和解码器解决粘包和拆包的问题\ntips：UDP没有粘包问题，因为是面向报文的，但是会丢包和乱序，不完成的包是不会有的，收到的都是正确的包。传送的数据单位协议UDP报文或用户数据报，发送的时候既不会合并，也不拆分。\n```\n***\n* **forward和redirect的区别？**\n1.直接转发（forward）：客户端和浏览器只发出一次请求，Servlet、Html、Jsp或其他信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。\n2.间接转发（redirect）：实际上的两次http请求，服务器端响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。\n![avatar](/articalPic/6.jpg)\n\n***\n* **GET和POST的区别**\n本质区别：GET只是一次HTTP请求，POST先发请求头再发请求体，实际上是再次请求。\n```\n1.GET一般用来获取服务器资源（幂等性），POST请求一般用来更新服务器资源\n2.GET安全性低于POST，因为它会将数据以明文的形式展现在URL上，而POST请求参数被包装到请求体内\n3.GET请求的长度受限于浏览器或服务器对URL长度的限制，而POST则请求没有大小限制\n```\n***\n* **在浏览器输入URL地址到显示主页的请求过程**\n```\n1.DNS解析：通过DNS解析获取域名对应的IP地址\n2.TCP连接：浏览器向服务器请求建立连接，三次握手\n3.发送HTTP请求：TCP连接建立后，浏览器向服务器发送HTTP请求\n4.服务器处理请求并返回HTTP报文：服务器接收到这个请求，根据路径和参数映射到指定的处理器进行处理，并将处理结果及相应的视图返回给浏览器\n5.浏览器解析渲染页面：浏览器解析并渲染页面\n6.连接结束（四次挥手）\n```\n***\n* **谈下你对 HTTP 长连接和短连接的理解？分别应用于哪些场景？**\n在 HTTP/1.0 中默认使用短连接。也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如：JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 HTTP 会话。而从 HTTP/1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码\n```\nConnection:keep-alive\n```\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如：Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n***\n","source":"_posts/计算机网络.md","raw":"---\ntitle: 计算机网络之基础知识\ntoc: true\ndate: 2020-01-02 17:12:40\nthumbnail: /gallery/thumbnails/计算机网络之基础知识.jpg\ntags: 计算机网络\ncategories: 笔记\n---\n#### 出处：https://juejin.im/post/5d896cccf265da03bd055c87#heading-0\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n***\n* **应用层**：应用层的任务是通过应用程序间的交互来完成特定网络应用，互联网中应用层协议有很多比如域名系统DNS，支持万维网应用的HTTP协议等，应用层交互的数据单元称为**报文**。\n* **运输层**：运输层的任务是负责向两台主机的进程之间的通信提供**通用的据传输服务**，应用程序通过该服务传送应用报文。\n* **网络层**：网络层的任务是选择合适的网间路由和交换节点，确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据封装成**分组和包进行传送**，在TCP/IP体系结构中，由于网络层使用IP协议，因此分组也称为IP数据报，简称数据报。\n* **数据链路层**：两台主机之间的数据传输，总是在一段一段的链路上送的，这就需要专门的链路层的协议。在两个相邻节点之间传送数据时，数据链路层会将网络层交下来的IP数据报组装成**帧**，在两个相邻节点之间传送帧。每一帧都包括**数据和必要的控制信息**。在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。\n* **物理层**：物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。\n***\n* **IP地址分类**：指互联网协议地址，是IP地址协议的统一的地址格式，分为A、B、C、D、E五类，ABC是基本类，DE为特殊地址，作为多播和保留使用。每个IP地址包括两个标识码（ID)，即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机有一个主机ID与其对应。\n```\nA-E类地址：\nA：以0开头，第一个字节范围为：0~127\nB：以10开头，第一个字节范围：128~191\nC：以110开头，第一个字节范围：192~223\nD：以1110开头，第一个字节范围为 224~239\nE：以1111开头，保留地址\n```\n***\n* **TCP的主要特点**：\n```\n1.TCP是面向连接的（比如打电话，需要先拨号连接，通话结束后要挂机释放）\n2.每一条TCP都有两个端点，也就是只能一对一，点对点\n3.TCP提供可靠交付的服务，通过TCP连接传送的数据，无差错，不丢失，不重复，并且按顺序到达\n4.TCP提供全双工通信，即通信双方任何时候都能发送数据，因为两个端都设有发送缓存和接收缓存\n5.面向字节流\n```\n* **UDP的主要特点**：\n```\n1.UDP是无连接的\n2.UDP不保证可靠交付\n3.UDP面向报文\n4.UDP没有拥塞控制，因此发送速率不会降低（实时、直播有用）\n5.UDP支持一对一、一对多、多对一和多对多的交互通信\n6.UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短\n```\n***\n* **三次握手**：\n```\n（A向B尝试TCP连接）第一次握手时A向B发送报文发送SYN为1的首部，由于SYN为1时，必须消耗掉一个序号seq（seq=x），A进程就进入同步已发送状态；第二次握手时B收到连接请求报文后，如果同意建立连接，则向A发送确认。这时SYN置为1，ACK置为1，同理也要消耗掉一个seq（seq=y），确认号ack置为x+1，此时B进程进入同步收到状态；第三次握手，A收到B的确认后，还需要告知B已得到B的确认，所以将ACK置为1，确认号ack=y+1，seq置为x+1，ACK可以携带数据。（ACK如果不携带数据，下一个数据报文段的seq就为x+1），这时，TCP连接就建立完成了，A进入已建立连接状态。\n```\n* **为什么两次握手不可以满足？**\n```\n比如A客户进程向B服务器进程发送了连接请求，但是由于网络问题，发送给B的报文延迟了，而在这之前，连接已被释放，B就会误以为这是一次新的连接，假如此时只有两次握手，那么B收到报文后就返回确认，并且与A建立连接，但是实际上A并没有发送实际的请求，这就会导致A与B一直持续连接，B一直等待A发送数据，造成资源浪费。但是如果使用了三次握手，A在实际上并没有建立连接请求的前提下，不会理睬B的确认同步，也不会向A发送数据，B收不到A的确认就不会建立连接。\n```\n* **为什么不使用四次握手？**\n```\n有人可能会说 A 发出第三次握手的信息后在没有接收到 B 的请求就已经进入了连接状态，那如果 A 的这个确认包丢失或者滞留了怎么办？我们需要明白一点，完全可靠的通信协议是不存在的。在经过三次握手之后，客户端和服务端已经可以确认之前的通信状况，都收到了确认信息。所以即便再增加握手次数也不能保证后面的通信完全可靠，所以是没有必要的。\n```\n***\n* **TCP四次挥手**\n```\nTCP四次挥手发生在数据传输结束后，通信双方释放连接的时候，假设此时A客户机进程和B服务器进程处于连接状态。\n第一次握手：A进程向TCP发出连接释放请求，主动关闭TCP连接，将连接释放的控制首部FIN置为1，并消耗一个序号seq=u，等待B的确认。\n第二次握手：B进程收到连接释放报文后立即发出确认，确认号是ack=u+1，将ACK置为1，同时也消耗一个序号seq=v。此时A到B的连接的方向就释放了，但是B到A的连接并没有释放，也就是此时A仍需要等待B发出的连接释放报文段，处于半关闭状态\n第三次握手：若B已经没有向A发送的数据，其应用程序就通知TCP释放连接，这时B的FIN为1，序号为w，确认号ack=u+1。此时还需等待A的确认\n第四次握手：A在收到B的释放连接报文后，必须响应给B确认，即将ACk置为1，确认号ack=w+1，而序号seq为u+1，进入时间等待状态。注意，此时TCP仍没有释放，必须经过时间等待计时器设置的时间2MSL（MSL：最长报文寿命）后，A才能进入CLOSED状态，然后撤销传输控制块，结束这次TCP连接。当然B一旦接受到A的确认就立即进入CLOSED状态，然后撤销传输控制块。\n注意：第四次握手中，B结束TCP的连接要早于A\n```\n***\n* **为什么第四次挥手要等待2MSL的时间？**\n```\n为了保证第四次握手最后一个ACK报文能够到达B。\n因为B传最后一个ACK报文的时候，ACK报文可能丢失，如果不经过2MSL（超时+1MSL的传输），B收不到这个报文段，会重新传一次FIN+ACK报文给A，而此时A已经释放了，A就得不到B对A的确认报文，A就不会重新发送ACK报文段给B，B就会无法释放。\n```\n***\n* **四次挥手中为什么第二次和第三次无法合并？**\n```\n因为第二次握手中，客户端不会再向服务端请求任何数据，但是服务端可能还在向客户端发送数据（可能是客户端上一次请求的资源还没有发送完毕），所以此时服务端会等待把之前的数据传输完毕后再发送关闭请求\n```\n***\n* **保活计时器的作用**\n场景：客户端与服务端已建立了TCP连接，但是此时客户机已经故障，服务端却不知情，就会白白等待下去，浪费资源，这时候就需要保活计时器\n作用：服务端每收到一次客户端的数据，就会**重新设置保活计时器的时间，一般为两个小时**。若两个小时都没有收到客户端发送的数据，服务端就会发送一个**探测报文**，以后每隔75秒发送一次。若10个探测报文仍无法收到客户端的响应，服务端就认为客户端出了故障，就关闭这个连接。\n***\n* **TCP是如何保证可靠传输的？**\n1. 数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时 TCP 发送数据端超时后会重发数据；2. 对失序数据包重排序：既然 TCP 报文段作为 IP 数据报来传输，而 IP 数据报的到达可能会失序，因此 TCP 报文段的到达也可能会失序。TCP 将对失序数据进行重新排序，然后才交给应用层；\n3. 丢弃重复数据：对于重复数据，能够丢弃重复数据；\n4. 应答机制：当 TCP 收到发自 TCP 连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；\n5. 超时重发：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；\n6. 流量控制：TCP 连接的每一方都有固定大小的缓冲空间。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP 使用的流量控制协议是可变大小的滑动窗口协议。\n***\n* **什么是粘包？**\n```\n如果客户端不断向服务端发送数据包，服务端接受的数据会出现两个包粘在一起的情况。\n1.TCP是面向字节流的，虽然应用层和TCP之间的数据交互是大小不等的数据包，但是TCP吧这些数据块仍看成一连串无结构的字节流，没有边界。\n2.从TCP的帧结构可以看出来，TCP的首部没有表示数据长度的字段。\n由此可以从上面两点可以知道，使用TCP传输数据时，才有粘包和拆包现象的发生的可能性，一个数据包中包含了发送端发送的两个数据包的信息，称为粘包。\n接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么是多出来一块，这种情况就是发生了粘包和拆包。粘包和拆包的问题导致服务端在处理的时候非常困难，因为无法区分一个完整的数据包。\n```\n***\n* **TCP黏包是怎么产生的？**\n1.发送端产生粘包：\n采用TCP协议时一般都是处于长连接的状态下（一次连接发一次数据不存在粘包），当发送的数据包过于的小时，TCP协议默认会使用Nagle算法，将这些较小的数据包进行合并发送；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。\n2.接收端产生粘包：\n接收端接受数据在网络层模型自下向上，所以数据被运输层的TCP协议放置接收缓冲区，接下来应用层调用函数来从缓冲区取数据，但是并不能保证函数能及时的将缓冲区的数据拿出来，而下一个数据又到来的时候并有一部分放入了缓冲区末尾，造成一个粘包。**（放数据的速度>取数据的速度）**\n***\n* **如何解决粘包和拆包？**\n```\n1.特殊字符控制\n2.在包头首部添加数据包的长度\n如果使用netty的话，就会使用专门的编码器和解码器解决粘包和拆包的问题\ntips：UDP没有粘包问题，因为是面向报文的，但是会丢包和乱序，不完成的包是不会有的，收到的都是正确的包。传送的数据单位协议UDP报文或用户数据报，发送的时候既不会合并，也不拆分。\n```\n***\n* **forward和redirect的区别？**\n1.直接转发（forward）：客户端和浏览器只发出一次请求，Servlet、Html、Jsp或其他信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。\n2.间接转发（redirect）：实际上的两次http请求，服务器端响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。\n![avatar](/articalPic/6.jpg)\n\n***\n* **GET和POST的区别**\n本质区别：GET只是一次HTTP请求，POST先发请求头再发请求体，实际上是再次请求。\n```\n1.GET一般用来获取服务器资源（幂等性），POST请求一般用来更新服务器资源\n2.GET安全性低于POST，因为它会将数据以明文的形式展现在URL上，而POST请求参数被包装到请求体内\n3.GET请求的长度受限于浏览器或服务器对URL长度的限制，而POST则请求没有大小限制\n```\n***\n* **在浏览器输入URL地址到显示主页的请求过程**\n```\n1.DNS解析：通过DNS解析获取域名对应的IP地址\n2.TCP连接：浏览器向服务器请求建立连接，三次握手\n3.发送HTTP请求：TCP连接建立后，浏览器向服务器发送HTTP请求\n4.服务器处理请求并返回HTTP报文：服务器接收到这个请求，根据路径和参数映射到指定的处理器进行处理，并将处理结果及相应的视图返回给浏览器\n5.浏览器解析渲染页面：浏览器解析并渲染页面\n6.连接结束（四次挥手）\n```\n***\n* **谈下你对 HTTP 长连接和短连接的理解？分别应用于哪些场景？**\n在 HTTP/1.0 中默认使用短连接。也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如：JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 HTTP 会话。而从 HTTP/1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码\n```\nConnection:keep-alive\n```\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如：Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\n***\n","slug":"计算机网络","published":1,"updated":"2020-01-02T12:13:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck56oooav000bejup9kpr0rc5","content":"<h4 id=\"出处：https-juejin-im-post-5d896cccf265da03bd055c87-heading-0\"><a href=\"#出处：https-juejin-im-post-5d896cccf265da03bd055c87-heading-0\" class=\"headerlink\" title=\"出处：https://juejin.im/post/5d896cccf265da03bd055c87#heading-0\"></a>出处：<a href=\"https://juejin.im/post/5d896cccf265da03bd055c87#heading-0\">https://juejin.im/post/5d896cccf265da03bd055c87#heading-0</a></h4><h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4><a id=\"more\"></a>\n<hr>\n<ul>\n<li><strong>应用层</strong>：应用层的任务是通过应用程序间的交互来完成特定网络应用，互联网中应用层协议有很多比如域名系统DNS，支持万维网应用的HTTP协议等，应用层交互的数据单元称为<strong>报文</strong>。</li>\n<li><strong>运输层</strong>：运输层的任务是负责向两台主机的进程之间的通信提供<strong>通用的据传输服务</strong>，应用程序通过该服务传送应用报文。</li>\n<li><strong>网络层</strong>：网络层的任务是选择合适的网间路由和交换节点，确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据封装成<strong>分组和包进行传送</strong>，在TCP/IP体系结构中，由于网络层使用IP协议，因此分组也称为IP数据报，简称数据报。</li>\n<li><strong>数据链路层</strong>：两台主机之间的数据传输，总是在一段一段的链路上送的，这就需要专门的链路层的协议。在两个相邻节点之间传送数据时，数据链路层会将网络层交下来的IP数据报组装成<strong>帧</strong>，在两个相邻节点之间传送帧。每一帧都包括<strong>数据和必要的控制信息</strong>。在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。</li>\n<li><strong>物理层</strong>：物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>IP地址分类</strong>：指互联网协议地址，是IP地址协议的统一的地址格式，分为A、B、C、D、E五类，ABC是基本类，DE为特殊地址，作为多播和保留使用。每个IP地址包括两个标识码（ID)，即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机有一个主机ID与其对应。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A-E类地址：</span><br><span class=\"line\">A：以0开头，第一个字节范围为：0~127</span><br><span class=\"line\">B：以10开头，第一个字节范围：128~191</span><br><span class=\"line\">C：以110开头，第一个字节范围：192~223</span><br><span class=\"line\">D：以1110开头，第一个字节范围为 224~239</span><br><span class=\"line\">E：以1111开头，保留地址</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP的主要特点</strong>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.TCP是面向连接的（比如打电话，需要先拨号连接，通话结束后要挂机释放）</span><br><span class=\"line\">2.每一条TCP都有两个端点，也就是只能一对一，点对点</span><br><span class=\"line\">3.TCP提供可靠交付的服务，通过TCP连接传送的数据，无差错，不丢失，不重复，并且按顺序到达</span><br><span class=\"line\">4.TCP提供全双工通信，即通信双方任何时候都能发送数据，因为两个端都设有发送缓存和接收缓存</span><br><span class=\"line\">5.面向字节流</span><br></pre></td></tr></table></figure></li>\n<li><strong>UDP的主要特点</strong>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.UDP是无连接的</span><br><span class=\"line\">2.UDP不保证可靠交付</span><br><span class=\"line\">3.UDP面向报文</span><br><span class=\"line\">4.UDP没有拥塞控制，因此发送速率不会降低（实时、直播有用）</span><br><span class=\"line\">5.UDP支持一对一、一对多、多对一和多对多的交互通信</span><br><span class=\"line\">6.UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>三次握手</strong>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（A向B尝试TCP连接）第一次握手时A向B发送报文发送SYN为1的首部，由于SYN为1时，必须消耗掉一个序号seq（seq&#x3D;x），A进程就进入同步已发送状态；第二次握手时B收到连接请求报文后，如果同意建立连接，则向A发送确认。这时SYN置为1，ACK置为1，同理也要消耗掉一个seq（seq&#x3D;y），确认号ack置为x+1，此时B进程进入同步收到状态；第三次握手，A收到B的确认后，还需要告知B已得到B的确认，所以将ACK置为1，确认号ack&#x3D;y+1，seq置为x+1，ACK可以携带数据。（ACK如果不携带数据，下一个数据报文段的seq就为x+1），这时，TCP连接就建立完成了，A进入已建立连接状态。</span><br></pre></td></tr></table></figure></li>\n<li><strong>为什么两次握手不可以满足？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如A客户进程向B服务器进程发送了连接请求，但是由于网络问题，发送给B的报文延迟了，而在这之前，连接已被释放，B就会误以为这是一次新的连接，假如此时只有两次握手，那么B收到报文后就返回确认，并且与A建立连接，但是实际上A并没有发送实际的请求，这就会导致A与B一直持续连接，B一直等待A发送数据，造成资源浪费。但是如果使用了三次握手，A在实际上并没有建立连接请求的前提下，不会理睬B的确认同步，也不会向A发送数据，B收不到A的确认就不会建立连接。</span><br></pre></td></tr></table></figure></li>\n<li><strong>为什么不使用四次握手？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有人可能会说 A 发出第三次握手的信息后在没有接收到 B 的请求就已经进入了连接状态，那如果 A 的这个确认包丢失或者滞留了怎么办？我们需要明白一点，完全可靠的通信协议是不存在的。在经过三次握手之后，客户端和服务端已经可以确认之前的通信状况，都收到了确认信息。所以即便再增加握手次数也不能保证后面的通信完全可靠，所以是没有必要的。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP四次挥手</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCP四次挥手发生在数据传输结束后，通信双方释放连接的时候，假设此时A客户机进程和B服务器进程处于连接状态。</span><br><span class=\"line\">第一次握手：A进程向TCP发出连接释放请求，主动关闭TCP连接，将连接释放的控制首部FIN置为1，并消耗一个序号seq&#x3D;u，等待B的确认。</span><br><span class=\"line\">第二次握手：B进程收到连接释放报文后立即发出确认，确认号是ack&#x3D;u+1，将ACK置为1，同时也消耗一个序号seq&#x3D;v。此时A到B的连接的方向就释放了，但是B到A的连接并没有释放，也就是此时A仍需要等待B发出的连接释放报文段，处于半关闭状态</span><br><span class=\"line\">第三次握手：若B已经没有向A发送的数据，其应用程序就通知TCP释放连接，这时B的FIN为1，序号为w，确认号ack&#x3D;u+1。此时还需等待A的确认</span><br><span class=\"line\">第四次握手：A在收到B的释放连接报文后，必须响应给B确认，即将ACk置为1，确认号ack&#x3D;w+1，而序号seq为u+1，进入时间等待状态。注意，此时TCP仍没有释放，必须经过时间等待计时器设置的时间2MSL（MSL：最长报文寿命）后，A才能进入CLOSED状态，然后撤销传输控制块，结束这次TCP连接。当然B一旦接受到A的确认就立即进入CLOSED状态，然后撤销传输控制块。</span><br><span class=\"line\">注意：第四次握手中，B结束TCP的连接要早于A</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>为什么第四次挥手要等待2MSL的时间？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了保证第四次握手最后一个ACK报文能够到达B。</span><br><span class=\"line\">因为B传最后一个ACK报文的时候，ACK报文可能丢失，如果不经过2MSL（超时+1MSL的传输），B收不到这个报文段，会重新传一次FIN+ACK报文给A，而此时A已经释放了，A就得不到B对A的确认报文，A就不会重新发送ACK报文段给B，B就会无法释放。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>四次挥手中为什么第二次和第三次无法合并？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为第二次握手中，客户端不会再向服务端请求任何数据，但是服务端可能还在向客户端发送数据（可能是客户端上一次请求的资源还没有发送完毕），所以此时服务端会等待把之前的数据传输完毕后再发送关闭请求</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>保活计时器的作用</strong><br>场景：客户端与服务端已建立了TCP连接，但是此时客户机已经故障，服务端却不知情，就会白白等待下去，浪费资源，这时候就需要保活计时器<br>作用：服务端每收到一次客户端的数据，就会<strong>重新设置保活计时器的时间，一般为两个小时</strong>。若两个小时都没有收到客户端发送的数据，服务端就会发送一个<strong>探测报文</strong>，以后每隔75秒发送一次。若10个探测报文仍无法收到客户端的响应，服务端就认为客户端出了故障，就关闭这个连接。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP是如何保证可靠传输的？</strong></li>\n</ul>\n<ol>\n<li>数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时 TCP 发送数据端超时后会重发数据；2. 对失序数据包重排序：既然 TCP 报文段作为 IP 数据报来传输，而 IP 数据报的到达可能会失序，因此 TCP 报文段的到达也可能会失序。TCP 将对失序数据进行重新排序，然后才交给应用层；</li>\n<li>丢弃重复数据：对于重复数据，能够丢弃重复数据；</li>\n<li>应答机制：当 TCP 收到发自 TCP 连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</li>\n<li>超时重发：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</li>\n<li>流量控制：TCP 连接的每一方都有固定大小的缓冲空间。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP 使用的流量控制协议是可变大小的滑动窗口协议。</li>\n</ol>\n<hr>\n<ul>\n<li><strong>什么是粘包？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果客户端不断向服务端发送数据包，服务端接受的数据会出现两个包粘在一起的情况。</span><br><span class=\"line\">1.TCP是面向字节流的，虽然应用层和TCP之间的数据交互是大小不等的数据包，但是TCP吧这些数据块仍看成一连串无结构的字节流，没有边界。</span><br><span class=\"line\">2.从TCP的帧结构可以看出来，TCP的首部没有表示数据长度的字段。</span><br><span class=\"line\">由此可以从上面两点可以知道，使用TCP传输数据时，才有粘包和拆包现象的发生的可能性，一个数据包中包含了发送端发送的两个数据包的信息，称为粘包。</span><br><span class=\"line\">接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么是多出来一块，这种情况就是发生了粘包和拆包。粘包和拆包的问题导致服务端在处理的时候非常困难，因为无法区分一个完整的数据包。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP黏包是怎么产生的？</strong></li>\n</ul>\n<p>1.发送端产生粘包：<br>采用TCP协议时一般都是处于长连接的状态下（一次连接发一次数据不存在粘包），当发送的数据包过于的小时，TCP协议默认会使用Nagle算法，将这些较小的数据包进行合并发送；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。<br>2.接收端产生粘包：<br>接收端接受数据在网络层模型自下向上，所以数据被运输层的TCP协议放置接收缓冲区，接下来应用层调用函数来从缓冲区取数据，但是并不能保证函数能及时的将缓冲区的数据拿出来，而下一个数据又到来的时候并有一部分放入了缓冲区末尾，造成一个粘包。<strong>（放数据的速度&gt;取数据的速度）</strong></p>\n<hr>\n<ul>\n<li><strong>如何解决粘包和拆包？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.特殊字符控制</span><br><span class=\"line\">2.在包头首部添加数据包的长度</span><br><span class=\"line\">如果使用netty的话，就会使用专门的编码器和解码器解决粘包和拆包的问题</span><br><span class=\"line\">tips：UDP没有粘包问题，因为是面向报文的，但是会丢包和乱序，不完成的包是不会有的，收到的都是正确的包。传送的数据单位协议UDP报文或用户数据报，发送的时候既不会合并，也不拆分。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>forward和redirect的区别？</strong></li>\n</ul>\n<p>1.直接转发（forward）：客户端和浏览器只发出一次请求，Servlet、Html、Jsp或其他信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。<br>2.间接转发（redirect）：实际上的两次http请求，服务器端响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。<br><img src=\"/articalPic/6.jpg\" alt=\"avatar\"></p>\n<hr>\n<ul>\n<li><strong>GET和POST的区别</strong><br>本质区别：GET只是一次HTTP请求，POST先发请求头再发请求体，实际上是再次请求。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.GET一般用来获取服务器资源（幂等性），POST请求一般用来更新服务器资源</span><br><span class=\"line\">2.GET安全性低于POST，因为它会将数据以明文的形式展现在URL上，而POST请求参数被包装到请求体内</span><br><span class=\"line\">3.GET请求的长度受限于浏览器或服务器对URL长度的限制，而POST则请求没有大小限制</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>在浏览器输入URL地址到显示主页的请求过程</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.DNS解析：通过DNS解析获取域名对应的IP地址</span><br><span class=\"line\">2.TCP连接：浏览器向服务器请求建立连接，三次握手</span><br><span class=\"line\">3.发送HTTP请求：TCP连接建立后，浏览器向服务器发送HTTP请求</span><br><span class=\"line\">4.服务器处理请求并返回HTTP报文：服务器接收到这个请求，根据路径和参数映射到指定的处理器进行处理，并将处理结果及相应的视图返回给浏览器</span><br><span class=\"line\">5.浏览器解析渲染页面：浏览器解析并渲染页面</span><br><span class=\"line\">6.连接结束（四次挥手）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>谈下你对 HTTP 长连接和短连接的理解？分别应用于哪些场景？</strong><br>在 HTTP/1.0 中默认使用短连接。也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如：JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 HTTP 会话。而从 HTTP/1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如：Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h4 id=\"出处：https-juejin-im-post-5d896cccf265da03bd055c87-heading-0\"><a href=\"#出处：https-juejin-im-post-5d896cccf265da03bd055c87-heading-0\" class=\"headerlink\" title=\"出处：https://juejin.im/post/5d896cccf265da03bd055c87#heading-0\"></a>出处：<a href=\"https://juejin.im/post/5d896cccf265da03bd055c87#heading-0\">https://juejin.im/post/5d896cccf265da03bd055c87#heading-0</a></h4><h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4>","more":"<hr>\n<ul>\n<li><strong>应用层</strong>：应用层的任务是通过应用程序间的交互来完成特定网络应用，互联网中应用层协议有很多比如域名系统DNS，支持万维网应用的HTTP协议等，应用层交互的数据单元称为<strong>报文</strong>。</li>\n<li><strong>运输层</strong>：运输层的任务是负责向两台主机的进程之间的通信提供<strong>通用的据传输服务</strong>，应用程序通过该服务传送应用报文。</li>\n<li><strong>网络层</strong>：网络层的任务是选择合适的网间路由和交换节点，确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据封装成<strong>分组和包进行传送</strong>，在TCP/IP体系结构中，由于网络层使用IP协议，因此分组也称为IP数据报，简称数据报。</li>\n<li><strong>数据链路层</strong>：两台主机之间的数据传输，总是在一段一段的链路上送的，这就需要专门的链路层的协议。在两个相邻节点之间传送数据时，数据链路层会将网络层交下来的IP数据报组装成<strong>帧</strong>，在两个相邻节点之间传送帧。每一帧都包括<strong>数据和必要的控制信息</strong>。在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。</li>\n<li><strong>物理层</strong>：物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>IP地址分类</strong>：指互联网协议地址，是IP地址协议的统一的地址格式，分为A、B、C、D、E五类，ABC是基本类，DE为特殊地址，作为多播和保留使用。每个IP地址包括两个标识码（ID)，即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机有一个主机ID与其对应。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A-E类地址：</span><br><span class=\"line\">A：以0开头，第一个字节范围为：0~127</span><br><span class=\"line\">B：以10开头，第一个字节范围：128~191</span><br><span class=\"line\">C：以110开头，第一个字节范围：192~223</span><br><span class=\"line\">D：以1110开头，第一个字节范围为 224~239</span><br><span class=\"line\">E：以1111开头，保留地址</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP的主要特点</strong>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.TCP是面向连接的（比如打电话，需要先拨号连接，通话结束后要挂机释放）</span><br><span class=\"line\">2.每一条TCP都有两个端点，也就是只能一对一，点对点</span><br><span class=\"line\">3.TCP提供可靠交付的服务，通过TCP连接传送的数据，无差错，不丢失，不重复，并且按顺序到达</span><br><span class=\"line\">4.TCP提供全双工通信，即通信双方任何时候都能发送数据，因为两个端都设有发送缓存和接收缓存</span><br><span class=\"line\">5.面向字节流</span><br></pre></td></tr></table></figure></li>\n<li><strong>UDP的主要特点</strong>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.UDP是无连接的</span><br><span class=\"line\">2.UDP不保证可靠交付</span><br><span class=\"line\">3.UDP面向报文</span><br><span class=\"line\">4.UDP没有拥塞控制，因此发送速率不会降低（实时、直播有用）</span><br><span class=\"line\">5.UDP支持一对一、一对多、多对一和多对多的交互通信</span><br><span class=\"line\">6.UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>三次握手</strong>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（A向B尝试TCP连接）第一次握手时A向B发送报文发送SYN为1的首部，由于SYN为1时，必须消耗掉一个序号seq（seq&#x3D;x），A进程就进入同步已发送状态；第二次握手时B收到连接请求报文后，如果同意建立连接，则向A发送确认。这时SYN置为1，ACK置为1，同理也要消耗掉一个seq（seq&#x3D;y），确认号ack置为x+1，此时B进程进入同步收到状态；第三次握手，A收到B的确认后，还需要告知B已得到B的确认，所以将ACK置为1，确认号ack&#x3D;y+1，seq置为x+1，ACK可以携带数据。（ACK如果不携带数据，下一个数据报文段的seq就为x+1），这时，TCP连接就建立完成了，A进入已建立连接状态。</span><br></pre></td></tr></table></figure></li>\n<li><strong>为什么两次握手不可以满足？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如A客户进程向B服务器进程发送了连接请求，但是由于网络问题，发送给B的报文延迟了，而在这之前，连接已被释放，B就会误以为这是一次新的连接，假如此时只有两次握手，那么B收到报文后就返回确认，并且与A建立连接，但是实际上A并没有发送实际的请求，这就会导致A与B一直持续连接，B一直等待A发送数据，造成资源浪费。但是如果使用了三次握手，A在实际上并没有建立连接请求的前提下，不会理睬B的确认同步，也不会向A发送数据，B收不到A的确认就不会建立连接。</span><br></pre></td></tr></table></figure></li>\n<li><strong>为什么不使用四次握手？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有人可能会说 A 发出第三次握手的信息后在没有接收到 B 的请求就已经进入了连接状态，那如果 A 的这个确认包丢失或者滞留了怎么办？我们需要明白一点，完全可靠的通信协议是不存在的。在经过三次握手之后，客户端和服务端已经可以确认之前的通信状况，都收到了确认信息。所以即便再增加握手次数也不能保证后面的通信完全可靠，所以是没有必要的。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP四次挥手</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCP四次挥手发生在数据传输结束后，通信双方释放连接的时候，假设此时A客户机进程和B服务器进程处于连接状态。</span><br><span class=\"line\">第一次握手：A进程向TCP发出连接释放请求，主动关闭TCP连接，将连接释放的控制首部FIN置为1，并消耗一个序号seq&#x3D;u，等待B的确认。</span><br><span class=\"line\">第二次握手：B进程收到连接释放报文后立即发出确认，确认号是ack&#x3D;u+1，将ACK置为1，同时也消耗一个序号seq&#x3D;v。此时A到B的连接的方向就释放了，但是B到A的连接并没有释放，也就是此时A仍需要等待B发出的连接释放报文段，处于半关闭状态</span><br><span class=\"line\">第三次握手：若B已经没有向A发送的数据，其应用程序就通知TCP释放连接，这时B的FIN为1，序号为w，确认号ack&#x3D;u+1。此时还需等待A的确认</span><br><span class=\"line\">第四次握手：A在收到B的释放连接报文后，必须响应给B确认，即将ACk置为1，确认号ack&#x3D;w+1，而序号seq为u+1，进入时间等待状态。注意，此时TCP仍没有释放，必须经过时间等待计时器设置的时间2MSL（MSL：最长报文寿命）后，A才能进入CLOSED状态，然后撤销传输控制块，结束这次TCP连接。当然B一旦接受到A的确认就立即进入CLOSED状态，然后撤销传输控制块。</span><br><span class=\"line\">注意：第四次握手中，B结束TCP的连接要早于A</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>为什么第四次挥手要等待2MSL的时间？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了保证第四次握手最后一个ACK报文能够到达B。</span><br><span class=\"line\">因为B传最后一个ACK报文的时候，ACK报文可能丢失，如果不经过2MSL（超时+1MSL的传输），B收不到这个报文段，会重新传一次FIN+ACK报文给A，而此时A已经释放了，A就得不到B对A的确认报文，A就不会重新发送ACK报文段给B，B就会无法释放。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>四次挥手中为什么第二次和第三次无法合并？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为第二次握手中，客户端不会再向服务端请求任何数据，但是服务端可能还在向客户端发送数据（可能是客户端上一次请求的资源还没有发送完毕），所以此时服务端会等待把之前的数据传输完毕后再发送关闭请求</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>保活计时器的作用</strong><br>场景：客户端与服务端已建立了TCP连接，但是此时客户机已经故障，服务端却不知情，就会白白等待下去，浪费资源，这时候就需要保活计时器<br>作用：服务端每收到一次客户端的数据，就会<strong>重新设置保活计时器的时间，一般为两个小时</strong>。若两个小时都没有收到客户端发送的数据，服务端就会发送一个<strong>探测报文</strong>，以后每隔75秒发送一次。若10个探测报文仍无法收到客户端的响应，服务端就认为客户端出了故障，就关闭这个连接。</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP是如何保证可靠传输的？</strong></li>\n</ul>\n<ol>\n<li>数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时 TCP 发送数据端超时后会重发数据；2. 对失序数据包重排序：既然 TCP 报文段作为 IP 数据报来传输，而 IP 数据报的到达可能会失序，因此 TCP 报文段的到达也可能会失序。TCP 将对失序数据进行重新排序，然后才交给应用层；</li>\n<li>丢弃重复数据：对于重复数据，能够丢弃重复数据；</li>\n<li>应答机制：当 TCP 收到发自 TCP 连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</li>\n<li>超时重发：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</li>\n<li>流量控制：TCP 连接的每一方都有固定大小的缓冲空间。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP 使用的流量控制协议是可变大小的滑动窗口协议。</li>\n</ol>\n<hr>\n<ul>\n<li><strong>什么是粘包？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果客户端不断向服务端发送数据包，服务端接受的数据会出现两个包粘在一起的情况。</span><br><span class=\"line\">1.TCP是面向字节流的，虽然应用层和TCP之间的数据交互是大小不等的数据包，但是TCP吧这些数据块仍看成一连串无结构的字节流，没有边界。</span><br><span class=\"line\">2.从TCP的帧结构可以看出来，TCP的首部没有表示数据长度的字段。</span><br><span class=\"line\">由此可以从上面两点可以知道，使用TCP传输数据时，才有粘包和拆包现象的发生的可能性，一个数据包中包含了发送端发送的两个数据包的信息，称为粘包。</span><br><span class=\"line\">接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么是多出来一块，这种情况就是发生了粘包和拆包。粘包和拆包的问题导致服务端在处理的时候非常困难，因为无法区分一个完整的数据包。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>TCP黏包是怎么产生的？</strong></li>\n</ul>\n<p>1.发送端产生粘包：<br>采用TCP协议时一般都是处于长连接的状态下（一次连接发一次数据不存在粘包），当发送的数据包过于的小时，TCP协议默认会使用Nagle算法，将这些较小的数据包进行合并发送；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。<br>2.接收端产生粘包：<br>接收端接受数据在网络层模型自下向上，所以数据被运输层的TCP协议放置接收缓冲区，接下来应用层调用函数来从缓冲区取数据，但是并不能保证函数能及时的将缓冲区的数据拿出来，而下一个数据又到来的时候并有一部分放入了缓冲区末尾，造成一个粘包。<strong>（放数据的速度&gt;取数据的速度）</strong></p>\n<hr>\n<ul>\n<li><strong>如何解决粘包和拆包？</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.特殊字符控制</span><br><span class=\"line\">2.在包头首部添加数据包的长度</span><br><span class=\"line\">如果使用netty的话，就会使用专门的编码器和解码器解决粘包和拆包的问题</span><br><span class=\"line\">tips：UDP没有粘包问题，因为是面向报文的，但是会丢包和乱序，不完成的包是不会有的，收到的都是正确的包。传送的数据单位协议UDP报文或用户数据报，发送的时候既不会合并，也不拆分。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>forward和redirect的区别？</strong></li>\n</ul>\n<p>1.直接转发（forward）：客户端和浏览器只发出一次请求，Servlet、Html、Jsp或其他信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。<br>2.间接转发（redirect）：实际上的两次http请求，服务器端响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。<br><img src=\"/articalPic/6.jpg\" alt=\"avatar\"></p>\n<hr>\n<ul>\n<li><strong>GET和POST的区别</strong><br>本质区别：GET只是一次HTTP请求，POST先发请求头再发请求体，实际上是再次请求。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.GET一般用来获取服务器资源（幂等性），POST请求一般用来更新服务器资源</span><br><span class=\"line\">2.GET安全性低于POST，因为它会将数据以明文的形式展现在URL上，而POST请求参数被包装到请求体内</span><br><span class=\"line\">3.GET请求的长度受限于浏览器或服务器对URL长度的限制，而POST则请求没有大小限制</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>在浏览器输入URL地址到显示主页的请求过程</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.DNS解析：通过DNS解析获取域名对应的IP地址</span><br><span class=\"line\">2.TCP连接：浏览器向服务器请求建立连接，三次握手</span><br><span class=\"line\">3.发送HTTP请求：TCP连接建立后，浏览器向服务器发送HTTP请求</span><br><span class=\"line\">4.服务器处理请求并返回HTTP报文：服务器接收到这个请求，根据路径和参数映射到指定的处理器进行处理，并将处理结果及相应的视图返回给浏览器</span><br><span class=\"line\">5.浏览器解析渲染页面：浏览器解析并渲染页面</span><br><span class=\"line\">6.连接结束（四次挥手）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>谈下你对 HTTP 长连接和短连接的理解？分别应用于哪些场景？</strong><br>在 HTTP/1.0 中默认使用短连接。也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如：JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 HTTP 会话。而从 HTTP/1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection:keep-alive</span><br></pre></td></tr></table></figure>\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如：Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</li>\n</ul>\n<hr>"},{"title":"java面试题目 -- 持续更新","toc":true,"date":"2020-01-02T09:40:40.000Z","thumbnail":"/gallery/thumbnails/java面试题目(持续更新).jpeg","_content":"#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n#### ***请简述SpringMVC的工作流程?***\n![avatar](/articalPic/19.png)\n*   用户发起请求到前端控制器（DispatcherServlet），该控制器会过滤出哪些请求可以访问Servlet、哪些不能访问。就是url-pattern的作用，并且会加载springmvc.xml配置文件。\n*   前端控制器会找到处理器映射器（HandlerMapping），通过HandlerMapping完成url到controller映射的组件，简单来说，就是将在springmvc.xml中配置的或者注解的url与对应的处理类找到并进行存储，用map<url,handler>这样的方式来存储。\n*   HandlerMapping有了映射关系，并且找到url对应的处理器，HandlerMapping就会将其处理器（Handler）返回，在返回前，会加上很多拦截器。\n*   DispatcherServlet拿到Handler后，找到HandlerAdapter（处理器适配器），通过它来访问处理器，并执行处理器。\n*   执行处理器\n*   处理器会返回一个ModelAndView对象给HandlerAdapter\n*   通过HandlerAdapter将ModelAndView对象返回给前端控制器(DispatcherServlet)\n*   前端控制器请求视图解析器(ViewResolver)去进行视图解析，根据逻辑视图名解析成真正的视图(jsp)，其实就是将ModelAndView对象中存放视图的名称进行查找，找到对应的页面形成视图对象\n*   返回视图对象到前端控制器。\n*   视图渲染，就是将ModelAndView对象中的数据放到request域中，用来让页面加载数据的。\n*   通过第8步，通过名称找到了对应的页面，通过第10步，request域中有了所需要的数据，那么就能够进行视图渲染了。最后将其返回即可。\n\n#### ***请简述一下mybatis中，Collection和Association标签的区别？***\n* assocation表示一对一和多对一的情况，比如一个Person类包含一个Card类，因为一个人对应一个身份证，这里是一对一的情况\n* Collection表示的是一对多的情况。\n> 一对一：\n```\n    <resultMap type=\"com.glj.poji.Person\" id=\"personMapper\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"name\" column=\"name\"/>\n    <result property=\"sex\" column=\"sex\"/>\n    <result property=\"age\" column=\"age\"/>\n    <association property=\"card\" column=\"card_id\"\n    select=\"com.glj.mapper.CardMapper.selectCardById\"\n    javaType=\"com.glj.poji.Card\">\n    </association>\n    </resultMap>\n```\n> 一对多：\n```\n    <resultMap type=\"com.glj.pojo.Clazz\" id=\"clazzResultMap\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"code\" column=\"code\"/>\n    <result property=\"name\" column=\"name\"/>\n    <!-- property: 指的是集合的属性, column指的是数据库字段，ofType：指的是集合中元素的类型 -->\n    <collection \n    property=\"students\" \n    ofType=\"com.glj.pojo.Student\"\n    column=\"id\" \n    javaType=\"ArrayList\"\n    fetchType=\"lazy\" \n    select=\"com.glj.mapper.StudentMapper.selectStudentByClazzId\">\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"name\" column=\"name\"/>\n        <result property=\"sex\" column=\"sex\"/>\n        <result property=\"age\" column=\"age\"/>\n    </collection>\n    </resultMap>\n```\n> 多对一：\n```\n    <resultMap type=\"com.glj.pojo.Student\" id=\"studentResultMap\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"name\" column=\"name\"/>\n    <result property=\"sex\" column=\"sex\"/>\n    <result property=\"age\" column=\"age\"/>\n    <association property=\"clazz\" javaType=\"com.glj.pojo.Clazz\">\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"code\" column=\"code\"/>\n        <result property=\"name\" column=\"name\"/>\n    </association>\n    </resultMap>\n```\n\n#### ***请简述下Bean注入属性有几种方式，分别是什么？***\n由于spring的特性：DI（依赖注入），控制反转\nSpring容器中支持的依赖注入方式主要有属性注入、构造函数注入、工厂方法注入。\n> ***属性注入***：即通过setXXX( )方法注入bean的属性值或依赖对象。由于属性注入方式具有可选择性和灵活性高的特点，因此它也是实际开发中**最常用的**注入方式。对于属性注入方式来说，只能人为的在配置文件中提供保证，而无法在语法级别提供保证。\n\n例如：这是最简单的注入方式，假设有一个SpringAction，类中需要实例化一个SpringDao对象，那么就可以定义一个private的SpringDao成员变量，然后创建SpringDao的set方法（这是ioc的注入入口）\n```\npackage com.bless.springdemo.action; \npublic class SpringAction { \n    //注入对象springDao \n    private SpringDao springDao; \n    //一定要写被注入对象的set方法 \n    public void setSpringDao(SpringDao springDao) { \n    this.springDao = springDao; \n} \npublic void ok(){ \n    springDao.ok(); \n} \n}\n```\n\n随后编写spring的xml文件中，name属性是class属性的一个别名，class属性指类的全名，因为在SpringAction中有一个公共属性Springdao，所以要在标签中创建一个标签指定SpringDao。标签中的name就是SpringAction类中的SpringDao属性名，ref指下面，这样其实是spring将SpringDaoImpl对象实例化并且调用SpringAction的setSpringDao方法将SpringDao注入：\n\n```\n<!--配置bean,配置后该类由spring管理--> \n<bean name=\"springAction\" class=\"com.bless.springdemo.action.SpringAction\"> \n<!--(1)依赖注入,配置当前类中相应的属性--> \n<property name=\"springDao\" ref=\"springDao\"></property> \n</bean> \n<bean name=\"springDao\" class=\"com.bless.springdemo.dao.impl.SpringDaoImpl\"></bean>\n```\n> ***构造函数注入***：除属性注入之外的另一种常用的注入方式，它可以保证一些必要的属性在bean实例化时就得到了设置，并在实例化后就可以使用。构造函数注入的前提是： bean必须提供带参的构造函数。\n\n这种方式的注入是指带有参数的构造函数注入，看下面的例子，我创建了两个成员变量SpringDao和User，**但是并未设置对象的set方法**，所以就不能支持第一种注入方式，这里的注入方式是在SpringAction的构造函数中注入，也就是说在创建SpringAction对象时要将SpringDao和User两个参数值传进来：\n```\n\npublic class SpringAction { \n    //注入对象springDao \n    private SpringDao springDao; \n    private User user; \n \n    public SpringAction(SpringDao springDao,User user){ \n    this.springDao = springDao; \n    this.user = user; \n    System.out.println(\"构造方法调用springDao和user\"); \n} \n \npublic void save(){ \n    user.setName(\"卡卡\"); \n    springDao.save(user); \n} \n}\n```\n在XML文件中同样不用的形式，而是使用标签，ref属性同样指向其它标签的name属性：\n```\n<!--配置bean,配置后该类由spring管理--> \n<bean name=\"springAction\" class=\"com.bless.springdemo.action.SpringAction\"> \n<!--(2)创建构造器注入,如果主类有带参的构造方法则需添加此配置--> \n<constructor-arg ref=\"springDao\"></constructor-arg> \n<constructor-arg ref=\"user\"></constructor-arg> \n</bean> \n<bean name=\"springDao\" class=\"com.bless.springdemo.dao.impl.SpringDaoImpl\"></bean> \n<bean name=\"user\" class=\"com.bless.springdemo.vo.User\"></bean>\n```\n___\n> ***Spring工厂注入***：可以分为 **静态** 和 **非静态** 两种。\n___\n>构造函数注入选择理由：\n>>构造函数保证重要属性预先设置；\n无需提供每个属性的setter方法，减少类的方法个数；\n可以更好地封装类变量，避免外部错误调用。\n\n>属性注入选择理由：\n>>属性过多时，构造函数变的臃肿；\n构造函数注入灵活性不强，有时需要为属性注入null值；\n多个构造函数时，配置上产生歧义，复杂度升高；\n构造函数不利于类的继承和扩展；\n构造函数注入会引起循环依赖的问题。 \n\n其实Spring为我们注入参数提供了这么多方法，那么这些方法必然有他们存在的道理，每个方法在某一问题上会有独特的优势，我们只需要按照我们具体的使用需求选择适合的方法来使用就好了，**但一般不太推荐工厂方法注入**。\n\n#### ***请简述一下SpringMVC中，@RequestBody和@ResponseBody的区别？***\n* @RequestBody：将前台的key，value数据data：name=“1”&id=1 或者json数据data ：{name：“1”，id：1 } 转换成java对象入形参。\n* @ResponseBody：将返回到前台的java对象 转换成json串输出。\n> 两个注解都是用于数据格式和pojo对象之间的转换**\n\n#### ***请说一下，mybatis中#和@的区别？***\n* #{}可以防止sql注入，它是一种预编译的语句，即在使用jdbc时的prepareStatement，sql如果存在参数则会使用?占位符，使用#{}形成的sql语句，是带有引号的。比如select * from table1 where id = #{id}中实际上的select * from table1 where id = '1'，另外，使用xml配置时只能使用#{}语法，而且，当parameterType是int时，必须使用该语法。\n* 使用${}形成的sql语句没有被引号包裹，但是在以下sql语句时最好使用该语句：select 'table1' order by 'id'表示按哪个表和按某个列排序时\n\n#### ***请说一下事务的管理机制是什么？***\n可以查看**Spring事务**笔记模块\n\n#### ***请简述下SpringMVC主要使用了哪些设计模式？***\n* 简单工厂模式，例如BeanFactory\n* 工厂方法模式\n* 适配器模式\n* 包装器模式\n* 代理模式\n* 观察者模式\n* 策略模式\n* 模板方法模式\n***\n\n#### ***Spring如何保证Controller并发的安全？***\nSpring中controller默认是**单例模式**，如果加注解@Scope(prototype)则为多例模式，Spring多线程访问的都是一个controller，如果controller中含有类变量，那所有的请求都会共享这个变量，可能出现于预期的值不一样。可以用多例模式解决，但是使用多例模式会**产生时间的开销**。最好的解决方案是：**使用ThreadLocal**来保存类变量，将类变量保存在线程的变量域中，让不同的请求隔离开来。ThreadLocal会为每一个线程提供一个独立的变量副本\n> ThreadLocal\n\n#### ***Spring Bean的生命周期是如何管理的？***\n* 实例化bean对象(通过构造方法或者工厂方法)\n* 设置对象属性(setter等)（依赖注入）\n* 如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）\n* 如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身\n* 将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法\n* 调用Bean的初始化方法\n* 将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法\n* 使用Bean\n* 容器关闭之前，调用Bean的销毁方法\n> 总结就四步骤，实例化，属性赋值，初始化，销毁\n\n#### ***“a==b”和“a.equals(b)”有什么区别？***\n* \"a==b\"指的是对象的引用，只有当两个引用都指向**堆中的同一个对象**时才返回true\n* \"a.equals(b)\"指的是内容的比较，当**内容相等**时候返回true，这里指的是逻辑一致性的比较。例如，String类需要重写equals方法，可以用于两个不同的对象，但是内容相等的比较\n\n#### ***HashMap是线程安全的吗？为什么不是线程安全？***\nHashMap底层是一个entry数组，当发生哈希碰撞时，HashMap会采用链表的方式解决，在对应的数组位置上存放链表的头结点，然后新加入的节点会从改头结点加入，而此过程是非同步的。如果多个线程同时访问一个HashMap，在访问同一个hash映射的同时对映射关系进行结构上的修改，会造成不同步的现象。\n> HashMap**不是线程安全的**，发生在多线程对同一个HashMap加入时，HashMao结构的变化，一般指的是**Resize**（包含扩容，ReHash），ReHash在并发的情况下回形成闭环。\n\n#### ***HashMap,ConcurrentHashMap与LinkedHashMap***\n* HashMap线程不安全，无序\n* ConcurrentHashMap采用分段锁方式进行数据同步，但是因为进行**两次哈希算法**（第一次确定该元素位于哪一个段即segment，第二次确定元素位置），因此效率相比于HashMap要低，但是在多线程的情况下满足一定的线程安全场景（牺牲性能换取数据安全）\n* LinkedHashMap维护一个双链表，可以按数据的写入顺序读出\n> 注意：这里ConcurrentHashMap指的是在**一个段(segment)内线程安全**，分配的锁作用于段上。应用场景是高并发，但是不能保证完全的线程安全\n\n#### ***如何创建一个线程，有哪几种方式，他们的区别是什么？***\n* 自定义Thread的子类，并重写父类的run方法即执行体，然后创建Thread的实例，调用实例的start方法\n* 自定义类实现Runnable接口，并重写run方法，然后使用new Thread()并注入自定义类对象，接着低啊用start方法\n* 通过Callable和Future创建线程\n> 使用runnable和Callable接口的优势是可以多实现，还可以继承其他类\n使用Thread子类继承的方式的优势是无需使用Thread.currentThread访问当前的线程，而只需要使用this即可\n\n#### ***wait和sleep的区别***\n* wait是Object对象上的方法，在同步代码块或者同步方法中使用，会释放当前的同步锁，让出cpu，进入等待状态，可以用notify和notifyAll方法唤醒\n* sleep是Thread的静态方法，可以在任何地方使用，必须捕获异常，不会释放锁，可以使用interrupt方法唤醒\n\n#### ***请描述一下HashMap的扩容过程***\n当HashMap填满了0.75负载因子的桶（bucket）时才会发生扩容: HashMap.size()> Capacity(容量) * loadFactor(负载因子) —— Resize\n* 扩容: 创建一个新的entry空数组，长度是原数组的两倍\n* Rehash: 因为长度不一样，哈希计算的值也不一定，遍历原来的entry数组，把所有的entry数组重新hash到扩容的数组上\n\n#### ***请说一下强引用、软引用、弱引用、虚引用分别是什么？***\n* 强引用：一般是new出来的对象，垃圾回收器是不会回收强引用类型的对象，即使当程序抛出OutMemoryError错误也不会回收具有强引用的对象。如果想让强引用对象回收，可以认为设置对象为null让垃圾回收器GC回收\n* 软引用：当内存充足时不会进行垃圾回收，当内存不足时则会进行垃圾回收。当内存不足时，JVM优先对软引用设置为null，再进行垃圾回收\n* 弱引用：不管内存是否充足，都会回收软引用对象的内存。不过由于软引用是一个优先级很低的引用，所以不一定很快就会发现软引用\n* 虚引用：虚引用顾名思义，就是形同虚设。与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收\n\n#### ***synchronize在静态方法和普通方法的区别？***\n* 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象\n* 修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象\n\n#### ***如何处理HashMap的并发问题？***\n使用ConcurrentHashMap\n\n#### ***线程池的种类有哪些，他们的区别和使用场景？***\n* newCachedThreadPool：\n    底层：返回ThreadPoolExecutor实例，corePoolSize为0；maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为60L；unit为TimeUnit.SECONDS；workQueue为SynchronousQueue(同步队列)\n    通俗：当有新任务到来，则插入到SynchronousQueue中，由于SynchronousQueue是同步队列，因此会在池中寻找可用线程来执行，若有可以线程则执行，若没有可用线程则创建一个线程来执行该任务；若池中线程空闲时间超过指定大小，则该线程会被销毁。\n    适用：**执行很多短期异步的小程序或者负载较轻的服务器**\n    \n* newFixedThreadPool：\n    底层：返回ThreadPoolExecutor实例，接收参数为所设定线程数量nThread，corePoolSize为nThread，maximumPoolSize为nThread；keepAliveTime为0L(不限时)；unit为：TimeUnit.MILLISECONDS；WorkQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列\n    通俗：创建可容纳固定数量线程的池子，每隔线程的存活时间是无限的，当池子满了就不在添加线程了；如果池中的所有线程均在繁忙状态，对于新任务会进入阻塞队列中(无界的阻塞队列)\n    适用：**执行长期的任务，性能好很多**\n    \n* newSingleThreadExecutor:\n    底层：FinalizableDelegatedExecutorService包装的ThreadPoolExecutor实例，corePoolSize为1；maximumPoolSize为1；keepAliveTime为0L；unit为：TimeUnit.MILLISECONDS；workQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列\n    通俗：创建只有一个线程的线程池，且线程的存活时间是无限的；当该线程正繁忙时，对于新任务会进入阻塞队列中(无界的阻塞队列)\n    适用：**一个任务一个任务执行的场景**\n    \n* NewScheduledThreadPool:\n    底层：创建ScheduledThreadPoolExecutor实例，corePoolSize为传递来的参数，maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为0；unit为：TimeUnit.NANOSECONDS；workQueue为：new DelayedWorkQueue() 一个按超时时间升序排序的队列\n    通俗：创建一个固定大小的线程池，线程池内线程存活时间无限制，线程池可以支持定时及周期性任务执行，如果所有线程均处于繁忙状态，对于新任务会进入DelayedWorkQueue队列中，这是一种按照超时时间排序的队列结构\n\n#### ***索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？***\n* 当sql语句使用了计算表达式（例如<> 、not in 、not exist、!=）、函数运算、正则表达式和like关键字字符串前有%不会使用索引\n* 当等值查询时值为数字时不会使用索引，值为字符串时会使用索引\n* 使用or语句索引失效，有且仅当or条件的所有列都加上索引才不会失效\n\n#### ***什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？***\n* ***乐观锁***：总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。 \nversion方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。 \n核心SQL代码： \n```\nupdate table set x=x+1, version=version+1 where id=#{id} and version=#{version}; \n```\nCAS操作方式：即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。 \n\n> 乐观锁一般乐观锁只用在高并发、多读少写的场景。\n\n* ***悲观锁***： 总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁。共享锁、排它锁都是悲观锁。 \n一旦通过悲观锁锁定一个资源，那么其他需要操作该资源的使用方，只能等待直到锁被释放，好处在于可以减少并发，但是当并发量非常大的时候，由于锁消耗资源，并且可能锁定时间过长，容易导致系统性能下降，资源消耗严重。\n\n> 在并发量不是很大，并且出现并发情况导致的异常用户和系统都很难以接受的情况下，会选择悲观锁进行\n\n* ***共享锁***：也称为读锁，对某一资源加共享锁，自身可以读该资源，其他人也可以读该资源（也可以再继续加共享锁，即 共享锁可多个共存），但无法修改。要想修改就必须等所有共享锁都释放完之后。语法为： \n```\nselect * from table lock in share mode \n```\n* ***排他锁***：也称为写锁，对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作。语法为： \n```\nselect * from table for update ———— 增删改自动加了排他锁\n```\n\n> 数据库的增删改操作默认都会加排他锁，而查询不会加任何锁\n\n#### ***左连接、右连接、内连接的区别是什么？***\n* 左外连接：根据左表为主，查出左表关于右表的所有数据，包括null\n* 右外连接：根据右表为主，查出右表关于左表的所有数据，包括null\n* 内连接：也是自然连接，显示左表和右表共有的，即交集\n\n> 注意：使用join外连接的时候，在一般业务上如果不考虑性能问题的话就可以使用join，但是在数据量特别大而且关联表特别多（超过三表），，建议将关联的逻辑放在业务层实现，即在业务三次查询避免join连接。因为当数据量特别大的时候，数据库会使当次查询的时间缩短。在分库分表的情况下，join难以跨库查询，所以在业务量大的情况下使用业务层逻辑避免使用join连接\n\n#### ***事务并发会出现什么问题？请举一个他们的例子？***\n事务并发会出现以下四种问题：脏读、丢失修改、不可重复读、幻读\n* 脏读：假设A事务已修改了数据但是为提交事务，B事务读取了A的修改数据并执行，最后A事务回滚了，这就会造成脏读\n![avatar](/articalPic/7.jpg)\n\n* 丢失修改：1.A事务撤销时，把已经提交的B事务的更新数据覆盖了\n![avatar](/articalPic/8.jpg)\n\n* A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失\n![avatar](/articalPic/9.jpg)\n\n* 不可重复读：发生在读取了已提交事务的数据，比如A事务第一次读数据时为1000，但是这时候B事务已经修改为900并且提交事务，而A第二次读该数据的时候发现了数据不一致，这就是不可重复读。\n![avatar](/articalPic/10.jpg)\n\n* 幻读：发生在A读取B提交事务新增的数据时，比如A事务第一次读取数据为一条数据，但是这时候B事务已经新增数据且提交事务，而A第二次读了数据不明白造成幻读现象。\n![avatar](/articalPic/11.jpg)\n\n```\n幻象读和不可重复读是两个容易混淆的概念，前者是指读到了其他已经提交事务的新增数据，而后者是指读到了已经提交事务的更改数据（更改或删除），为了避免这两种情况，采取的对策是不同的，防止读取到更改数据，只需要对操作的数据添加行级锁，阻止操作中的数据发生变化，而防止读取到新增数据，则往往需要添加表级锁——将整个表锁定，防止新增数据（Oracle使用多版本数据的方式实现）。\n```\n***\n\n#### ***假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等***\n    fuck\n***\n\n#### ***说一下索引最左匹配原则是什么意思？***\n因为mysql数据库为B+树，B+树是按照从左到右的顺序来建立搜索树的，比如有表含有name、age、set，且为这三个字段建立了联合索引，此时如果查询时按name为第一个查找顺序比如(\"张三\",20)时，就会按张三为第一个比较因子查找到张三的数据，然后再往下查20的数据。假设没有name作为查询的第一顺序，比如(20,F)，此时B+树就不知道下一步该查哪个节点，假设为(张三,F)，这时会查找张三的数据，然后查找age的所有数据，然后再查出为f的数据。\n***\n\n#### ***Dubbo连接注册中心和直连有什么区别？***\n\n#### ***消息中间件如何解决消息丢失问题？***\n\n#### ***如何保证redis中都是热点数据？***\n\n#### ***Redis缓存穿透、缓存雪崩是什么？如何解决？***\n\n#### ***Zoopkeeper是如何管理分布式锁的（节点层面出发）***\n\n#### ***Zoopkeeper是如何管理集群状态的（节点层面出发）***\n\n#### ***Dubbo的底层实现原理和机制***\n\n#### ***事务tranciation***\n\n#### ***Bean是单例的吗？***\n\n#### ***controller是不是线程安全***\n\n#### ***数据库优化***\n\n#### ***redis是单例的，为什么性能很高？***\n\n#### ***mysql（oracle）varchar和char的区别是什么？***\n\n#### ***Sql语句执行是从后向前的？原理？***\n\n#### ***SpringMVC的执行原理，具体细节？***\n","source":"_posts/面试.md","raw":"---\ntitle: java面试题目 -- 持续更新\ntoc: true\ndate: 2020-01-02 17:40:40\nthumbnail: /gallery/thumbnails/java面试题目(持续更新).jpeg\ntags: java\ncategories: 面试\n---\n#### 注意：笔记只对作者有用，不能保证可靠性\n<!--more-->\n#### ***请简述SpringMVC的工作流程?***\n![avatar](/articalPic/19.png)\n*   用户发起请求到前端控制器（DispatcherServlet），该控制器会过滤出哪些请求可以访问Servlet、哪些不能访问。就是url-pattern的作用，并且会加载springmvc.xml配置文件。\n*   前端控制器会找到处理器映射器（HandlerMapping），通过HandlerMapping完成url到controller映射的组件，简单来说，就是将在springmvc.xml中配置的或者注解的url与对应的处理类找到并进行存储，用map<url,handler>这样的方式来存储。\n*   HandlerMapping有了映射关系，并且找到url对应的处理器，HandlerMapping就会将其处理器（Handler）返回，在返回前，会加上很多拦截器。\n*   DispatcherServlet拿到Handler后，找到HandlerAdapter（处理器适配器），通过它来访问处理器，并执行处理器。\n*   执行处理器\n*   处理器会返回一个ModelAndView对象给HandlerAdapter\n*   通过HandlerAdapter将ModelAndView对象返回给前端控制器(DispatcherServlet)\n*   前端控制器请求视图解析器(ViewResolver)去进行视图解析，根据逻辑视图名解析成真正的视图(jsp)，其实就是将ModelAndView对象中存放视图的名称进行查找，找到对应的页面形成视图对象\n*   返回视图对象到前端控制器。\n*   视图渲染，就是将ModelAndView对象中的数据放到request域中，用来让页面加载数据的。\n*   通过第8步，通过名称找到了对应的页面，通过第10步，request域中有了所需要的数据，那么就能够进行视图渲染了。最后将其返回即可。\n\n#### ***请简述一下mybatis中，Collection和Association标签的区别？***\n* assocation表示一对一和多对一的情况，比如一个Person类包含一个Card类，因为一个人对应一个身份证，这里是一对一的情况\n* Collection表示的是一对多的情况。\n> 一对一：\n```\n    <resultMap type=\"com.glj.poji.Person\" id=\"personMapper\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"name\" column=\"name\"/>\n    <result property=\"sex\" column=\"sex\"/>\n    <result property=\"age\" column=\"age\"/>\n    <association property=\"card\" column=\"card_id\"\n    select=\"com.glj.mapper.CardMapper.selectCardById\"\n    javaType=\"com.glj.poji.Card\">\n    </association>\n    </resultMap>\n```\n> 一对多：\n```\n    <resultMap type=\"com.glj.pojo.Clazz\" id=\"clazzResultMap\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"code\" column=\"code\"/>\n    <result property=\"name\" column=\"name\"/>\n    <!-- property: 指的是集合的属性, column指的是数据库字段，ofType：指的是集合中元素的类型 -->\n    <collection \n    property=\"students\" \n    ofType=\"com.glj.pojo.Student\"\n    column=\"id\" \n    javaType=\"ArrayList\"\n    fetchType=\"lazy\" \n    select=\"com.glj.mapper.StudentMapper.selectStudentByClazzId\">\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"name\" column=\"name\"/>\n        <result property=\"sex\" column=\"sex\"/>\n        <result property=\"age\" column=\"age\"/>\n    </collection>\n    </resultMap>\n```\n> 多对一：\n```\n    <resultMap type=\"com.glj.pojo.Student\" id=\"studentResultMap\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"name\" column=\"name\"/>\n    <result property=\"sex\" column=\"sex\"/>\n    <result property=\"age\" column=\"age\"/>\n    <association property=\"clazz\" javaType=\"com.glj.pojo.Clazz\">\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"code\" column=\"code\"/>\n        <result property=\"name\" column=\"name\"/>\n    </association>\n    </resultMap>\n```\n\n#### ***请简述下Bean注入属性有几种方式，分别是什么？***\n由于spring的特性：DI（依赖注入），控制反转\nSpring容器中支持的依赖注入方式主要有属性注入、构造函数注入、工厂方法注入。\n> ***属性注入***：即通过setXXX( )方法注入bean的属性值或依赖对象。由于属性注入方式具有可选择性和灵活性高的特点，因此它也是实际开发中**最常用的**注入方式。对于属性注入方式来说，只能人为的在配置文件中提供保证，而无法在语法级别提供保证。\n\n例如：这是最简单的注入方式，假设有一个SpringAction，类中需要实例化一个SpringDao对象，那么就可以定义一个private的SpringDao成员变量，然后创建SpringDao的set方法（这是ioc的注入入口）\n```\npackage com.bless.springdemo.action; \npublic class SpringAction { \n    //注入对象springDao \n    private SpringDao springDao; \n    //一定要写被注入对象的set方法 \n    public void setSpringDao(SpringDao springDao) { \n    this.springDao = springDao; \n} \npublic void ok(){ \n    springDao.ok(); \n} \n}\n```\n\n随后编写spring的xml文件中，name属性是class属性的一个别名，class属性指类的全名，因为在SpringAction中有一个公共属性Springdao，所以要在标签中创建一个标签指定SpringDao。标签中的name就是SpringAction类中的SpringDao属性名，ref指下面，这样其实是spring将SpringDaoImpl对象实例化并且调用SpringAction的setSpringDao方法将SpringDao注入：\n\n```\n<!--配置bean,配置后该类由spring管理--> \n<bean name=\"springAction\" class=\"com.bless.springdemo.action.SpringAction\"> \n<!--(1)依赖注入,配置当前类中相应的属性--> \n<property name=\"springDao\" ref=\"springDao\"></property> \n</bean> \n<bean name=\"springDao\" class=\"com.bless.springdemo.dao.impl.SpringDaoImpl\"></bean>\n```\n> ***构造函数注入***：除属性注入之外的另一种常用的注入方式，它可以保证一些必要的属性在bean实例化时就得到了设置，并在实例化后就可以使用。构造函数注入的前提是： bean必须提供带参的构造函数。\n\n这种方式的注入是指带有参数的构造函数注入，看下面的例子，我创建了两个成员变量SpringDao和User，**但是并未设置对象的set方法**，所以就不能支持第一种注入方式，这里的注入方式是在SpringAction的构造函数中注入，也就是说在创建SpringAction对象时要将SpringDao和User两个参数值传进来：\n```\n\npublic class SpringAction { \n    //注入对象springDao \n    private SpringDao springDao; \n    private User user; \n \n    public SpringAction(SpringDao springDao,User user){ \n    this.springDao = springDao; \n    this.user = user; \n    System.out.println(\"构造方法调用springDao和user\"); \n} \n \npublic void save(){ \n    user.setName(\"卡卡\"); \n    springDao.save(user); \n} \n}\n```\n在XML文件中同样不用的形式，而是使用标签，ref属性同样指向其它标签的name属性：\n```\n<!--配置bean,配置后该类由spring管理--> \n<bean name=\"springAction\" class=\"com.bless.springdemo.action.SpringAction\"> \n<!--(2)创建构造器注入,如果主类有带参的构造方法则需添加此配置--> \n<constructor-arg ref=\"springDao\"></constructor-arg> \n<constructor-arg ref=\"user\"></constructor-arg> \n</bean> \n<bean name=\"springDao\" class=\"com.bless.springdemo.dao.impl.SpringDaoImpl\"></bean> \n<bean name=\"user\" class=\"com.bless.springdemo.vo.User\"></bean>\n```\n___\n> ***Spring工厂注入***：可以分为 **静态** 和 **非静态** 两种。\n___\n>构造函数注入选择理由：\n>>构造函数保证重要属性预先设置；\n无需提供每个属性的setter方法，减少类的方法个数；\n可以更好地封装类变量，避免外部错误调用。\n\n>属性注入选择理由：\n>>属性过多时，构造函数变的臃肿；\n构造函数注入灵活性不强，有时需要为属性注入null值；\n多个构造函数时，配置上产生歧义，复杂度升高；\n构造函数不利于类的继承和扩展；\n构造函数注入会引起循环依赖的问题。 \n\n其实Spring为我们注入参数提供了这么多方法，那么这些方法必然有他们存在的道理，每个方法在某一问题上会有独特的优势，我们只需要按照我们具体的使用需求选择适合的方法来使用就好了，**但一般不太推荐工厂方法注入**。\n\n#### ***请简述一下SpringMVC中，@RequestBody和@ResponseBody的区别？***\n* @RequestBody：将前台的key，value数据data：name=“1”&id=1 或者json数据data ：{name：“1”，id：1 } 转换成java对象入形参。\n* @ResponseBody：将返回到前台的java对象 转换成json串输出。\n> 两个注解都是用于数据格式和pojo对象之间的转换**\n\n#### ***请说一下，mybatis中#和@的区别？***\n* #{}可以防止sql注入，它是一种预编译的语句，即在使用jdbc时的prepareStatement，sql如果存在参数则会使用?占位符，使用#{}形成的sql语句，是带有引号的。比如select * from table1 where id = #{id}中实际上的select * from table1 where id = '1'，另外，使用xml配置时只能使用#{}语法，而且，当parameterType是int时，必须使用该语法。\n* 使用${}形成的sql语句没有被引号包裹，但是在以下sql语句时最好使用该语句：select 'table1' order by 'id'表示按哪个表和按某个列排序时\n\n#### ***请说一下事务的管理机制是什么？***\n可以查看**Spring事务**笔记模块\n\n#### ***请简述下SpringMVC主要使用了哪些设计模式？***\n* 简单工厂模式，例如BeanFactory\n* 工厂方法模式\n* 适配器模式\n* 包装器模式\n* 代理模式\n* 观察者模式\n* 策略模式\n* 模板方法模式\n***\n\n#### ***Spring如何保证Controller并发的安全？***\nSpring中controller默认是**单例模式**，如果加注解@Scope(prototype)则为多例模式，Spring多线程访问的都是一个controller，如果controller中含有类变量，那所有的请求都会共享这个变量，可能出现于预期的值不一样。可以用多例模式解决，但是使用多例模式会**产生时间的开销**。最好的解决方案是：**使用ThreadLocal**来保存类变量，将类变量保存在线程的变量域中，让不同的请求隔离开来。ThreadLocal会为每一个线程提供一个独立的变量副本\n> ThreadLocal\n\n#### ***Spring Bean的生命周期是如何管理的？***\n* 实例化bean对象(通过构造方法或者工厂方法)\n* 设置对象属性(setter等)（依赖注入）\n* 如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）\n* 如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身\n* 将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法\n* 调用Bean的初始化方法\n* 将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法\n* 使用Bean\n* 容器关闭之前，调用Bean的销毁方法\n> 总结就四步骤，实例化，属性赋值，初始化，销毁\n\n#### ***“a==b”和“a.equals(b)”有什么区别？***\n* \"a==b\"指的是对象的引用，只有当两个引用都指向**堆中的同一个对象**时才返回true\n* \"a.equals(b)\"指的是内容的比较，当**内容相等**时候返回true，这里指的是逻辑一致性的比较。例如，String类需要重写equals方法，可以用于两个不同的对象，但是内容相等的比较\n\n#### ***HashMap是线程安全的吗？为什么不是线程安全？***\nHashMap底层是一个entry数组，当发生哈希碰撞时，HashMap会采用链表的方式解决，在对应的数组位置上存放链表的头结点，然后新加入的节点会从改头结点加入，而此过程是非同步的。如果多个线程同时访问一个HashMap，在访问同一个hash映射的同时对映射关系进行结构上的修改，会造成不同步的现象。\n> HashMap**不是线程安全的**，发生在多线程对同一个HashMap加入时，HashMao结构的变化，一般指的是**Resize**（包含扩容，ReHash），ReHash在并发的情况下回形成闭环。\n\n#### ***HashMap,ConcurrentHashMap与LinkedHashMap***\n* HashMap线程不安全，无序\n* ConcurrentHashMap采用分段锁方式进行数据同步，但是因为进行**两次哈希算法**（第一次确定该元素位于哪一个段即segment，第二次确定元素位置），因此效率相比于HashMap要低，但是在多线程的情况下满足一定的线程安全场景（牺牲性能换取数据安全）\n* LinkedHashMap维护一个双链表，可以按数据的写入顺序读出\n> 注意：这里ConcurrentHashMap指的是在**一个段(segment)内线程安全**，分配的锁作用于段上。应用场景是高并发，但是不能保证完全的线程安全\n\n#### ***如何创建一个线程，有哪几种方式，他们的区别是什么？***\n* 自定义Thread的子类，并重写父类的run方法即执行体，然后创建Thread的实例，调用实例的start方法\n* 自定义类实现Runnable接口，并重写run方法，然后使用new Thread()并注入自定义类对象，接着低啊用start方法\n* 通过Callable和Future创建线程\n> 使用runnable和Callable接口的优势是可以多实现，还可以继承其他类\n使用Thread子类继承的方式的优势是无需使用Thread.currentThread访问当前的线程，而只需要使用this即可\n\n#### ***wait和sleep的区别***\n* wait是Object对象上的方法，在同步代码块或者同步方法中使用，会释放当前的同步锁，让出cpu，进入等待状态，可以用notify和notifyAll方法唤醒\n* sleep是Thread的静态方法，可以在任何地方使用，必须捕获异常，不会释放锁，可以使用interrupt方法唤醒\n\n#### ***请描述一下HashMap的扩容过程***\n当HashMap填满了0.75负载因子的桶（bucket）时才会发生扩容: HashMap.size()> Capacity(容量) * loadFactor(负载因子) —— Resize\n* 扩容: 创建一个新的entry空数组，长度是原数组的两倍\n* Rehash: 因为长度不一样，哈希计算的值也不一定，遍历原来的entry数组，把所有的entry数组重新hash到扩容的数组上\n\n#### ***请说一下强引用、软引用、弱引用、虚引用分别是什么？***\n* 强引用：一般是new出来的对象，垃圾回收器是不会回收强引用类型的对象，即使当程序抛出OutMemoryError错误也不会回收具有强引用的对象。如果想让强引用对象回收，可以认为设置对象为null让垃圾回收器GC回收\n* 软引用：当内存充足时不会进行垃圾回收，当内存不足时则会进行垃圾回收。当内存不足时，JVM优先对软引用设置为null，再进行垃圾回收\n* 弱引用：不管内存是否充足，都会回收软引用对象的内存。不过由于软引用是一个优先级很低的引用，所以不一定很快就会发现软引用\n* 虚引用：虚引用顾名思义，就是形同虚设。与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收\n\n#### ***synchronize在静态方法和普通方法的区别？***\n* 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象\n* 修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象\n\n#### ***如何处理HashMap的并发问题？***\n使用ConcurrentHashMap\n\n#### ***线程池的种类有哪些，他们的区别和使用场景？***\n* newCachedThreadPool：\n    底层：返回ThreadPoolExecutor实例，corePoolSize为0；maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为60L；unit为TimeUnit.SECONDS；workQueue为SynchronousQueue(同步队列)\n    通俗：当有新任务到来，则插入到SynchronousQueue中，由于SynchronousQueue是同步队列，因此会在池中寻找可用线程来执行，若有可以线程则执行，若没有可用线程则创建一个线程来执行该任务；若池中线程空闲时间超过指定大小，则该线程会被销毁。\n    适用：**执行很多短期异步的小程序或者负载较轻的服务器**\n    \n* newFixedThreadPool：\n    底层：返回ThreadPoolExecutor实例，接收参数为所设定线程数量nThread，corePoolSize为nThread，maximumPoolSize为nThread；keepAliveTime为0L(不限时)；unit为：TimeUnit.MILLISECONDS；WorkQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列\n    通俗：创建可容纳固定数量线程的池子，每隔线程的存活时间是无限的，当池子满了就不在添加线程了；如果池中的所有线程均在繁忙状态，对于新任务会进入阻塞队列中(无界的阻塞队列)\n    适用：**执行长期的任务，性能好很多**\n    \n* newSingleThreadExecutor:\n    底层：FinalizableDelegatedExecutorService包装的ThreadPoolExecutor实例，corePoolSize为1；maximumPoolSize为1；keepAliveTime为0L；unit为：TimeUnit.MILLISECONDS；workQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列\n    通俗：创建只有一个线程的线程池，且线程的存活时间是无限的；当该线程正繁忙时，对于新任务会进入阻塞队列中(无界的阻塞队列)\n    适用：**一个任务一个任务执行的场景**\n    \n* NewScheduledThreadPool:\n    底层：创建ScheduledThreadPoolExecutor实例，corePoolSize为传递来的参数，maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为0；unit为：TimeUnit.NANOSECONDS；workQueue为：new DelayedWorkQueue() 一个按超时时间升序排序的队列\n    通俗：创建一个固定大小的线程池，线程池内线程存活时间无限制，线程池可以支持定时及周期性任务执行，如果所有线程均处于繁忙状态，对于新任务会进入DelayedWorkQueue队列中，这是一种按照超时时间排序的队列结构\n\n#### ***索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？***\n* 当sql语句使用了计算表达式（例如<> 、not in 、not exist、!=）、函数运算、正则表达式和like关键字字符串前有%不会使用索引\n* 当等值查询时值为数字时不会使用索引，值为字符串时会使用索引\n* 使用or语句索引失效，有且仅当or条件的所有列都加上索引才不会失效\n\n#### ***什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？***\n* ***乐观锁***：总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。 \nversion方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。 \n核心SQL代码： \n```\nupdate table set x=x+1, version=version+1 where id=#{id} and version=#{version}; \n```\nCAS操作方式：即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。 \n\n> 乐观锁一般乐观锁只用在高并发、多读少写的场景。\n\n* ***悲观锁***： 总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁。共享锁、排它锁都是悲观锁。 \n一旦通过悲观锁锁定一个资源，那么其他需要操作该资源的使用方，只能等待直到锁被释放，好处在于可以减少并发，但是当并发量非常大的时候，由于锁消耗资源，并且可能锁定时间过长，容易导致系统性能下降，资源消耗严重。\n\n> 在并发量不是很大，并且出现并发情况导致的异常用户和系统都很难以接受的情况下，会选择悲观锁进行\n\n* ***共享锁***：也称为读锁，对某一资源加共享锁，自身可以读该资源，其他人也可以读该资源（也可以再继续加共享锁，即 共享锁可多个共存），但无法修改。要想修改就必须等所有共享锁都释放完之后。语法为： \n```\nselect * from table lock in share mode \n```\n* ***排他锁***：也称为写锁，对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作。语法为： \n```\nselect * from table for update ———— 增删改自动加了排他锁\n```\n\n> 数据库的增删改操作默认都会加排他锁，而查询不会加任何锁\n\n#### ***左连接、右连接、内连接的区别是什么？***\n* 左外连接：根据左表为主，查出左表关于右表的所有数据，包括null\n* 右外连接：根据右表为主，查出右表关于左表的所有数据，包括null\n* 内连接：也是自然连接，显示左表和右表共有的，即交集\n\n> 注意：使用join外连接的时候，在一般业务上如果不考虑性能问题的话就可以使用join，但是在数据量特别大而且关联表特别多（超过三表），，建议将关联的逻辑放在业务层实现，即在业务三次查询避免join连接。因为当数据量特别大的时候，数据库会使当次查询的时间缩短。在分库分表的情况下，join难以跨库查询，所以在业务量大的情况下使用业务层逻辑避免使用join连接\n\n#### ***事务并发会出现什么问题？请举一个他们的例子？***\n事务并发会出现以下四种问题：脏读、丢失修改、不可重复读、幻读\n* 脏读：假设A事务已修改了数据但是为提交事务，B事务读取了A的修改数据并执行，最后A事务回滚了，这就会造成脏读\n![avatar](/articalPic/7.jpg)\n\n* 丢失修改：1.A事务撤销时，把已经提交的B事务的更新数据覆盖了\n![avatar](/articalPic/8.jpg)\n\n* A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失\n![avatar](/articalPic/9.jpg)\n\n* 不可重复读：发生在读取了已提交事务的数据，比如A事务第一次读数据时为1000，但是这时候B事务已经修改为900并且提交事务，而A第二次读该数据的时候发现了数据不一致，这就是不可重复读。\n![avatar](/articalPic/10.jpg)\n\n* 幻读：发生在A读取B提交事务新增的数据时，比如A事务第一次读取数据为一条数据，但是这时候B事务已经新增数据且提交事务，而A第二次读了数据不明白造成幻读现象。\n![avatar](/articalPic/11.jpg)\n\n```\n幻象读和不可重复读是两个容易混淆的概念，前者是指读到了其他已经提交事务的新增数据，而后者是指读到了已经提交事务的更改数据（更改或删除），为了避免这两种情况，采取的对策是不同的，防止读取到更改数据，只需要对操作的数据添加行级锁，阻止操作中的数据发生变化，而防止读取到新增数据，则往往需要添加表级锁——将整个表锁定，防止新增数据（Oracle使用多版本数据的方式实现）。\n```\n***\n\n#### ***假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等***\n    fuck\n***\n\n#### ***说一下索引最左匹配原则是什么意思？***\n因为mysql数据库为B+树，B+树是按照从左到右的顺序来建立搜索树的，比如有表含有name、age、set，且为这三个字段建立了联合索引，此时如果查询时按name为第一个查找顺序比如(\"张三\",20)时，就会按张三为第一个比较因子查找到张三的数据，然后再往下查20的数据。假设没有name作为查询的第一顺序，比如(20,F)，此时B+树就不知道下一步该查哪个节点，假设为(张三,F)，这时会查找张三的数据，然后查找age的所有数据，然后再查出为f的数据。\n***\n\n#### ***Dubbo连接注册中心和直连有什么区别？***\n\n#### ***消息中间件如何解决消息丢失问题？***\n\n#### ***如何保证redis中都是热点数据？***\n\n#### ***Redis缓存穿透、缓存雪崩是什么？如何解决？***\n\n#### ***Zoopkeeper是如何管理分布式锁的（节点层面出发）***\n\n#### ***Zoopkeeper是如何管理集群状态的（节点层面出发）***\n\n#### ***Dubbo的底层实现原理和机制***\n\n#### ***事务tranciation***\n\n#### ***Bean是单例的吗？***\n\n#### ***controller是不是线程安全***\n\n#### ***数据库优化***\n\n#### ***redis是单例的，为什么性能很高？***\n\n#### ***mysql（oracle）varchar和char的区别是什么？***\n\n#### ***Sql语句执行是从后向前的？原理？***\n\n#### ***SpringMVC的执行原理，具体细节？***\n","slug":"面试","published":1,"updated":"2020-01-09T12:04:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck56oooax000cejupf8bi6tm4","content":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4><a id=\"more\"></a>\n<h4 id=\"请简述SpringMVC的工作流程\"><a href=\"#请简述SpringMVC的工作流程\" class=\"headerlink\" title=\"请简述SpringMVC的工作流程?\"></a><strong><em>请简述SpringMVC的工作流程?</em></strong></h4><p><img src=\"/articalPic/19.png\" alt=\"avatar\"></p>\n<ul>\n<li>用户发起请求到前端控制器（DispatcherServlet），该控制器会过滤出哪些请求可以访问Servlet、哪些不能访问。就是url-pattern的作用，并且会加载springmvc.xml配置文件。</li>\n<li>前端控制器会找到处理器映射器（HandlerMapping），通过HandlerMapping完成url到controller映射的组件，简单来说，就是将在springmvc.xml中配置的或者注解的url与对应的处理类找到并进行存储，用map&lt;url,handler&gt;这样的方式来存储。</li>\n<li>HandlerMapping有了映射关系，并且找到url对应的处理器，HandlerMapping就会将其处理器（Handler）返回，在返回前，会加上很多拦截器。</li>\n<li>DispatcherServlet拿到Handler后，找到HandlerAdapter（处理器适配器），通过它来访问处理器，并执行处理器。</li>\n<li>执行处理器</li>\n<li>处理器会返回一个ModelAndView对象给HandlerAdapter</li>\n<li>通过HandlerAdapter将ModelAndView对象返回给前端控制器(DispatcherServlet)</li>\n<li>前端控制器请求视图解析器(ViewResolver)去进行视图解析，根据逻辑视图名解析成真正的视图(jsp)，其实就是将ModelAndView对象中存放视图的名称进行查找，找到对应的页面形成视图对象</li>\n<li>返回视图对象到前端控制器。</li>\n<li>视图渲染，就是将ModelAndView对象中的数据放到request域中，用来让页面加载数据的。</li>\n<li>通过第8步，通过名称找到了对应的页面，通过第10步，request域中有了所需要的数据，那么就能够进行视图渲染了。最后将其返回即可。</li>\n</ul>\n<h4 id=\"请简述一下mybatis中，Collection和Association标签的区别？\"><a href=\"#请简述一下mybatis中，Collection和Association标签的区别？\" class=\"headerlink\" title=\"请简述一下mybatis中，Collection和Association标签的区别？\"></a><strong><em>请简述一下mybatis中，Collection和Association标签的区别？</em></strong></h4><ul>\n<li>assocation表示一对一和多对一的情况，比如一个Person类包含一个Card类，因为一个人对应一个身份证，这里是一对一的情况</li>\n<li>Collection表示的是一对多的情况。<blockquote>\n<p>一对一：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type&#x3D;&quot;com.glj.poji.Person&quot; id&#x3D;&quot;personMapper&quot;&gt;</span><br><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;association property&#x3D;&quot;card&quot; column&#x3D;&quot;card_id&quot;</span><br><span class=\"line\">select&#x3D;&quot;com.glj.mapper.CardMapper.selectCardById&quot;</span><br><span class=\"line\">javaType&#x3D;&quot;com.glj.poji.Card&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一对多：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type&#x3D;&quot;com.glj.pojo.Clazz&quot; id&#x3D;&quot;clazzResultMap&quot;&gt;</span><br><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;code&quot; column&#x3D;&quot;code&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;!-- property: 指的是集合的属性, column指的是数据库字段，ofType：指的是集合中元素的类型 --&gt;</span><br><span class=\"line\">&lt;collection </span><br><span class=\"line\">property&#x3D;&quot;students&quot; </span><br><span class=\"line\">ofType&#x3D;&quot;com.glj.pojo.Student&quot;</span><br><span class=\"line\">column&#x3D;&quot;id&quot; </span><br><span class=\"line\">javaType&#x3D;&quot;ArrayList&quot;</span><br><span class=\"line\">fetchType&#x3D;&quot;lazy&quot; </span><br><span class=\"line\">select&#x3D;&quot;com.glj.mapper.StudentMapper.selectStudentByClazzId&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;collection&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多对一：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type&#x3D;&quot;com.glj.pojo.Student&quot; id&#x3D;&quot;studentResultMap&quot;&gt;</span><br><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;association property&#x3D;&quot;clazz&quot; javaType&#x3D;&quot;com.glj.pojo.Clazz&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;code&quot; column&#x3D;&quot;code&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"请简述下Bean注入属性有几种方式，分别是什么？\"><a href=\"#请简述下Bean注入属性有几种方式，分别是什么？\" class=\"headerlink\" title=\"请简述下Bean注入属性有几种方式，分别是什么？\"></a><strong><em>请简述下Bean注入属性有几种方式，分别是什么？</em></strong></h4><p>由于spring的特性：DI（依赖注入），控制反转<br>Spring容器中支持的依赖注入方式主要有属性注入、构造函数注入、工厂方法注入。</p>\n<blockquote>\n<p><strong><em>属性注入</em></strong>：即通过setXXX( )方法注入bean的属性值或依赖对象。由于属性注入方式具有可选择性和灵活性高的特点，因此它也是实际开发中<strong>最常用的</strong>注入方式。对于属性注入方式来说，只能人为的在配置文件中提供保证，而无法在语法级别提供保证。</p>\n</blockquote>\n<p>例如：这是最简单的注入方式，假设有一个SpringAction，类中需要实例化一个SpringDao对象，那么就可以定义一个private的SpringDao成员变量，然后创建SpringDao的set方法（这是ioc的注入入口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bless.springdemo.action; </span><br><span class=\"line\">public class SpringAction &#123; </span><br><span class=\"line\">    &#x2F;&#x2F;注入对象springDao </span><br><span class=\"line\">    private SpringDao springDao; </span><br><span class=\"line\">    &#x2F;&#x2F;一定要写被注入对象的set方法 </span><br><span class=\"line\">    public void setSpringDao(SpringDao springDao) &#123; </span><br><span class=\"line\">    this.springDao &#x3D; springDao; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">public void ok()&#123; </span><br><span class=\"line\">    springDao.ok(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>随后编写spring的xml文件中，name属性是class属性的一个别名，class属性指类的全名，因为在SpringAction中有一个公共属性Springdao，所以要在标签中创建一个标签指定SpringDao。标签中的name就是SpringAction类中的SpringDao属性名，ref指下面，这样其实是spring将SpringDaoImpl对象实例化并且调用SpringAction的setSpringDao方法将SpringDao注入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--配置bean,配置后该类由spring管理--&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springAction&quot; class&#x3D;&quot;com.bless.springdemo.action.SpringAction&quot;&gt; </span><br><span class=\"line\">&lt;!--(1)依赖注入,配置当前类中相应的属性--&gt; </span><br><span class=\"line\">&lt;property name&#x3D;&quot;springDao&quot; ref&#x3D;&quot;springDao&quot;&gt;&lt;&#x2F;property&gt; </span><br><span class=\"line\">&lt;&#x2F;bean&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springDao&quot; class&#x3D;&quot;com.bless.springdemo.dao.impl.SpringDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><em>构造函数注入</em></strong>：除属性注入之外的另一种常用的注入方式，它可以保证一些必要的属性在bean实例化时就得到了设置，并在实例化后就可以使用。构造函数注入的前提是： bean必须提供带参的构造函数。</p>\n</blockquote>\n<p>这种方式的注入是指带有参数的构造函数注入，看下面的例子，我创建了两个成员变量SpringDao和User，<strong>但是并未设置对象的set方法</strong>，所以就不能支持第一种注入方式，这里的注入方式是在SpringAction的构造函数中注入，也就是说在创建SpringAction对象时要将SpringDao和User两个参数值传进来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class SpringAction &#123; </span><br><span class=\"line\">    &#x2F;&#x2F;注入对象springDao </span><br><span class=\"line\">    private SpringDao springDao; </span><br><span class=\"line\">    private User user; </span><br><span class=\"line\"> </span><br><span class=\"line\">    public SpringAction(SpringDao springDao,User user)&#123; </span><br><span class=\"line\">    this.springDao &#x3D; springDao; </span><br><span class=\"line\">    this.user &#x3D; user; </span><br><span class=\"line\">    System.out.println(&quot;构造方法调用springDao和user&quot;); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">public void save()&#123; </span><br><span class=\"line\">    user.setName(&quot;卡卡&quot;); </span><br><span class=\"line\">    springDao.save(user); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在XML文件中同样不用的形式，而是使用标签，ref属性同样指向其它标签的name属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--配置bean,配置后该类由spring管理--&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springAction&quot; class&#x3D;&quot;com.bless.springdemo.action.SpringAction&quot;&gt; </span><br><span class=\"line\">&lt;!--(2)创建构造器注入,如果主类有带参的构造方法则需添加此配置--&gt; </span><br><span class=\"line\">&lt;constructor-arg ref&#x3D;&quot;springDao&quot;&gt;&lt;&#x2F;constructor-arg&gt; </span><br><span class=\"line\">&lt;constructor-arg ref&#x3D;&quot;user&quot;&gt;&lt;&#x2F;constructor-arg&gt; </span><br><span class=\"line\">&lt;&#x2F;bean&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springDao&quot; class&#x3D;&quot;com.bless.springdemo.dao.impl.SpringDaoImpl&quot;&gt;&lt;&#x2F;bean&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;user&quot; class&#x3D;&quot;com.bless.springdemo.vo.User&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p><strong><em>Spring工厂注入</em></strong>：可以分为 <strong>静态</strong> 和 <strong>非静态</strong> 两种。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>构造函数注入选择理由：</p>\n<blockquote>\n<p>构造函数保证重要属性预先设置；<br>无需提供每个属性的setter方法，减少类的方法个数；<br>可以更好地封装类变量，避免外部错误调用。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>属性注入选择理由：</p>\n<blockquote>\n<p>属性过多时，构造函数变的臃肿；<br>构造函数注入灵活性不强，有时需要为属性注入null值；<br>多个构造函数时，配置上产生歧义，复杂度升高；<br>构造函数不利于类的继承和扩展；<br>构造函数注入会引起循环依赖的问题。 </p>\n</blockquote>\n</blockquote>\n<p>其实Spring为我们注入参数提供了这么多方法，那么这些方法必然有他们存在的道理，每个方法在某一问题上会有独特的优势，我们只需要按照我们具体的使用需求选择适合的方法来使用就好了，<strong>但一般不太推荐工厂方法注入</strong>。</p>\n<h4 id=\"请简述一下SpringMVC中，-RequestBody和-ResponseBody的区别？\"><a href=\"#请简述一下SpringMVC中，-RequestBody和-ResponseBody的区别？\" class=\"headerlink\" title=\"请简述一下SpringMVC中，@RequestBody和@ResponseBody的区别？\"></a><strong><em>请简述一下SpringMVC中，@RequestBody和@ResponseBody的区别？</em></strong></h4><ul>\n<li>@RequestBody：将前台的key，value数据data：name=“1”&amp;id=1 或者json数据data ：{name：“1”，id：1 } 转换成java对象入形参。</li>\n<li>@ResponseBody：将返回到前台的java对象 转换成json串输出。<blockquote>\n<p>两个注解都是用于数据格式和pojo对象之间的转换**</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"请说一下，mybatis中-和-的区别？\"><a href=\"#请说一下，mybatis中-和-的区别？\" class=\"headerlink\" title=\"请说一下，mybatis中#和@的区别？\"></a><strong><em>请说一下，mybatis中#和@的区别？</em></strong></h4><ul>\n<li>#{}可以防止sql注入，它是一种预编译的语句，即在使用jdbc时的prepareStatement，sql如果存在参数则会使用?占位符，使用#{}形成的sql语句，是带有引号的。比如select * from table1 where id = #{id}中实际上的select * from table1 where id = ‘1’，另外，使用xml配置时只能使用#{}语法，而且，当parameterType是int时，必须使用该语法。</li>\n<li>使用${}形成的sql语句没有被引号包裹，但是在以下sql语句时最好使用该语句：select ‘table1’ order by ‘id’表示按哪个表和按某个列排序时</li>\n</ul>\n<h4 id=\"请说一下事务的管理机制是什么？\"><a href=\"#请说一下事务的管理机制是什么？\" class=\"headerlink\" title=\"请说一下事务的管理机制是什么？\"></a><strong><em>请说一下事务的管理机制是什么？</em></strong></h4><p>可以查看<strong>Spring事务</strong>笔记模块</p>\n<h4 id=\"请简述下SpringMVC主要使用了哪些设计模式？\"><a href=\"#请简述下SpringMVC主要使用了哪些设计模式？\" class=\"headerlink\" title=\"请简述下SpringMVC主要使用了哪些设计模式？\"></a><strong><em>请简述下SpringMVC主要使用了哪些设计模式？</em></strong></h4><ul>\n<li>简单工厂模式，例如BeanFactory</li>\n<li>工厂方法模式</li>\n<li>适配器模式</li>\n<li>包装器模式</li>\n<li>代理模式</li>\n<li>观察者模式</li>\n<li>策略模式</li>\n<li>模板方法模式</li>\n</ul>\n<hr>\n<h4 id=\"Spring如何保证Controller并发的安全？\"><a href=\"#Spring如何保证Controller并发的安全？\" class=\"headerlink\" title=\"Spring如何保证Controller并发的安全？\"></a><strong><em>Spring如何保证Controller并发的安全？</em></strong></h4><p>Spring中controller默认是<strong>单例模式</strong>，如果加注解@Scope(prototype)则为多例模式，Spring多线程访问的都是一个controller，如果controller中含有类变量，那所有的请求都会共享这个变量，可能出现于预期的值不一样。可以用多例模式解决，但是使用多例模式会<strong>产生时间的开销</strong>。最好的解决方案是：<strong>使用ThreadLocal</strong>来保存类变量，将类变量保存在线程的变量域中，让不同的请求隔离开来。ThreadLocal会为每一个线程提供一个独立的变量副本</p>\n<blockquote>\n<p>ThreadLocal</p>\n</blockquote>\n<h4 id=\"Spring-Bean的生命周期是如何管理的？\"><a href=\"#Spring-Bean的生命周期是如何管理的？\" class=\"headerlink\" title=\"Spring Bean的生命周期是如何管理的？\"></a><strong><em>Spring Bean的生命周期是如何管理的？</em></strong></h4><ul>\n<li>实例化bean对象(通过构造方法或者工厂方法)</li>\n<li>设置对象属性(setter等)（依赖注入）</li>\n<li>如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）</li>\n<li>如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身</li>\n<li>将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法</li>\n<li>调用Bean的初始化方法</li>\n<li>将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法</li>\n<li>使用Bean</li>\n<li>容器关闭之前，调用Bean的销毁方法<blockquote>\n<p>总结就四步骤，实例化，属性赋值，初始化，销毁</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"“a-b”和“a-equals-b-”有什么区别？\"><a href=\"#“a-b”和“a-equals-b-”有什么区别？\" class=\"headerlink\" title=\"“a==b”和“a.equals(b)”有什么区别？\"></a><strong><em>“a==b”和“a.equals(b)”有什么区别？</em></strong></h4><ul>\n<li>“a==b”指的是对象的引用，只有当两个引用都指向<strong>堆中的同一个对象</strong>时才返回true</li>\n<li>“a.equals(b)”指的是内容的比较，当<strong>内容相等</strong>时候返回true，这里指的是逻辑一致性的比较。例如，String类需要重写equals方法，可以用于两个不同的对象，但是内容相等的比较</li>\n</ul>\n<h4 id=\"HashMap是线程安全的吗？为什么不是线程安全？\"><a href=\"#HashMap是线程安全的吗？为什么不是线程安全？\" class=\"headerlink\" title=\"HashMap是线程安全的吗？为什么不是线程安全？\"></a><strong><em>HashMap是线程安全的吗？为什么不是线程安全？</em></strong></h4><p>HashMap底层是一个entry数组，当发生哈希碰撞时，HashMap会采用链表的方式解决，在对应的数组位置上存放链表的头结点，然后新加入的节点会从改头结点加入，而此过程是非同步的。如果多个线程同时访问一个HashMap，在访问同一个hash映射的同时对映射关系进行结构上的修改，会造成不同步的现象。</p>\n<blockquote>\n<p>HashMap<strong>不是线程安全的</strong>，发生在多线程对同一个HashMap加入时，HashMao结构的变化，一般指的是<strong>Resize</strong>（包含扩容，ReHash），ReHash在并发的情况下回形成闭环。</p>\n</blockquote>\n<h4 id=\"HashMap-ConcurrentHashMap与LinkedHashMap\"><a href=\"#HashMap-ConcurrentHashMap与LinkedHashMap\" class=\"headerlink\" title=\"HashMap,ConcurrentHashMap与LinkedHashMap\"></a><strong><em>HashMap,ConcurrentHashMap与LinkedHashMap</em></strong></h4><ul>\n<li>HashMap线程不安全，无序</li>\n<li>ConcurrentHashMap采用分段锁方式进行数据同步，但是因为进行<strong>两次哈希算法</strong>（第一次确定该元素位于哪一个段即segment，第二次确定元素位置），因此效率相比于HashMap要低，但是在多线程的情况下满足一定的线程安全场景（牺牲性能换取数据安全）</li>\n<li>LinkedHashMap维护一个双链表，可以按数据的写入顺序读出<blockquote>\n<p>注意：这里ConcurrentHashMap指的是在<strong>一个段(segment)内线程安全</strong>，分配的锁作用于段上。应用场景是高并发，但是不能保证完全的线程安全</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"如何创建一个线程，有哪几种方式，他们的区别是什么？\"><a href=\"#如何创建一个线程，有哪几种方式，他们的区别是什么？\" class=\"headerlink\" title=\"如何创建一个线程，有哪几种方式，他们的区别是什么？\"></a><strong><em>如何创建一个线程，有哪几种方式，他们的区别是什么？</em></strong></h4><ul>\n<li>自定义Thread的子类，并重写父类的run方法即执行体，然后创建Thread的实例，调用实例的start方法</li>\n<li>自定义类实现Runnable接口，并重写run方法，然后使用new Thread()并注入自定义类对象，接着低啊用start方法</li>\n<li>通过Callable和Future创建线程<blockquote>\n<p>使用runnable和Callable接口的优势是可以多实现，还可以继承其他类<br>使用Thread子类继承的方式的优势是无需使用Thread.currentThread访问当前的线程，而只需要使用this即可</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"wait和sleep的区别\"><a href=\"#wait和sleep的区别\" class=\"headerlink\" title=\"wait和sleep的区别\"></a><strong><em>wait和sleep的区别</em></strong></h4><ul>\n<li>wait是Object对象上的方法，在同步代码块或者同步方法中使用，会释放当前的同步锁，让出cpu，进入等待状态，可以用notify和notifyAll方法唤醒</li>\n<li>sleep是Thread的静态方法，可以在任何地方使用，必须捕获异常，不会释放锁，可以使用interrupt方法唤醒</li>\n</ul>\n<h4 id=\"请描述一下HashMap的扩容过程\"><a href=\"#请描述一下HashMap的扩容过程\" class=\"headerlink\" title=\"请描述一下HashMap的扩容过程\"></a><strong><em>请描述一下HashMap的扩容过程</em></strong></h4><p>当HashMap填满了0.75负载因子的桶（bucket）时才会发生扩容: HashMap.size()&gt; Capacity(容量) * loadFactor(负载因子) —— Resize</p>\n<ul>\n<li>扩容: 创建一个新的entry空数组，长度是原数组的两倍</li>\n<li>Rehash: 因为长度不一样，哈希计算的值也不一定，遍历原来的entry数组，把所有的entry数组重新hash到扩容的数组上</li>\n</ul>\n<h4 id=\"请说一下强引用、软引用、弱引用、虚引用分别是什么？\"><a href=\"#请说一下强引用、软引用、弱引用、虚引用分别是什么？\" class=\"headerlink\" title=\"请说一下强引用、软引用、弱引用、虚引用分别是什么？\"></a><strong><em>请说一下强引用、软引用、弱引用、虚引用分别是什么？</em></strong></h4><ul>\n<li>强引用：一般是new出来的对象，垃圾回收器是不会回收强引用类型的对象，即使当程序抛出OutMemoryError错误也不会回收具有强引用的对象。如果想让强引用对象回收，可以认为设置对象为null让垃圾回收器GC回收</li>\n<li>软引用：当内存充足时不会进行垃圾回收，当内存不足时则会进行垃圾回收。当内存不足时，JVM优先对软引用设置为null，再进行垃圾回收</li>\n<li>弱引用：不管内存是否充足，都会回收软引用对象的内存。不过由于软引用是一个优先级很低的引用，所以不一定很快就会发现软引用</li>\n<li>虚引用：虚引用顾名思义，就是形同虚设。与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收</li>\n</ul>\n<h4 id=\"synchronize在静态方法和普通方法的区别？\"><a href=\"#synchronize在静态方法和普通方法的区别？\" class=\"headerlink\" title=\"synchronize在静态方法和普通方法的区别？\"></a><strong><em>synchronize在静态方法和普通方法的区别？</em></strong></h4><ul>\n<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象</li>\n<li>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象</li>\n</ul>\n<h4 id=\"如何处理HashMap的并发问题？\"><a href=\"#如何处理HashMap的并发问题？\" class=\"headerlink\" title=\"如何处理HashMap的并发问题？\"></a><strong><em>如何处理HashMap的并发问题？</em></strong></h4><p>使用ConcurrentHashMap</p>\n<h4 id=\"线程池的种类有哪些，他们的区别和使用场景？\"><a href=\"#线程池的种类有哪些，他们的区别和使用场景？\" class=\"headerlink\" title=\"线程池的种类有哪些，他们的区别和使用场景？\"></a><strong><em>线程池的种类有哪些，他们的区别和使用场景？</em></strong></h4><ul>\n<li><p>newCachedThreadPool：<br>  底层：返回ThreadPoolExecutor实例，corePoolSize为0；maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为60L；unit为TimeUnit.SECONDS；workQueue为SynchronousQueue(同步队列)<br>  通俗：当有新任务到来，则插入到SynchronousQueue中，由于SynchronousQueue是同步队列，因此会在池中寻找可用线程来执行，若有可以线程则执行，若没有可用线程则创建一个线程来执行该任务；若池中线程空闲时间超过指定大小，则该线程会被销毁。<br>  适用：<strong>执行很多短期异步的小程序或者负载较轻的服务器</strong></p>\n</li>\n<li><p>newFixedThreadPool：<br>  底层：返回ThreadPoolExecutor实例，接收参数为所设定线程数量nThread，corePoolSize为nThread，maximumPoolSize为nThread；keepAliveTime为0L(不限时)；unit为：TimeUnit.MILLISECONDS；WorkQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列<br>  通俗：创建可容纳固定数量线程的池子，每隔线程的存活时间是无限的，当池子满了就不在添加线程了；如果池中的所有线程均在繁忙状态，对于新任务会进入阻塞队列中(无界的阻塞队列)<br>  适用：<strong>执行长期的任务，性能好很多</strong></p>\n</li>\n<li><p>newSingleThreadExecutor:<br>  底层：FinalizableDelegatedExecutorService包装的ThreadPoolExecutor实例，corePoolSize为1；maximumPoolSize为1；keepAliveTime为0L；unit为：TimeUnit.MILLISECONDS；workQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列<br>  通俗：创建只有一个线程的线程池，且线程的存活时间是无限的；当该线程正繁忙时，对于新任务会进入阻塞队列中(无界的阻塞队列)<br>  适用：<strong>一个任务一个任务执行的场景</strong></p>\n</li>\n<li><p>NewScheduledThreadPool:<br>  底层：创建ScheduledThreadPoolExecutor实例，corePoolSize为传递来的参数，maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为0；unit为：TimeUnit.NANOSECONDS；workQueue为：new DelayedWorkQueue() 一个按超时时间升序排序的队列<br>  通俗：创建一个固定大小的线程池，线程池内线程存活时间无限制，线程池可以支持定时及周期性任务执行，如果所有线程均处于繁忙状态，对于新任务会进入DelayedWorkQueue队列中，这是一种按照超时时间排序的队列结构</p>\n</li>\n</ul>\n<h4 id=\"索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？\"><a href=\"#索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？\" class=\"headerlink\" title=\"索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？\"></a><strong><em>索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？</em></strong></h4><ul>\n<li>当sql语句使用了计算表达式（例如&lt;&gt; 、not in 、not exist、!=）、函数运算、正则表达式和like关键字字符串前有%不会使用索引</li>\n<li>当等值查询时值为数字时不会使用索引，值为字符串时会使用索引</li>\n<li>使用or语句索引失效，有且仅当or条件的所有列都加上索引才不会失效</li>\n</ul>\n<h4 id=\"什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？\"><a href=\"#什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？\" class=\"headerlink\" title=\"什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？\"></a><strong><em>什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？</em></strong></h4><ul>\n<li><strong><em>乐观锁</em></strong>：总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。<br>version方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。<br>核心SQL代码： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update table set x&#x3D;x+1, version&#x3D;version+1 where id&#x3D;#&#123;id&#125; and version&#x3D;#&#123;version&#125;;</span><br></pre></td></tr></table></figure>\nCAS操作方式：即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。 </li>\n</ul>\n<blockquote>\n<p>乐观锁一般乐观锁只用在高并发、多读少写的场景。</p>\n</blockquote>\n<ul>\n<li><strong><em>悲观锁</em></strong>： 总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁。共享锁、排它锁都是悲观锁。<br>一旦通过悲观锁锁定一个资源，那么其他需要操作该资源的使用方，只能等待直到锁被释放，好处在于可以减少并发，但是当并发量非常大的时候，由于锁消耗资源，并且可能锁定时间过长，容易导致系统性能下降，资源消耗严重。</li>\n</ul>\n<blockquote>\n<p>在并发量不是很大，并且出现并发情况导致的异常用户和系统都很难以接受的情况下，会选择悲观锁进行</p>\n</blockquote>\n<ul>\n<li><strong><em>共享锁</em></strong>：也称为读锁，对某一资源加共享锁，自身可以读该资源，其他人也可以读该资源（也可以再继续加共享锁，即 共享锁可多个共存），但无法修改。要想修改就必须等所有共享锁都释放完之后。语法为： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table lock in share mode</span><br></pre></td></tr></table></figure></li>\n<li><strong><em>排他锁</em></strong>：也称为写锁，对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作。语法为： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table for update ———— 增删改自动加了排他锁</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>数据库的增删改操作默认都会加排他锁，而查询不会加任何锁</p>\n</blockquote>\n<h4 id=\"左连接、右连接、内连接的区别是什么？\"><a href=\"#左连接、右连接、内连接的区别是什么？\" class=\"headerlink\" title=\"左连接、右连接、内连接的区别是什么？\"></a><strong><em>左连接、右连接、内连接的区别是什么？</em></strong></h4><ul>\n<li>左外连接：根据左表为主，查出左表关于右表的所有数据，包括null</li>\n<li>右外连接：根据右表为主，查出右表关于左表的所有数据，包括null</li>\n<li>内连接：也是自然连接，显示左表和右表共有的，即交集</li>\n</ul>\n<blockquote>\n<p>注意：使用join外连接的时候，在一般业务上如果不考虑性能问题的话就可以使用join，但是在数据量特别大而且关联表特别多（超过三表），，建议将关联的逻辑放在业务层实现，即在业务三次查询避免join连接。因为当数据量特别大的时候，数据库会使当次查询的时间缩短。在分库分表的情况下，join难以跨库查询，所以在业务量大的情况下使用业务层逻辑避免使用join连接</p>\n</blockquote>\n<h4 id=\"事务并发会出现什么问题？请举一个他们的例子？\"><a href=\"#事务并发会出现什么问题？请举一个他们的例子？\" class=\"headerlink\" title=\"事务并发会出现什么问题？请举一个他们的例子？\"></a><strong><em>事务并发会出现什么问题？请举一个他们的例子？</em></strong></h4><p>事务并发会出现以下四种问题：脏读、丢失修改、不可重复读、幻读</p>\n<ul>\n<li><p>脏读：假设A事务已修改了数据但是为提交事务，B事务读取了A的修改数据并执行，最后A事务回滚了，这就会造成脏读<br><img src=\"/articalPic/7.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>丢失修改：1.A事务撤销时，把已经提交的B事务的更新数据覆盖了<br><img src=\"/articalPic/8.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失<br><img src=\"/articalPic/9.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>不可重复读：发生在读取了已提交事务的数据，比如A事务第一次读数据时为1000，但是这时候B事务已经修改为900并且提交事务，而A第二次读该数据的时候发现了数据不一致，这就是不可重复读。<br><img src=\"/articalPic/10.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>幻读：发生在A读取B提交事务新增的数据时，比如A事务第一次读取数据为一条数据，但是这时候B事务已经新增数据且提交事务，而A第二次读了数据不明白造成幻读现象。<br><img src=\"/articalPic/11.jpg\" alt=\"avatar\"></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">幻象读和不可重复读是两个容易混淆的概念，前者是指读到了其他已经提交事务的新增数据，而后者是指读到了已经提交事务的更改数据（更改或删除），为了避免这两种情况，采取的对策是不同的，防止读取到更改数据，只需要对操作的数据添加行级锁，阻止操作中的数据发生变化，而防止读取到新增数据，则往往需要添加表级锁——将整个表锁定，防止新增数据（Oracle使用多版本数据的方式实现）。</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等\"><a href=\"#假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等\" class=\"headerlink\" title=\"假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等\"></a><strong><em>假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等</em></strong></h4><pre><code>fuck</code></pre><hr>\n<h4 id=\"说一下索引最左匹配原则是什么意思？\"><a href=\"#说一下索引最左匹配原则是什么意思？\" class=\"headerlink\" title=\"说一下索引最左匹配原则是什么意思？\"></a><strong><em>说一下索引最左匹配原则是什么意思？</em></strong></h4><p>因为mysql数据库为B+树，B+树是按照从左到右的顺序来建立搜索树的，比如有表含有name、age、set，且为这三个字段建立了联合索引，此时如果查询时按name为第一个查找顺序比如(“张三”,20)时，就会按张三为第一个比较因子查找到张三的数据，然后再往下查20的数据。假设没有name作为查询的第一顺序，比如(20,F)，此时B+树就不知道下一步该查哪个节点，假设为(张三,F)，这时会查找张三的数据，然后查找age的所有数据，然后再查出为f的数据。</p>\n<hr>\n<h4 id=\"Dubbo连接注册中心和直连有什么区别？\"><a href=\"#Dubbo连接注册中心和直连有什么区别？\" class=\"headerlink\" title=\"Dubbo连接注册中心和直连有什么区别？\"></a><strong><em>Dubbo连接注册中心和直连有什么区别？</em></strong></h4><h4 id=\"消息中间件如何解决消息丢失问题？\"><a href=\"#消息中间件如何解决消息丢失问题？\" class=\"headerlink\" title=\"消息中间件如何解决消息丢失问题？\"></a><strong><em>消息中间件如何解决消息丢失问题？</em></strong></h4><h4 id=\"如何保证redis中都是热点数据？\"><a href=\"#如何保证redis中都是热点数据？\" class=\"headerlink\" title=\"如何保证redis中都是热点数据？\"></a><strong><em>如何保证redis中都是热点数据？</em></strong></h4><h4 id=\"Redis缓存穿透、缓存雪崩是什么？如何解决？\"><a href=\"#Redis缓存穿透、缓存雪崩是什么？如何解决？\" class=\"headerlink\" title=\"Redis缓存穿透、缓存雪崩是什么？如何解决？\"></a><strong><em>Redis缓存穿透、缓存雪崩是什么？如何解决？</em></strong></h4><h4 id=\"Zoopkeeper是如何管理分布式锁的（节点层面出发）\"><a href=\"#Zoopkeeper是如何管理分布式锁的（节点层面出发）\" class=\"headerlink\" title=\"Zoopkeeper是如何管理分布式锁的（节点层面出发）\"></a><strong><em>Zoopkeeper是如何管理分布式锁的（节点层面出发）</em></strong></h4><h4 id=\"Zoopkeeper是如何管理集群状态的（节点层面出发）\"><a href=\"#Zoopkeeper是如何管理集群状态的（节点层面出发）\" class=\"headerlink\" title=\"Zoopkeeper是如何管理集群状态的（节点层面出发）\"></a><strong><em>Zoopkeeper是如何管理集群状态的（节点层面出发）</em></strong></h4><h4 id=\"Dubbo的底层实现原理和机制\"><a href=\"#Dubbo的底层实现原理和机制\" class=\"headerlink\" title=\"Dubbo的底层实现原理和机制\"></a><strong><em>Dubbo的底层实现原理和机制</em></strong></h4><h4 id=\"事务tranciation\"><a href=\"#事务tranciation\" class=\"headerlink\" title=\"事务tranciation\"></a><strong><em>事务tranciation</em></strong></h4><h4 id=\"Bean是单例的吗？\"><a href=\"#Bean是单例的吗？\" class=\"headerlink\" title=\"Bean是单例的吗？\"></a><strong><em>Bean是单例的吗？</em></strong></h4><h4 id=\"controller是不是线程安全\"><a href=\"#controller是不是线程安全\" class=\"headerlink\" title=\"controller是不是线程安全\"></a><strong><em>controller是不是线程安全</em></strong></h4><h4 id=\"数据库优化\"><a href=\"#数据库优化\" class=\"headerlink\" title=\"数据库优化\"></a><strong><em>数据库优化</em></strong></h4><h4 id=\"redis是单例的，为什么性能很高？\"><a href=\"#redis是单例的，为什么性能很高？\" class=\"headerlink\" title=\"redis是单例的，为什么性能很高？\"></a><strong><em>redis是单例的，为什么性能很高？</em></strong></h4><h4 id=\"mysql（oracle）varchar和char的区别是什么？\"><a href=\"#mysql（oracle）varchar和char的区别是什么？\" class=\"headerlink\" title=\"mysql（oracle）varchar和char的区别是什么？\"></a><strong><em>mysql（oracle）varchar和char的区别是什么？</em></strong></h4><h4 id=\"Sql语句执行是从后向前的？原理？\"><a href=\"#Sql语句执行是从后向前的？原理？\" class=\"headerlink\" title=\"Sql语句执行是从后向前的？原理？\"></a><strong><em>Sql语句执行是从后向前的？原理？</em></strong></h4><h4 id=\"SpringMVC的执行原理，具体细节？\"><a href=\"#SpringMVC的执行原理，具体细节？\" class=\"headerlink\" title=\"SpringMVC的执行原理，具体细节？\"></a><strong><em>SpringMVC的执行原理，具体细节？</em></strong></h4>","site":{"data":{}},"excerpt":"<h4 id=\"注意：笔记只对作者有用，不能保证可靠性\"><a href=\"#注意：笔记只对作者有用，不能保证可靠性\" class=\"headerlink\" title=\"注意：笔记只对作者有用，不能保证可靠性\"></a>注意：笔记只对作者有用，不能保证可靠性</h4>","more":"<h4 id=\"请简述SpringMVC的工作流程\"><a href=\"#请简述SpringMVC的工作流程\" class=\"headerlink\" title=\"请简述SpringMVC的工作流程?\"></a><strong><em>请简述SpringMVC的工作流程?</em></strong></h4><p><img src=\"/articalPic/19.png\" alt=\"avatar\"></p>\n<ul>\n<li>用户发起请求到前端控制器（DispatcherServlet），该控制器会过滤出哪些请求可以访问Servlet、哪些不能访问。就是url-pattern的作用，并且会加载springmvc.xml配置文件。</li>\n<li>前端控制器会找到处理器映射器（HandlerMapping），通过HandlerMapping完成url到controller映射的组件，简单来说，就是将在springmvc.xml中配置的或者注解的url与对应的处理类找到并进行存储，用map&lt;url,handler&gt;这样的方式来存储。</li>\n<li>HandlerMapping有了映射关系，并且找到url对应的处理器，HandlerMapping就会将其处理器（Handler）返回，在返回前，会加上很多拦截器。</li>\n<li>DispatcherServlet拿到Handler后，找到HandlerAdapter（处理器适配器），通过它来访问处理器，并执行处理器。</li>\n<li>执行处理器</li>\n<li>处理器会返回一个ModelAndView对象给HandlerAdapter</li>\n<li>通过HandlerAdapter将ModelAndView对象返回给前端控制器(DispatcherServlet)</li>\n<li>前端控制器请求视图解析器(ViewResolver)去进行视图解析，根据逻辑视图名解析成真正的视图(jsp)，其实就是将ModelAndView对象中存放视图的名称进行查找，找到对应的页面形成视图对象</li>\n<li>返回视图对象到前端控制器。</li>\n<li>视图渲染，就是将ModelAndView对象中的数据放到request域中，用来让页面加载数据的。</li>\n<li>通过第8步，通过名称找到了对应的页面，通过第10步，request域中有了所需要的数据，那么就能够进行视图渲染了。最后将其返回即可。</li>\n</ul>\n<h4 id=\"请简述一下mybatis中，Collection和Association标签的区别？\"><a href=\"#请简述一下mybatis中，Collection和Association标签的区别？\" class=\"headerlink\" title=\"请简述一下mybatis中，Collection和Association标签的区别？\"></a><strong><em>请简述一下mybatis中，Collection和Association标签的区别？</em></strong></h4><ul>\n<li>assocation表示一对一和多对一的情况，比如一个Person类包含一个Card类，因为一个人对应一个身份证，这里是一对一的情况</li>\n<li>Collection表示的是一对多的情况。<blockquote>\n<p>一对一：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type&#x3D;&quot;com.glj.poji.Person&quot; id&#x3D;&quot;personMapper&quot;&gt;</span><br><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;association property&#x3D;&quot;card&quot; column&#x3D;&quot;card_id&quot;</span><br><span class=\"line\">select&#x3D;&quot;com.glj.mapper.CardMapper.selectCardById&quot;</span><br><span class=\"line\">javaType&#x3D;&quot;com.glj.poji.Card&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一对多：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type&#x3D;&quot;com.glj.pojo.Clazz&quot; id&#x3D;&quot;clazzResultMap&quot;&gt;</span><br><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;code&quot; column&#x3D;&quot;code&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;!-- property: 指的是集合的属性, column指的是数据库字段，ofType：指的是集合中元素的类型 --&gt;</span><br><span class=\"line\">&lt;collection </span><br><span class=\"line\">property&#x3D;&quot;students&quot; </span><br><span class=\"line\">ofType&#x3D;&quot;com.glj.pojo.Student&quot;</span><br><span class=\"line\">column&#x3D;&quot;id&quot; </span><br><span class=\"line\">javaType&#x3D;&quot;ArrayList&quot;</span><br><span class=\"line\">fetchType&#x3D;&quot;lazy&quot; </span><br><span class=\"line\">select&#x3D;&quot;com.glj.mapper.StudentMapper.selectStudentByClazzId&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;collection&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多对一：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type&#x3D;&quot;com.glj.pojo.Student&quot; id&#x3D;&quot;studentResultMap&quot;&gt;</span><br><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;association property&#x3D;&quot;clazz&quot; javaType&#x3D;&quot;com.glj.pojo.Clazz&quot;&gt;</span><br><span class=\"line\">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;code&quot; column&#x3D;&quot;code&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;association&gt;</span><br><span class=\"line\">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"请简述下Bean注入属性有几种方式，分别是什么？\"><a href=\"#请简述下Bean注入属性有几种方式，分别是什么？\" class=\"headerlink\" title=\"请简述下Bean注入属性有几种方式，分别是什么？\"></a><strong><em>请简述下Bean注入属性有几种方式，分别是什么？</em></strong></h4><p>由于spring的特性：DI（依赖注入），控制反转<br>Spring容器中支持的依赖注入方式主要有属性注入、构造函数注入、工厂方法注入。</p>\n<blockquote>\n<p><strong><em>属性注入</em></strong>：即通过setXXX( )方法注入bean的属性值或依赖对象。由于属性注入方式具有可选择性和灵活性高的特点，因此它也是实际开发中<strong>最常用的</strong>注入方式。对于属性注入方式来说，只能人为的在配置文件中提供保证，而无法在语法级别提供保证。</p>\n</blockquote>\n<p>例如：这是最简单的注入方式，假设有一个SpringAction，类中需要实例化一个SpringDao对象，那么就可以定义一个private的SpringDao成员变量，然后创建SpringDao的set方法（这是ioc的注入入口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bless.springdemo.action; </span><br><span class=\"line\">public class SpringAction &#123; </span><br><span class=\"line\">    &#x2F;&#x2F;注入对象springDao </span><br><span class=\"line\">    private SpringDao springDao; </span><br><span class=\"line\">    &#x2F;&#x2F;一定要写被注入对象的set方法 </span><br><span class=\"line\">    public void setSpringDao(SpringDao springDao) &#123; </span><br><span class=\"line\">    this.springDao &#x3D; springDao; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">public void ok()&#123; </span><br><span class=\"line\">    springDao.ok(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>随后编写spring的xml文件中，name属性是class属性的一个别名，class属性指类的全名，因为在SpringAction中有一个公共属性Springdao，所以要在标签中创建一个标签指定SpringDao。标签中的name就是SpringAction类中的SpringDao属性名，ref指下面，这样其实是spring将SpringDaoImpl对象实例化并且调用SpringAction的setSpringDao方法将SpringDao注入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--配置bean,配置后该类由spring管理--&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springAction&quot; class&#x3D;&quot;com.bless.springdemo.action.SpringAction&quot;&gt; </span><br><span class=\"line\">&lt;!--(1)依赖注入,配置当前类中相应的属性--&gt; </span><br><span class=\"line\">&lt;property name&#x3D;&quot;springDao&quot; ref&#x3D;&quot;springDao&quot;&gt;&lt;&#x2F;property&gt; </span><br><span class=\"line\">&lt;&#x2F;bean&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springDao&quot; class&#x3D;&quot;com.bless.springdemo.dao.impl.SpringDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><em>构造函数注入</em></strong>：除属性注入之外的另一种常用的注入方式，它可以保证一些必要的属性在bean实例化时就得到了设置，并在实例化后就可以使用。构造函数注入的前提是： bean必须提供带参的构造函数。</p>\n</blockquote>\n<p>这种方式的注入是指带有参数的构造函数注入，看下面的例子，我创建了两个成员变量SpringDao和User，<strong>但是并未设置对象的set方法</strong>，所以就不能支持第一种注入方式，这里的注入方式是在SpringAction的构造函数中注入，也就是说在创建SpringAction对象时要将SpringDao和User两个参数值传进来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class SpringAction &#123; </span><br><span class=\"line\">    &#x2F;&#x2F;注入对象springDao </span><br><span class=\"line\">    private SpringDao springDao; </span><br><span class=\"line\">    private User user; </span><br><span class=\"line\"> </span><br><span class=\"line\">    public SpringAction(SpringDao springDao,User user)&#123; </span><br><span class=\"line\">    this.springDao &#x3D; springDao; </span><br><span class=\"line\">    this.user &#x3D; user; </span><br><span class=\"line\">    System.out.println(&quot;构造方法调用springDao和user&quot;); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">public void save()&#123; </span><br><span class=\"line\">    user.setName(&quot;卡卡&quot;); </span><br><span class=\"line\">    springDao.save(user); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在XML文件中同样不用的形式，而是使用标签，ref属性同样指向其它标签的name属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--配置bean,配置后该类由spring管理--&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springAction&quot; class&#x3D;&quot;com.bless.springdemo.action.SpringAction&quot;&gt; </span><br><span class=\"line\">&lt;!--(2)创建构造器注入,如果主类有带参的构造方法则需添加此配置--&gt; </span><br><span class=\"line\">&lt;constructor-arg ref&#x3D;&quot;springDao&quot;&gt;&lt;&#x2F;constructor-arg&gt; </span><br><span class=\"line\">&lt;constructor-arg ref&#x3D;&quot;user&quot;&gt;&lt;&#x2F;constructor-arg&gt; </span><br><span class=\"line\">&lt;&#x2F;bean&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;springDao&quot; class&#x3D;&quot;com.bless.springdemo.dao.impl.SpringDaoImpl&quot;&gt;&lt;&#x2F;bean&gt; </span><br><span class=\"line\">&lt;bean name&#x3D;&quot;user&quot; class&#x3D;&quot;com.bless.springdemo.vo.User&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p><strong><em>Spring工厂注入</em></strong>：可以分为 <strong>静态</strong> 和 <strong>非静态</strong> 两种。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>构造函数注入选择理由：</p>\n<blockquote>\n<p>构造函数保证重要属性预先设置；<br>无需提供每个属性的setter方法，减少类的方法个数；<br>可以更好地封装类变量，避免外部错误调用。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>属性注入选择理由：</p>\n<blockquote>\n<p>属性过多时，构造函数变的臃肿；<br>构造函数注入灵活性不强，有时需要为属性注入null值；<br>多个构造函数时，配置上产生歧义，复杂度升高；<br>构造函数不利于类的继承和扩展；<br>构造函数注入会引起循环依赖的问题。 </p>\n</blockquote>\n</blockquote>\n<p>其实Spring为我们注入参数提供了这么多方法，那么这些方法必然有他们存在的道理，每个方法在某一问题上会有独特的优势，我们只需要按照我们具体的使用需求选择适合的方法来使用就好了，<strong>但一般不太推荐工厂方法注入</strong>。</p>\n<h4 id=\"请简述一下SpringMVC中，-RequestBody和-ResponseBody的区别？\"><a href=\"#请简述一下SpringMVC中，-RequestBody和-ResponseBody的区别？\" class=\"headerlink\" title=\"请简述一下SpringMVC中，@RequestBody和@ResponseBody的区别？\"></a><strong><em>请简述一下SpringMVC中，@RequestBody和@ResponseBody的区别？</em></strong></h4><ul>\n<li>@RequestBody：将前台的key，value数据data：name=“1”&amp;id=1 或者json数据data ：{name：“1”，id：1 } 转换成java对象入形参。</li>\n<li>@ResponseBody：将返回到前台的java对象 转换成json串输出。<blockquote>\n<p>两个注解都是用于数据格式和pojo对象之间的转换**</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"请说一下，mybatis中-和-的区别？\"><a href=\"#请说一下，mybatis中-和-的区别？\" class=\"headerlink\" title=\"请说一下，mybatis中#和@的区别？\"></a><strong><em>请说一下，mybatis中#和@的区别？</em></strong></h4><ul>\n<li>#{}可以防止sql注入，它是一种预编译的语句，即在使用jdbc时的prepareStatement，sql如果存在参数则会使用?占位符，使用#{}形成的sql语句，是带有引号的。比如select * from table1 where id = #{id}中实际上的select * from table1 where id = ‘1’，另外，使用xml配置时只能使用#{}语法，而且，当parameterType是int时，必须使用该语法。</li>\n<li>使用${}形成的sql语句没有被引号包裹，但是在以下sql语句时最好使用该语句：select ‘table1’ order by ‘id’表示按哪个表和按某个列排序时</li>\n</ul>\n<h4 id=\"请说一下事务的管理机制是什么？\"><a href=\"#请说一下事务的管理机制是什么？\" class=\"headerlink\" title=\"请说一下事务的管理机制是什么？\"></a><strong><em>请说一下事务的管理机制是什么？</em></strong></h4><p>可以查看<strong>Spring事务</strong>笔记模块</p>\n<h4 id=\"请简述下SpringMVC主要使用了哪些设计模式？\"><a href=\"#请简述下SpringMVC主要使用了哪些设计模式？\" class=\"headerlink\" title=\"请简述下SpringMVC主要使用了哪些设计模式？\"></a><strong><em>请简述下SpringMVC主要使用了哪些设计模式？</em></strong></h4><ul>\n<li>简单工厂模式，例如BeanFactory</li>\n<li>工厂方法模式</li>\n<li>适配器模式</li>\n<li>包装器模式</li>\n<li>代理模式</li>\n<li>观察者模式</li>\n<li>策略模式</li>\n<li>模板方法模式</li>\n</ul>\n<hr>\n<h4 id=\"Spring如何保证Controller并发的安全？\"><a href=\"#Spring如何保证Controller并发的安全？\" class=\"headerlink\" title=\"Spring如何保证Controller并发的安全？\"></a><strong><em>Spring如何保证Controller并发的安全？</em></strong></h4><p>Spring中controller默认是<strong>单例模式</strong>，如果加注解@Scope(prototype)则为多例模式，Spring多线程访问的都是一个controller，如果controller中含有类变量，那所有的请求都会共享这个变量，可能出现于预期的值不一样。可以用多例模式解决，但是使用多例模式会<strong>产生时间的开销</strong>。最好的解决方案是：<strong>使用ThreadLocal</strong>来保存类变量，将类变量保存在线程的变量域中，让不同的请求隔离开来。ThreadLocal会为每一个线程提供一个独立的变量副本</p>\n<blockquote>\n<p>ThreadLocal</p>\n</blockquote>\n<h4 id=\"Spring-Bean的生命周期是如何管理的？\"><a href=\"#Spring-Bean的生命周期是如何管理的？\" class=\"headerlink\" title=\"Spring Bean的生命周期是如何管理的？\"></a><strong><em>Spring Bean的生命周期是如何管理的？</em></strong></h4><ul>\n<li>实例化bean对象(通过构造方法或者工厂方法)</li>\n<li>设置对象属性(setter等)（依赖注入）</li>\n<li>如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）</li>\n<li>如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身</li>\n<li>将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法</li>\n<li>调用Bean的初始化方法</li>\n<li>将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法</li>\n<li>使用Bean</li>\n<li>容器关闭之前，调用Bean的销毁方法<blockquote>\n<p>总结就四步骤，实例化，属性赋值，初始化，销毁</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"“a-b”和“a-equals-b-”有什么区别？\"><a href=\"#“a-b”和“a-equals-b-”有什么区别？\" class=\"headerlink\" title=\"“a==b”和“a.equals(b)”有什么区别？\"></a><strong><em>“a==b”和“a.equals(b)”有什么区别？</em></strong></h4><ul>\n<li>“a==b”指的是对象的引用，只有当两个引用都指向<strong>堆中的同一个对象</strong>时才返回true</li>\n<li>“a.equals(b)”指的是内容的比较，当<strong>内容相等</strong>时候返回true，这里指的是逻辑一致性的比较。例如，String类需要重写equals方法，可以用于两个不同的对象，但是内容相等的比较</li>\n</ul>\n<h4 id=\"HashMap是线程安全的吗？为什么不是线程安全？\"><a href=\"#HashMap是线程安全的吗？为什么不是线程安全？\" class=\"headerlink\" title=\"HashMap是线程安全的吗？为什么不是线程安全？\"></a><strong><em>HashMap是线程安全的吗？为什么不是线程安全？</em></strong></h4><p>HashMap底层是一个entry数组，当发生哈希碰撞时，HashMap会采用链表的方式解决，在对应的数组位置上存放链表的头结点，然后新加入的节点会从改头结点加入，而此过程是非同步的。如果多个线程同时访问一个HashMap，在访问同一个hash映射的同时对映射关系进行结构上的修改，会造成不同步的现象。</p>\n<blockquote>\n<p>HashMap<strong>不是线程安全的</strong>，发生在多线程对同一个HashMap加入时，HashMao结构的变化，一般指的是<strong>Resize</strong>（包含扩容，ReHash），ReHash在并发的情况下回形成闭环。</p>\n</blockquote>\n<h4 id=\"HashMap-ConcurrentHashMap与LinkedHashMap\"><a href=\"#HashMap-ConcurrentHashMap与LinkedHashMap\" class=\"headerlink\" title=\"HashMap,ConcurrentHashMap与LinkedHashMap\"></a><strong><em>HashMap,ConcurrentHashMap与LinkedHashMap</em></strong></h4><ul>\n<li>HashMap线程不安全，无序</li>\n<li>ConcurrentHashMap采用分段锁方式进行数据同步，但是因为进行<strong>两次哈希算法</strong>（第一次确定该元素位于哪一个段即segment，第二次确定元素位置），因此效率相比于HashMap要低，但是在多线程的情况下满足一定的线程安全场景（牺牲性能换取数据安全）</li>\n<li>LinkedHashMap维护一个双链表，可以按数据的写入顺序读出<blockquote>\n<p>注意：这里ConcurrentHashMap指的是在<strong>一个段(segment)内线程安全</strong>，分配的锁作用于段上。应用场景是高并发，但是不能保证完全的线程安全</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"如何创建一个线程，有哪几种方式，他们的区别是什么？\"><a href=\"#如何创建一个线程，有哪几种方式，他们的区别是什么？\" class=\"headerlink\" title=\"如何创建一个线程，有哪几种方式，他们的区别是什么？\"></a><strong><em>如何创建一个线程，有哪几种方式，他们的区别是什么？</em></strong></h4><ul>\n<li>自定义Thread的子类，并重写父类的run方法即执行体，然后创建Thread的实例，调用实例的start方法</li>\n<li>自定义类实现Runnable接口，并重写run方法，然后使用new Thread()并注入自定义类对象，接着低啊用start方法</li>\n<li>通过Callable和Future创建线程<blockquote>\n<p>使用runnable和Callable接口的优势是可以多实现，还可以继承其他类<br>使用Thread子类继承的方式的优势是无需使用Thread.currentThread访问当前的线程，而只需要使用this即可</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"wait和sleep的区别\"><a href=\"#wait和sleep的区别\" class=\"headerlink\" title=\"wait和sleep的区别\"></a><strong><em>wait和sleep的区别</em></strong></h4><ul>\n<li>wait是Object对象上的方法，在同步代码块或者同步方法中使用，会释放当前的同步锁，让出cpu，进入等待状态，可以用notify和notifyAll方法唤醒</li>\n<li>sleep是Thread的静态方法，可以在任何地方使用，必须捕获异常，不会释放锁，可以使用interrupt方法唤醒</li>\n</ul>\n<h4 id=\"请描述一下HashMap的扩容过程\"><a href=\"#请描述一下HashMap的扩容过程\" class=\"headerlink\" title=\"请描述一下HashMap的扩容过程\"></a><strong><em>请描述一下HashMap的扩容过程</em></strong></h4><p>当HashMap填满了0.75负载因子的桶（bucket）时才会发生扩容: HashMap.size()&gt; Capacity(容量) * loadFactor(负载因子) —— Resize</p>\n<ul>\n<li>扩容: 创建一个新的entry空数组，长度是原数组的两倍</li>\n<li>Rehash: 因为长度不一样，哈希计算的值也不一定，遍历原来的entry数组，把所有的entry数组重新hash到扩容的数组上</li>\n</ul>\n<h4 id=\"请说一下强引用、软引用、弱引用、虚引用分别是什么？\"><a href=\"#请说一下强引用、软引用、弱引用、虚引用分别是什么？\" class=\"headerlink\" title=\"请说一下强引用、软引用、弱引用、虚引用分别是什么？\"></a><strong><em>请说一下强引用、软引用、弱引用、虚引用分别是什么？</em></strong></h4><ul>\n<li>强引用：一般是new出来的对象，垃圾回收器是不会回收强引用类型的对象，即使当程序抛出OutMemoryError错误也不会回收具有强引用的对象。如果想让强引用对象回收，可以认为设置对象为null让垃圾回收器GC回收</li>\n<li>软引用：当内存充足时不会进行垃圾回收，当内存不足时则会进行垃圾回收。当内存不足时，JVM优先对软引用设置为null，再进行垃圾回收</li>\n<li>弱引用：不管内存是否充足，都会回收软引用对象的内存。不过由于软引用是一个优先级很低的引用，所以不一定很快就会发现软引用</li>\n<li>虚引用：虚引用顾名思义，就是形同虚设。与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收</li>\n</ul>\n<h4 id=\"synchronize在静态方法和普通方法的区别？\"><a href=\"#synchronize在静态方法和普通方法的区别？\" class=\"headerlink\" title=\"synchronize在静态方法和普通方法的区别？\"></a><strong><em>synchronize在静态方法和普通方法的区别？</em></strong></h4><ul>\n<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象</li>\n<li>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象</li>\n</ul>\n<h4 id=\"如何处理HashMap的并发问题？\"><a href=\"#如何处理HashMap的并发问题？\" class=\"headerlink\" title=\"如何处理HashMap的并发问题？\"></a><strong><em>如何处理HashMap的并发问题？</em></strong></h4><p>使用ConcurrentHashMap</p>\n<h4 id=\"线程池的种类有哪些，他们的区别和使用场景？\"><a href=\"#线程池的种类有哪些，他们的区别和使用场景？\" class=\"headerlink\" title=\"线程池的种类有哪些，他们的区别和使用场景？\"></a><strong><em>线程池的种类有哪些，他们的区别和使用场景？</em></strong></h4><ul>\n<li><p>newCachedThreadPool：<br>  底层：返回ThreadPoolExecutor实例，corePoolSize为0；maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为60L；unit为TimeUnit.SECONDS；workQueue为SynchronousQueue(同步队列)<br>  通俗：当有新任务到来，则插入到SynchronousQueue中，由于SynchronousQueue是同步队列，因此会在池中寻找可用线程来执行，若有可以线程则执行，若没有可用线程则创建一个线程来执行该任务；若池中线程空闲时间超过指定大小，则该线程会被销毁。<br>  适用：<strong>执行很多短期异步的小程序或者负载较轻的服务器</strong></p>\n</li>\n<li><p>newFixedThreadPool：<br>  底层：返回ThreadPoolExecutor实例，接收参数为所设定线程数量nThread，corePoolSize为nThread，maximumPoolSize为nThread；keepAliveTime为0L(不限时)；unit为：TimeUnit.MILLISECONDS；WorkQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列<br>  通俗：创建可容纳固定数量线程的池子，每隔线程的存活时间是无限的，当池子满了就不在添加线程了；如果池中的所有线程均在繁忙状态，对于新任务会进入阻塞队列中(无界的阻塞队列)<br>  适用：<strong>执行长期的任务，性能好很多</strong></p>\n</li>\n<li><p>newSingleThreadExecutor:<br>  底层：FinalizableDelegatedExecutorService包装的ThreadPoolExecutor实例，corePoolSize为1；maximumPoolSize为1；keepAliveTime为0L；unit为：TimeUnit.MILLISECONDS；workQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列<br>  通俗：创建只有一个线程的线程池，且线程的存活时间是无限的；当该线程正繁忙时，对于新任务会进入阻塞队列中(无界的阻塞队列)<br>  适用：<strong>一个任务一个任务执行的场景</strong></p>\n</li>\n<li><p>NewScheduledThreadPool:<br>  底层：创建ScheduledThreadPoolExecutor实例，corePoolSize为传递来的参数，maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为0；unit为：TimeUnit.NANOSECONDS；workQueue为：new DelayedWorkQueue() 一个按超时时间升序排序的队列<br>  通俗：创建一个固定大小的线程池，线程池内线程存活时间无限制，线程池可以支持定时及周期性任务执行，如果所有线程均处于繁忙状态，对于新任务会进入DelayedWorkQueue队列中，这是一种按照超时时间排序的队列结构</p>\n</li>\n</ul>\n<h4 id=\"索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？\"><a href=\"#索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？\" class=\"headerlink\" title=\"索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？\"></a><strong><em>索引使用的注意条件可以大概说几个吗？为什么有时候索引会失效？</em></strong></h4><ul>\n<li>当sql语句使用了计算表达式（例如&lt;&gt; 、not in 、not exist、!=）、函数运算、正则表达式和like关键字字符串前有%不会使用索引</li>\n<li>当等值查询时值为数字时不会使用索引，值为字符串时会使用索引</li>\n<li>使用or语句索引失效，有且仅当or条件的所有列都加上索引才不会失效</li>\n</ul>\n<h4 id=\"什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？\"><a href=\"#什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？\" class=\"headerlink\" title=\"什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？\"></a><strong><em>什么是悲观锁、乐观锁、排它锁、共享锁？他们的应用场景是什么？</em></strong></h4><ul>\n<li><strong><em>乐观锁</em></strong>：总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。<br>version方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。<br>核心SQL代码： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update table set x&#x3D;x+1, version&#x3D;version+1 where id&#x3D;#&#123;id&#125; and version&#x3D;#&#123;version&#125;;</span><br></pre></td></tr></table></figure>\nCAS操作方式：即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。 </li>\n</ul>\n<blockquote>\n<p>乐观锁一般乐观锁只用在高并发、多读少写的场景。</p>\n</blockquote>\n<ul>\n<li><strong><em>悲观锁</em></strong>： 总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁。共享锁、排它锁都是悲观锁。<br>一旦通过悲观锁锁定一个资源，那么其他需要操作该资源的使用方，只能等待直到锁被释放，好处在于可以减少并发，但是当并发量非常大的时候，由于锁消耗资源，并且可能锁定时间过长，容易导致系统性能下降，资源消耗严重。</li>\n</ul>\n<blockquote>\n<p>在并发量不是很大，并且出现并发情况导致的异常用户和系统都很难以接受的情况下，会选择悲观锁进行</p>\n</blockquote>\n<ul>\n<li><strong><em>共享锁</em></strong>：也称为读锁，对某一资源加共享锁，自身可以读该资源，其他人也可以读该资源（也可以再继续加共享锁，即 共享锁可多个共存），但无法修改。要想修改就必须等所有共享锁都释放完之后。语法为： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table lock in share mode</span><br></pre></td></tr></table></figure></li>\n<li><strong><em>排他锁</em></strong>：也称为写锁，对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作。语法为： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table for update ———— 增删改自动加了排他锁</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>数据库的增删改操作默认都会加排他锁，而查询不会加任何锁</p>\n</blockquote>\n<h4 id=\"左连接、右连接、内连接的区别是什么？\"><a href=\"#左连接、右连接、内连接的区别是什么？\" class=\"headerlink\" title=\"左连接、右连接、内连接的区别是什么？\"></a><strong><em>左连接、右连接、内连接的区别是什么？</em></strong></h4><ul>\n<li>左外连接：根据左表为主，查出左表关于右表的所有数据，包括null</li>\n<li>右外连接：根据右表为主，查出右表关于左表的所有数据，包括null</li>\n<li>内连接：也是自然连接，显示左表和右表共有的，即交集</li>\n</ul>\n<blockquote>\n<p>注意：使用join外连接的时候，在一般业务上如果不考虑性能问题的话就可以使用join，但是在数据量特别大而且关联表特别多（超过三表），，建议将关联的逻辑放在业务层实现，即在业务三次查询避免join连接。因为当数据量特别大的时候，数据库会使当次查询的时间缩短。在分库分表的情况下，join难以跨库查询，所以在业务量大的情况下使用业务层逻辑避免使用join连接</p>\n</blockquote>\n<h4 id=\"事务并发会出现什么问题？请举一个他们的例子？\"><a href=\"#事务并发会出现什么问题？请举一个他们的例子？\" class=\"headerlink\" title=\"事务并发会出现什么问题？请举一个他们的例子？\"></a><strong><em>事务并发会出现什么问题？请举一个他们的例子？</em></strong></h4><p>事务并发会出现以下四种问题：脏读、丢失修改、不可重复读、幻读</p>\n<ul>\n<li><p>脏读：假设A事务已修改了数据但是为提交事务，B事务读取了A的修改数据并执行，最后A事务回滚了，这就会造成脏读<br><img src=\"/articalPic/7.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>丢失修改：1.A事务撤销时，把已经提交的B事务的更新数据覆盖了<br><img src=\"/articalPic/8.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失<br><img src=\"/articalPic/9.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>不可重复读：发生在读取了已提交事务的数据，比如A事务第一次读数据时为1000，但是这时候B事务已经修改为900并且提交事务，而A第二次读该数据的时候发现了数据不一致，这就是不可重复读。<br><img src=\"/articalPic/10.jpg\" alt=\"avatar\"></p>\n</li>\n<li><p>幻读：发生在A读取B提交事务新增的数据时，比如A事务第一次读取数据为一条数据，但是这时候B事务已经新增数据且提交事务，而A第二次读了数据不明白造成幻读现象。<br><img src=\"/articalPic/11.jpg\" alt=\"avatar\"></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">幻象读和不可重复读是两个容易混淆的概念，前者是指读到了其他已经提交事务的新增数据，而后者是指读到了已经提交事务的更改数据（更改或删除），为了避免这两种情况，采取的对策是不同的，防止读取到更改数据，只需要对操作的数据添加行级锁，阻止操作中的数据发生变化，而防止读取到新增数据，则往往需要添加表级锁——将整个表锁定，防止新增数据（Oracle使用多版本数据的方式实现）。</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等\"><a href=\"#假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等\" class=\"headerlink\" title=\"假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等\"></a><strong><em>假如要对1亿条数据进行增删改和查询，请给出一个优化建议，没有任何限制，可以添加合适中间件、设置合理的数据库结构等</em></strong></h4><pre><code>fuck</code></pre><hr>\n<h4 id=\"说一下索引最左匹配原则是什么意思？\"><a href=\"#说一下索引最左匹配原则是什么意思？\" class=\"headerlink\" title=\"说一下索引最左匹配原则是什么意思？\"></a><strong><em>说一下索引最左匹配原则是什么意思？</em></strong></h4><p>因为mysql数据库为B+树，B+树是按照从左到右的顺序来建立搜索树的，比如有表含有name、age、set，且为这三个字段建立了联合索引，此时如果查询时按name为第一个查找顺序比如(“张三”,20)时，就会按张三为第一个比较因子查找到张三的数据，然后再往下查20的数据。假设没有name作为查询的第一顺序，比如(20,F)，此时B+树就不知道下一步该查哪个节点，假设为(张三,F)，这时会查找张三的数据，然后查找age的所有数据，然后再查出为f的数据。</p>\n<hr>\n<h4 id=\"Dubbo连接注册中心和直连有什么区别？\"><a href=\"#Dubbo连接注册中心和直连有什么区别？\" class=\"headerlink\" title=\"Dubbo连接注册中心和直连有什么区别？\"></a><strong><em>Dubbo连接注册中心和直连有什么区别？</em></strong></h4><h4 id=\"消息中间件如何解决消息丢失问题？\"><a href=\"#消息中间件如何解决消息丢失问题？\" class=\"headerlink\" title=\"消息中间件如何解决消息丢失问题？\"></a><strong><em>消息中间件如何解决消息丢失问题？</em></strong></h4><h4 id=\"如何保证redis中都是热点数据？\"><a href=\"#如何保证redis中都是热点数据？\" class=\"headerlink\" title=\"如何保证redis中都是热点数据？\"></a><strong><em>如何保证redis中都是热点数据？</em></strong></h4><h4 id=\"Redis缓存穿透、缓存雪崩是什么？如何解决？\"><a href=\"#Redis缓存穿透、缓存雪崩是什么？如何解决？\" class=\"headerlink\" title=\"Redis缓存穿透、缓存雪崩是什么？如何解决？\"></a><strong><em>Redis缓存穿透、缓存雪崩是什么？如何解决？</em></strong></h4><h4 id=\"Zoopkeeper是如何管理分布式锁的（节点层面出发）\"><a href=\"#Zoopkeeper是如何管理分布式锁的（节点层面出发）\" class=\"headerlink\" title=\"Zoopkeeper是如何管理分布式锁的（节点层面出发）\"></a><strong><em>Zoopkeeper是如何管理分布式锁的（节点层面出发）</em></strong></h4><h4 id=\"Zoopkeeper是如何管理集群状态的（节点层面出发）\"><a href=\"#Zoopkeeper是如何管理集群状态的（节点层面出发）\" class=\"headerlink\" title=\"Zoopkeeper是如何管理集群状态的（节点层面出发）\"></a><strong><em>Zoopkeeper是如何管理集群状态的（节点层面出发）</em></strong></h4><h4 id=\"Dubbo的底层实现原理和机制\"><a href=\"#Dubbo的底层实现原理和机制\" class=\"headerlink\" title=\"Dubbo的底层实现原理和机制\"></a><strong><em>Dubbo的底层实现原理和机制</em></strong></h4><h4 id=\"事务tranciation\"><a href=\"#事务tranciation\" class=\"headerlink\" title=\"事务tranciation\"></a><strong><em>事务tranciation</em></strong></h4><h4 id=\"Bean是单例的吗？\"><a href=\"#Bean是单例的吗？\" class=\"headerlink\" title=\"Bean是单例的吗？\"></a><strong><em>Bean是单例的吗？</em></strong></h4><h4 id=\"controller是不是线程安全\"><a href=\"#controller是不是线程安全\" class=\"headerlink\" title=\"controller是不是线程安全\"></a><strong><em>controller是不是线程安全</em></strong></h4><h4 id=\"数据库优化\"><a href=\"#数据库优化\" class=\"headerlink\" title=\"数据库优化\"></a><strong><em>数据库优化</em></strong></h4><h4 id=\"redis是单例的，为什么性能很高？\"><a href=\"#redis是单例的，为什么性能很高？\" class=\"headerlink\" title=\"redis是单例的，为什么性能很高？\"></a><strong><em>redis是单例的，为什么性能很高？</em></strong></h4><h4 id=\"mysql（oracle）varchar和char的区别是什么？\"><a href=\"#mysql（oracle）varchar和char的区别是什么？\" class=\"headerlink\" title=\"mysql（oracle）varchar和char的区别是什么？\"></a><strong><em>mysql（oracle）varchar和char的区别是什么？</em></strong></h4><h4 id=\"Sql语句执行是从后向前的？原理？\"><a href=\"#Sql语句执行是从后向前的？原理？\" class=\"headerlink\" title=\"Sql语句执行是从后向前的？原理？\"></a><strong><em>Sql语句执行是从后向前的？原理？</em></strong></h4><h4 id=\"SpringMVC的执行原理，具体细节？\"><a href=\"#SpringMVC的执行原理，具体细节？\" class=\"headerlink\" title=\"SpringMVC的执行原理，具体细节？\"></a><strong><em>SpringMVC的执行原理，具体细节？</em></strong></h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck56ooo9w0000ejupesr71wmp","category_id":"ck56oooai0003ejupf5d1cks2","_id":"ck56oooaz000eejupfmokhdhl"},{"post_id":"ck56oooap0007ejup9qil0bq0","category_id":"ck56oooai0003ejupf5d1cks2","_id":"ck56ooob1000gejup6pxj0cun"},{"post_id":"ck56oooav000bejup9kpr0rc5","category_id":"ck56oooai0003ejupf5d1cks2","_id":"ck56ooob2000jejupel66c0lf"},{"post_id":"ck56oooag0002ejupdtme4zgp","category_id":"ck56oooai0003ejupf5d1cks2","_id":"ck56ooob3000lejupb6x1gwqj"},{"post_id":"ck56oooam0005ejup9lov3xrc","category_id":"ck56oooai0003ejupf5d1cks2","_id":"ck56ooob3000nejup4vjheilf"},{"post_id":"ck56oooan0006ejup7ctf3pfv","category_id":"ck56ooob2000iejuphy3p8m7o","_id":"ck56ooob4000rejup3q9pb8hq"},{"post_id":"ck56oooax000cejupf8bi6tm4","category_id":"ck56ooob3000oejup6u7524yh","_id":"ck56ooob5000uejup3bi8fzic"}],"PostTag":[{"post_id":"ck56ooo9w0000ejupesr71wmp","tag_id":"ck56oooal0004ejup7le5d2aj","_id":"ck56oooau000aejup0bnx77jj"},{"post_id":"ck56oooag0002ejupdtme4zgp","tag_id":"ck56oooar0009ejuphd7259ov","_id":"ck56ooob1000hejupg73c60fj"},{"post_id":"ck56oooam0005ejup9lov3xrc","tag_id":"ck56oooaz000fejup4fra1467","_id":"ck56ooob3000mejuphec7901z"},{"post_id":"ck56oooan0006ejup7ctf3pfv","tag_id":"ck56ooob2000kejup8mticpcp","_id":"ck56ooob4000qejup1t83ajet"},{"post_id":"ck56oooap0007ejup9qil0bq0","tag_id":"ck56oooaz000fejup4fra1467","_id":"ck56ooob5000tejup8tpcfqdm"},{"post_id":"ck56oooav000bejup9kpr0rc5","tag_id":"ck56ooob4000sejup4tokfnlk","_id":"ck56ooob5000wejupca6t13tq"},{"post_id":"ck56oooax000cejupf8bi6tm4","tag_id":"ck56oooaz000fejup4fra1467","_id":"ck56ooob5000xejup7mgbbcgb"}],"Tag":[{"name":"spring","_id":"ck56oooal0004ejup7le5d2aj"},{"name":"redis","_id":"ck56oooar0009ejuphd7259ov"},{"name":"java","_id":"ck56oooaz000fejup4fra1467"},{"name":"总结","_id":"ck56ooob2000kejup8mticpcp"},{"name":"计算机网络","_id":"ck56ooob4000sejup4tokfnlk"}]}}